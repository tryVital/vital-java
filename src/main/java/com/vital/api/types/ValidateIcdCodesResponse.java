/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ValidateIcdCodesResponse.Builder.class)
public final class ValidateIcdCodesResponse {
    private final boolean valid;

    private final List<String> errors;

    private final List<IcdExcludesViolation> violations;

    private final List<IcdExcludesWarning> warnings;

    private final Map<String, Object> additionalProperties;

    private ValidateIcdCodesResponse(
            boolean valid,
            List<String> errors,
            List<IcdExcludesViolation> violations,
            List<IcdExcludesWarning> warnings,
            Map<String, Object> additionalProperties) {
        this.valid = valid;
        this.errors = errors;
        this.violations = violations;
        this.warnings = warnings;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("valid")
    public boolean getValid() {
        return valid;
    }

    @JsonProperty("errors")
    public List<String> getErrors() {
        return errors;
    }

    @JsonProperty("violations")
    public List<IcdExcludesViolation> getViolations() {
        return violations;
    }

    @JsonProperty("warnings")
    public List<IcdExcludesWarning> getWarnings() {
        return warnings;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ValidateIcdCodesResponse && equalTo((ValidateIcdCodesResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ValidateIcdCodesResponse other) {
        return valid == other.valid
                && errors.equals(other.errors)
                && violations.equals(other.violations)
                && warnings.equals(other.warnings);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.valid, this.errors, this.violations, this.warnings);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ValidStage builder() {
        return new Builder();
    }

    public interface ValidStage {
        _FinalStage valid(boolean valid);

        Builder from(ValidateIcdCodesResponse other);
    }

    public interface _FinalStage {
        ValidateIcdCodesResponse build();

        _FinalStage errors(List<String> errors);

        _FinalStage addErrors(String errors);

        _FinalStage addAllErrors(List<String> errors);

        _FinalStage violations(List<IcdExcludesViolation> violations);

        _FinalStage addViolations(IcdExcludesViolation violations);

        _FinalStage addAllViolations(List<IcdExcludesViolation> violations);

        _FinalStage warnings(List<IcdExcludesWarning> warnings);

        _FinalStage addWarnings(IcdExcludesWarning warnings);

        _FinalStage addAllWarnings(List<IcdExcludesWarning> warnings);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ValidStage, _FinalStage {
        private boolean valid;

        private List<IcdExcludesWarning> warnings = new ArrayList<>();

        private List<IcdExcludesViolation> violations = new ArrayList<>();

        private List<String> errors = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ValidateIcdCodesResponse other) {
            valid(other.getValid());
            errors(other.getErrors());
            violations(other.getViolations());
            warnings(other.getWarnings());
            return this;
        }

        @java.lang.Override
        @JsonSetter("valid")
        public _FinalStage valid(boolean valid) {
            this.valid = valid;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllWarnings(List<IcdExcludesWarning> warnings) {
            if (warnings != null) {
                this.warnings.addAll(warnings);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addWarnings(IcdExcludesWarning warnings) {
            this.warnings.add(warnings);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "warnings", nulls = Nulls.SKIP)
        public _FinalStage warnings(List<IcdExcludesWarning> warnings) {
            this.warnings.clear();
            this.warnings.addAll(warnings);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllViolations(List<IcdExcludesViolation> violations) {
            if (violations != null) {
                this.violations.addAll(violations);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addViolations(IcdExcludesViolation violations) {
            this.violations.add(violations);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "violations", nulls = Nulls.SKIP)
        public _FinalStage violations(List<IcdExcludesViolation> violations) {
            this.violations.clear();
            this.violations.addAll(violations);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllErrors(List<String> errors) {
            if (errors != null) {
                this.errors.addAll(errors);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addErrors(String errors) {
            this.errors.add(errors);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public _FinalStage errors(List<String> errors) {
            this.errors.clear();
            this.errors.addAll(errors);
            return this;
        }

        @java.lang.Override
        public ValidateIcdCodesResponse build() {
            return new ValidateIcdCodesResponse(valid, errors, violations, warnings, additionalProperties);
        }
    }
}
