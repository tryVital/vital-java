/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingLabTest.Builder.class)
public final class ClientFacingLabTest {
    private final String id;

    private final String slug;

    private final String name;

    private final LabTestSampleType sampleType;

    private final LabTestCollectionMethod method;

    private final double price;

    private final boolean isActive;

    private final LabTestStatus status;

    private final Optional<Boolean> fasting;

    private final Optional<ClientFacingLab> lab;

    private final Optional<List<ClientFacingMarker>> markers;

    private final Optional<Boolean> isDelegated;

    private final Optional<Boolean> autoGenerated;

    private final Optional<Boolean> hasCollectionInstructions;

    private final Map<String, Object> additionalProperties;

    private ClientFacingLabTest(
            String id,
            String slug,
            String name,
            LabTestSampleType sampleType,
            LabTestCollectionMethod method,
            double price,
            boolean isActive,
            LabTestStatus status,
            Optional<Boolean> fasting,
            Optional<ClientFacingLab> lab,
            Optional<List<ClientFacingMarker>> markers,
            Optional<Boolean> isDelegated,
            Optional<Boolean> autoGenerated,
            Optional<Boolean> hasCollectionInstructions,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.slug = slug;
        this.name = name;
        this.sampleType = sampleType;
        this.method = method;
        this.price = price;
        this.isActive = isActive;
        this.status = status;
        this.fasting = fasting;
        this.lab = lab;
        this.markers = markers;
        this.isDelegated = isDelegated;
        this.autoGenerated = autoGenerated;
        this.hasCollectionInstructions = hasCollectionInstructions;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return
     */
    @JsonProperty("slug")
    public String getSlug() {
        return slug;
    }

    /**
     * @return
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return
     */
    @JsonProperty("sample_type")
    public LabTestSampleType getSampleType() {
        return sampleType;
    }

    /**
     * @return
     */
    @JsonProperty("method")
    public LabTestCollectionMethod getMethod() {
        return method;
    }

    /**
     * @return
     */
    @JsonProperty("price")
    public double getPrice() {
        return price;
    }

    /**
     * @return Deprecated. Use status instead.
     */
    @JsonProperty("is_active")
    public boolean getIsActive() {
        return isActive;
    }

    /**
     * @return
     */
    @JsonProperty("status")
    public LabTestStatus getStatus() {
        return status;
    }

    /**
     * @return Defines whether a lab test requires fasting.
     */
    @JsonProperty("fasting")
    public Optional<Boolean> getFasting() {
        return fasting;
    }

    /**
     * @return
     */
    @JsonProperty("lab")
    public Optional<ClientFacingLab> getLab() {
        return lab;
    }

    /**
     * @return
     */
    @JsonProperty("markers")
    public Optional<List<ClientFacingMarker>> getMarkers() {
        return markers;
    }

    /**
     * @return Denotes whether a lab test requires using non-Vital physician networks. If it does then it's delegated - no otherwise.
     */
    @JsonProperty("is_delegated")
    public Optional<Boolean> getIsDelegated() {
        return isDelegated;
    }

    /**
     * @return Whether the lab test was auto-generated by Vital
     */
    @JsonProperty("auto_generated")
    public Optional<Boolean> getAutoGenerated() {
        return autoGenerated;
    }

    /**
     * @return Whether or not the lab test has collection instructions.
     */
    @JsonProperty("has_collection_instructions")
    public Optional<Boolean> getHasCollectionInstructions() {
        return hasCollectionInstructions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingLabTest && equalTo((ClientFacingLabTest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingLabTest other) {
        return id.equals(other.id)
                && slug.equals(other.slug)
                && name.equals(other.name)
                && sampleType.equals(other.sampleType)
                && method.equals(other.method)
                && price == other.price
                && isActive == other.isActive
                && status.equals(other.status)
                && fasting.equals(other.fasting)
                && lab.equals(other.lab)
                && markers.equals(other.markers)
                && isDelegated.equals(other.isDelegated)
                && autoGenerated.equals(other.autoGenerated)
                && hasCollectionInstructions.equals(other.hasCollectionInstructions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.slug,
                this.name,
                this.sampleType,
                this.method,
                this.price,
                this.isActive,
                this.status,
                this.fasting,
                this.lab,
                this.markers,
                this.isDelegated,
                this.autoGenerated,
                this.hasCollectionInstructions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        SlugStage id(String id);

        Builder from(ClientFacingLabTest other);
    }

    public interface SlugStage {
        NameStage slug(String slug);
    }

    public interface NameStage {
        SampleTypeStage name(String name);
    }

    public interface SampleTypeStage {
        MethodStage sampleType(LabTestSampleType sampleType);
    }

    public interface MethodStage {
        PriceStage method(LabTestCollectionMethod method);
    }

    public interface PriceStage {
        IsActiveStage price(double price);
    }

    public interface IsActiveStage {
        StatusStage isActive(boolean isActive);
    }

    public interface StatusStage {
        _FinalStage status(LabTestStatus status);
    }

    public interface _FinalStage {
        ClientFacingLabTest build();

        _FinalStage fasting(Optional<Boolean> fasting);

        _FinalStage fasting(Boolean fasting);

        _FinalStage lab(Optional<ClientFacingLab> lab);

        _FinalStage lab(ClientFacingLab lab);

        _FinalStage markers(Optional<List<ClientFacingMarker>> markers);

        _FinalStage markers(List<ClientFacingMarker> markers);

        _FinalStage isDelegated(Optional<Boolean> isDelegated);

        _FinalStage isDelegated(Boolean isDelegated);

        _FinalStage autoGenerated(Optional<Boolean> autoGenerated);

        _FinalStage autoGenerated(Boolean autoGenerated);

        _FinalStage hasCollectionInstructions(Optional<Boolean> hasCollectionInstructions);

        _FinalStage hasCollectionInstructions(Boolean hasCollectionInstructions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    SlugStage,
                    NameStage,
                    SampleTypeStage,
                    MethodStage,
                    PriceStage,
                    IsActiveStage,
                    StatusStage,
                    _FinalStage {
        private String id;

        private String slug;

        private String name;

        private LabTestSampleType sampleType;

        private LabTestCollectionMethod method;

        private double price;

        private boolean isActive;

        private LabTestStatus status;

        private Optional<Boolean> hasCollectionInstructions = Optional.empty();

        private Optional<Boolean> autoGenerated = Optional.empty();

        private Optional<Boolean> isDelegated = Optional.empty();

        private Optional<List<ClientFacingMarker>> markers = Optional.empty();

        private Optional<ClientFacingLab> lab = Optional.empty();

        private Optional<Boolean> fasting = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingLabTest other) {
            id(other.getId());
            slug(other.getSlug());
            name(other.getName());
            sampleType(other.getSampleType());
            method(other.getMethod());
            price(other.getPrice());
            isActive(other.getIsActive());
            status(other.getStatus());
            fasting(other.getFasting());
            lab(other.getLab());
            markers(other.getMarkers());
            isDelegated(other.getIsDelegated());
            autoGenerated(other.getAutoGenerated());
            hasCollectionInstructions(other.getHasCollectionInstructions());
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public SlugStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("slug")
        public NameStage slug(String slug) {
            this.slug = slug;
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public SampleTypeStage name(String name) {
            this.name = name;
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sample_type")
        public MethodStage sampleType(LabTestSampleType sampleType) {
            this.sampleType = sampleType;
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("method")
        public PriceStage method(LabTestCollectionMethod method) {
            this.method = method;
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("price")
        public IsActiveStage price(double price) {
            this.price = price;
            return this;
        }

        /**
         * <p>Deprecated. Use status instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("is_active")
        public StatusStage isActive(boolean isActive) {
            this.isActive = isActive;
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(LabTestStatus status) {
            this.status = status;
            return this;
        }

        /**
         * <p>Whether or not the lab test has collection instructions.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage hasCollectionInstructions(Boolean hasCollectionInstructions) {
            this.hasCollectionInstructions = Optional.of(hasCollectionInstructions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "has_collection_instructions", nulls = Nulls.SKIP)
        public _FinalStage hasCollectionInstructions(Optional<Boolean> hasCollectionInstructions) {
            this.hasCollectionInstructions = hasCollectionInstructions;
            return this;
        }

        /**
         * <p>Whether the lab test was auto-generated by Vital</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage autoGenerated(Boolean autoGenerated) {
            this.autoGenerated = Optional.of(autoGenerated);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "auto_generated", nulls = Nulls.SKIP)
        public _FinalStage autoGenerated(Optional<Boolean> autoGenerated) {
            this.autoGenerated = autoGenerated;
            return this;
        }

        /**
         * <p>Denotes whether a lab test requires using non-Vital physician networks. If it does then it's delegated - no otherwise.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isDelegated(Boolean isDelegated) {
            this.isDelegated = Optional.of(isDelegated);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_delegated", nulls = Nulls.SKIP)
        public _FinalStage isDelegated(Optional<Boolean> isDelegated) {
            this.isDelegated = isDelegated;
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage markers(List<ClientFacingMarker> markers) {
            this.markers = Optional.of(markers);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "markers", nulls = Nulls.SKIP)
        public _FinalStage markers(Optional<List<ClientFacingMarker>> markers) {
            this.markers = markers;
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lab(ClientFacingLab lab) {
            this.lab = Optional.of(lab);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lab", nulls = Nulls.SKIP)
        public _FinalStage lab(Optional<ClientFacingLab> lab) {
            this.lab = lab;
            return this;
        }

        /**
         * <p>Defines whether a lab test requires fasting.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fasting(Boolean fasting) {
            this.fasting = Optional.of(fasting);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fasting", nulls = Nulls.SKIP)
        public _FinalStage fasting(Optional<Boolean> fasting) {
            this.fasting = fasting;
            return this;
        }

        @java.lang.Override
        public ClientFacingLabTest build() {
            return new ClientFacingLabTest(
                    id,
                    slug,
                    name,
                    sampleType,
                    method,
                    price,
                    isActive,
                    status,
                    fasting,
                    lab,
                    markers,
                    isDelegated,
                    autoGenerated,
                    hasCollectionInstructions,
                    additionalProperties);
        }
    }
}
