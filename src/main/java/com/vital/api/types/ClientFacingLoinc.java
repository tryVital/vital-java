/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingLoinc.Builder.class)
public final class ClientFacingLoinc {
    private final int id;

    private final String name;

    private final String slug;

    private final String code;

    private final Optional<String> unit;

    private final Map<String, Object> additionalProperties;

    private ClientFacingLoinc(
            int id,
            String name,
            String slug,
            String code,
            Optional<String> unit,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.slug = slug;
        this.code = code;
        this.unit = unit;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public int getId() {
        return id;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("slug")
    public String getSlug() {
        return slug;
    }

    @JsonProperty("code")
    public String getCode() {
        return code;
    }

    @JsonProperty("unit")
    public Optional<String> getUnit() {
        return unit;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingLoinc && equalTo((ClientFacingLoinc) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingLoinc other) {
        return id == other.id
                && name.equals(other.name)
                && slug.equals(other.slug)
                && code.equals(other.code)
                && unit.equals(other.unit);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.name, this.slug, this.code, this.unit);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        NameStage id(int id);

        Builder from(ClientFacingLoinc other);
    }

    public interface NameStage {
        SlugStage name(String name);
    }

    public interface SlugStage {
        CodeStage slug(String slug);
    }

    public interface CodeStage {
        _FinalStage code(String code);
    }

    public interface _FinalStage {
        ClientFacingLoinc build();

        _FinalStage unit(Optional<String> unit);

        _FinalStage unit(String unit);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, NameStage, SlugStage, CodeStage, _FinalStage {
        private int id;

        private String name;

        private String slug;

        private String code;

        private Optional<String> unit = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingLoinc other) {
            id(other.getId());
            name(other.getName());
            slug(other.getSlug());
            code(other.getCode());
            unit(other.getUnit());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(int id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public SlugStage name(String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("slug")
        public CodeStage slug(String slug) {
            this.slug = slug;
            return this;
        }

        @java.lang.Override
        @JsonSetter("code")
        public _FinalStage code(String code) {
            this.code = code;
            return this;
        }

        @java.lang.Override
        public _FinalStage unit(String unit) {
            this.unit = Optional.of(unit);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "unit", nulls = Nulls.SKIP)
        public _FinalStage unit(Optional<String> unit) {
            this.unit = unit;
            return this;
        }

        @java.lang.Override
        public ClientFacingLoinc build() {
            return new ClientFacingLoinc(id, name, slug, code, unit, additionalProperties);
        }
    }
}
