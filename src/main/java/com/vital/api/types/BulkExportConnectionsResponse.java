/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BulkExportConnectionsResponse.Builder.class)
public final class BulkExportConnectionsResponse {
    private final List<ConnectionRecipe> data;

    private final Optional<String> nextToken;

    private final Map<String, Object> additionalProperties;

    private BulkExportConnectionsResponse(
            List<ConnectionRecipe> data, Optional<String> nextToken, Map<String, Object> additionalProperties) {
        this.data = data;
        this.nextToken = nextToken;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("data")
    public List<ConnectionRecipe> getData() {
        return data;
    }

    @JsonProperty("next_token")
    public Optional<String> getNextToken() {
        return nextToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BulkExportConnectionsResponse && equalTo((BulkExportConnectionsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BulkExportConnectionsResponse other) {
        return data.equals(other.data) && nextToken.equals(other.nextToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.data, this.nextToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<ConnectionRecipe> data = new ArrayList<>();

        private Optional<String> nextToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BulkExportConnectionsResponse other) {
            data(other.getData());
            nextToken(other.getNextToken());
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(List<ConnectionRecipe> data) {
            this.data.clear();
            this.data.addAll(data);
            return this;
        }

        public Builder addData(ConnectionRecipe data) {
            this.data.add(data);
            return this;
        }

        public Builder addAllData(List<ConnectionRecipe> data) {
            if (data != null) {
                this.data.addAll(data);
            }
            return this;
        }

        @JsonSetter(value = "next_token", nulls = Nulls.SKIP)
        public Builder nextToken(Optional<String> nextToken) {
            this.nextToken = nextToken;
            return this;
        }

        public Builder nextToken(String nextToken) {
            this.nextToken = Optional.ofNullable(nextToken);
            return this;
        }

        public BulkExportConnectionsResponse build() {
            return new BulkExportConnectionsResponse(data, nextToken, additionalProperties);
        }
    }
}
