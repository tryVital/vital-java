/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BulkOp.Builder.class)
public final class BulkOp {
    private final BulkOpType type;

    private final BulkOpStatus status;

    private final Providers provider;

    private final int pending;

    private final int processed;

    private final OffsetDateTime startedAt;

    private final Optional<OffsetDateTime> endedAt;

    private final Map<String, Object> additionalProperties;

    private BulkOp(
            BulkOpType type,
            BulkOpStatus status,
            Providers provider,
            int pending,
            int processed,
            OffsetDateTime startedAt,
            Optional<OffsetDateTime> endedAt,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.status = status;
        this.provider = provider;
        this.pending = pending;
        this.processed = processed;
        this.startedAt = startedAt;
        this.endedAt = endedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return ℹ️ This enum is non-exhaustive.
     */
    @JsonProperty("type")
    public BulkOpType getType() {
        return type;
    }

    /**
     * @return ℹ️ This enum is non-exhaustive.
     */
    @JsonProperty("status")
    public BulkOpStatus getStatus() {
        return status;
    }

    @JsonProperty("provider")
    public Providers getProvider() {
        return provider;
    }

    @JsonProperty("pending")
    public int getPending() {
        return pending;
    }

    @JsonProperty("processed")
    public int getProcessed() {
        return processed;
    }

    @JsonProperty("started_at")
    public OffsetDateTime getStartedAt() {
        return startedAt;
    }

    @JsonProperty("ended_at")
    public Optional<OffsetDateTime> getEndedAt() {
        return endedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BulkOp && equalTo((BulkOp) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BulkOp other) {
        return type.equals(other.type)
                && status.equals(other.status)
                && provider.equals(other.provider)
                && pending == other.pending
                && processed == other.processed
                && startedAt.equals(other.startedAt)
                && endedAt.equals(other.endedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type, this.status, this.provider, this.pending, this.processed, this.startedAt, this.endedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         */
        StatusStage type(@NotNull BulkOpType type);

        Builder from(BulkOp other);
    }

    public interface StatusStage {
        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         */
        ProviderStage status(@NotNull BulkOpStatus status);
    }

    public interface ProviderStage {
        PendingStage provider(@NotNull Providers provider);
    }

    public interface PendingStage {
        ProcessedStage pending(int pending);
    }

    public interface ProcessedStage {
        StartedAtStage processed(int processed);
    }

    public interface StartedAtStage {
        _FinalStage startedAt(@NotNull OffsetDateTime startedAt);
    }

    public interface _FinalStage {
        BulkOp build();

        _FinalStage endedAt(Optional<OffsetDateTime> endedAt);

        _FinalStage endedAt(OffsetDateTime endedAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TypeStage,
                    StatusStage,
                    ProviderStage,
                    PendingStage,
                    ProcessedStage,
                    StartedAtStage,
                    _FinalStage {
        private BulkOpType type;

        private BulkOpStatus status;

        private Providers provider;

        private int pending;

        private int processed;

        private OffsetDateTime startedAt;

        private Optional<OffsetDateTime> endedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BulkOp other) {
            type(other.getType());
            status(other.getStatus());
            provider(other.getProvider());
            pending(other.getPending());
            processed(other.getProcessed());
            startedAt(other.getStartedAt());
            endedAt(other.getEndedAt());
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public StatusStage type(@NotNull BulkOpType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public ProviderStage status(@NotNull BulkOpStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("provider")
        public PendingStage provider(@NotNull Providers provider) {
            this.provider = Objects.requireNonNull(provider, "provider must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("pending")
        public ProcessedStage pending(int pending) {
            this.pending = pending;
            return this;
        }

        @java.lang.Override
        @JsonSetter("processed")
        public StartedAtStage processed(int processed) {
            this.processed = processed;
            return this;
        }

        @java.lang.Override
        @JsonSetter("started_at")
        public _FinalStage startedAt(@NotNull OffsetDateTime startedAt) {
            this.startedAt = Objects.requireNonNull(startedAt, "startedAt must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage endedAt(OffsetDateTime endedAt) {
            this.endedAt = Optional.ofNullable(endedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ended_at", nulls = Nulls.SKIP)
        public _FinalStage endedAt(Optional<OffsetDateTime> endedAt) {
            this.endedAt = endedAt;
            return this;
        }

        @java.lang.Override
        public BulkOp build() {
            return new BulkOp(type, status, provider, pending, processed, startedAt, endedAt, additionalProperties);
        }
    }
}
