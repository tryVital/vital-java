/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Addres.Builder.class)
public final class Addres {
    private final String use;

    private final String type;

    private final List<String> line;

    private final String city;

    private final String state;

    private final String postalCode;

    private final String country;

    private final Map<String, Object> additionalProperties;

    private Addres(
            String use,
            String type,
            List<String> line,
            String city,
            String state,
            String postalCode,
            String country,
            Map<String, Object> additionalProperties) {
        this.use = use;
        this.type = type;
        this.line = line;
        this.city = city;
        this.state = state;
        this.postalCode = postalCode;
        this.country = country;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("use")
    public String getUse() {
        return use;
    }

    @JsonProperty("type")
    public String getType() {
        return type;
    }

    @JsonProperty("line")
    public List<String> getLine() {
        return line;
    }

    @JsonProperty("city")
    public String getCity() {
        return city;
    }

    @JsonProperty("state")
    public String getState() {
        return state;
    }

    @JsonProperty("postalCode")
    public String getPostalCode() {
        return postalCode;
    }

    @JsonProperty("country")
    public String getCountry() {
        return country;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Addres && equalTo((Addres) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Addres other) {
        return use.equals(other.use)
                && type.equals(other.type)
                && line.equals(other.line)
                && city.equals(other.city)
                && state.equals(other.state)
                && postalCode.equals(other.postalCode)
                && country.equals(other.country);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.use, this.type, this.line, this.city, this.state, this.postalCode, this.country);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UseStage builder() {
        return new Builder();
    }

    public interface UseStage {
        TypeStage use(String use);

        Builder from(Addres other);
    }

    public interface TypeStage {
        CityStage type(String type);
    }

    public interface CityStage {
        StateStage city(String city);
    }

    public interface StateStage {
        PostalCodeStage state(String state);
    }

    public interface PostalCodeStage {
        CountryStage postalCode(String postalCode);
    }

    public interface CountryStage {
        _FinalStage country(String country);
    }

    public interface _FinalStage {
        Addres build();

        _FinalStage line(List<String> line);

        _FinalStage addLine(String line);

        _FinalStage addAllLine(List<String> line);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements UseStage, TypeStage, CityStage, StateStage, PostalCodeStage, CountryStage, _FinalStage {
        private String use;

        private String type;

        private String city;

        private String state;

        private String postalCode;

        private String country;

        private List<String> line = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(Addres other) {
            use(other.getUse());
            type(other.getType());
            line(other.getLine());
            city(other.getCity());
            state(other.getState());
            postalCode(other.getPostalCode());
            country(other.getCountry());
            return this;
        }

        @Override
        @JsonSetter("use")
        public TypeStage use(String use) {
            this.use = use;
            return this;
        }

        @Override
        @JsonSetter("type")
        public CityStage type(String type) {
            this.type = type;
            return this;
        }

        @Override
        @JsonSetter("city")
        public StateStage city(String city) {
            this.city = city;
            return this;
        }

        @Override
        @JsonSetter("state")
        public PostalCodeStage state(String state) {
            this.state = state;
            return this;
        }

        @Override
        @JsonSetter("postalCode")
        public CountryStage postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        @Override
        @JsonSetter("country")
        public _FinalStage country(String country) {
            this.country = country;
            return this;
        }

        @Override
        public _FinalStage addAllLine(List<String> line) {
            this.line.addAll(line);
            return this;
        }

        @Override
        public _FinalStage addLine(String line) {
            this.line.add(line);
            return this;
        }

        @Override
        @JsonSetter(value = "line", nulls = Nulls.SKIP)
        public _FinalStage line(List<String> line) {
            this.line.clear();
            this.line.addAll(line);
            return this;
        }

        @Override
        public Addres build() {
            return new Addres(use, type, line, city, state, postalCode, country, additionalProperties);
        }
    }
}
