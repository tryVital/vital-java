/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingLabLocation.Builder.class)
public final class ClientFacingLabLocation {
    private final LabLocationMetadata metadata;

    private final int distance;

    private final Map<String, Object> additionalProperties;

    private ClientFacingLabLocation(
            LabLocationMetadata metadata, int distance, Map<String, Object> additionalProperties) {
        this.metadata = metadata;
        this.distance = distance;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("metadata")
    public LabLocationMetadata getMetadata() {
        return metadata;
    }

    @JsonProperty("distance")
    public int getDistance() {
        return distance;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingLabLocation && equalTo((ClientFacingLabLocation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingLabLocation other) {
        return metadata.equals(other.metadata) && distance == other.distance;
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.metadata, this.distance);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MetadataStage builder() {
        return new Builder();
    }

    public interface MetadataStage {
        DistanceStage metadata(LabLocationMetadata metadata);

        Builder from(ClientFacingLabLocation other);
    }

    public interface DistanceStage {
        _FinalStage distance(int distance);
    }

    public interface _FinalStage {
        ClientFacingLabLocation build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MetadataStage, DistanceStage, _FinalStage {
        private LabLocationMetadata metadata;

        private int distance;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(ClientFacingLabLocation other) {
            metadata(other.getMetadata());
            distance(other.getDistance());
            return this;
        }

        @Override
        @JsonSetter("metadata")
        public DistanceStage metadata(LabLocationMetadata metadata) {
            this.metadata = metadata;
            return this;
        }

        @Override
        @JsonSetter("distance")
        public _FinalStage distance(int distance) {
            this.distance = distance;
            return this;
        }

        @Override
        public ClientFacingLabLocation build() {
            return new ClientFacingLabLocation(metadata, distance, additionalProperties);
        }
    }
}
