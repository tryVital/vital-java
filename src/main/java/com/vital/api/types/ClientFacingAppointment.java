/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientFacingAppointment.Builder.class)
public final class ClientFacingAppointment {
    private final String id;

    private final String userId;

    private final String orderId;

    private final UsAddress address;

    private final LngLat location;

    private final Optional<OffsetDateTime> startAt;

    private final Optional<OffsetDateTime> endAt;

    private final Optional<String> ianaTimezone;

    private final AppointmentType type;

    private final AppointmentProvider provider;

    private final AppointmentStatus status;

    private final String providerId;

    private final Optional<String> externalId;

    private final boolean canReschedule;

    private final AppointmentEventStatus eventStatus;

    private final Optional<Map<String, Object>> eventData;

    private final List<ClientFacingAppointmentEvent> events;

    private final Map<String, Object> additionalProperties;

    private ClientFacingAppointment(
            String id,
            String userId,
            String orderId,
            UsAddress address,
            LngLat location,
            Optional<OffsetDateTime> startAt,
            Optional<OffsetDateTime> endAt,
            Optional<String> ianaTimezone,
            AppointmentType type,
            AppointmentProvider provider,
            AppointmentStatus status,
            String providerId,
            Optional<String> externalId,
            boolean canReschedule,
            AppointmentEventStatus eventStatus,
            Optional<Map<String, Object>> eventData,
            List<ClientFacingAppointmentEvent> events,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.userId = userId;
        this.orderId = orderId;
        this.address = address;
        this.location = location;
        this.startAt = startAt;
        this.endAt = endAt;
        this.ianaTimezone = ianaTimezone;
        this.type = type;
        this.provider = provider;
        this.status = status;
        this.providerId = providerId;
        this.externalId = externalId;
        this.canReschedule = canReschedule;
        this.eventStatus = eventStatus;
        this.eventData = eventData;
        this.events = events;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("order_id")
    public String getOrderId() {
        return orderId;
    }

    @JsonProperty("address")
    public UsAddress getAddress() {
        return address;
    }

    @JsonProperty("location")
    public LngLat getLocation() {
        return location;
    }

    /**
     * @return Time is in UTC
     */
    @JsonProperty("start_at")
    public Optional<OffsetDateTime> getStartAt() {
        return startAt;
    }

    /**
     * @return Time is in UTC
     */
    @JsonProperty("end_at")
    public Optional<OffsetDateTime> getEndAt() {
        return endAt;
    }

    @JsonProperty("iana_timezone")
    public Optional<String> getIanaTimezone() {
        return ianaTimezone;
    }

    @JsonProperty("type")
    public AppointmentType getType() {
        return type;
    }

    @JsonProperty("provider")
    public AppointmentProvider getProvider() {
        return provider;
    }

    @JsonProperty("status")
    public AppointmentStatus getStatus() {
        return status;
    }

    @JsonProperty("provider_id")
    public String getProviderId() {
        return providerId;
    }

    @JsonProperty("external_id")
    public Optional<String> getExternalId() {
        return externalId;
    }

    @JsonProperty("can_reschedule")
    public boolean getCanReschedule() {
        return canReschedule;
    }

    @JsonProperty("event_status")
    public AppointmentEventStatus getEventStatus() {
        return eventStatus;
    }

    @JsonProperty("event_data")
    public Optional<Map<String, Object>> getEventData() {
        return eventData;
    }

    @JsonProperty("events")
    public List<ClientFacingAppointmentEvent> getEvents() {
        return events;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingAppointment && equalTo((ClientFacingAppointment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingAppointment other) {
        return id.equals(other.id)
                && userId.equals(other.userId)
                && orderId.equals(other.orderId)
                && address.equals(other.address)
                && location.equals(other.location)
                && startAt.equals(other.startAt)
                && endAt.equals(other.endAt)
                && ianaTimezone.equals(other.ianaTimezone)
                && type.equals(other.type)
                && provider.equals(other.provider)
                && status.equals(other.status)
                && providerId.equals(other.providerId)
                && externalId.equals(other.externalId)
                && canReschedule == other.canReschedule
                && eventStatus.equals(other.eventStatus)
                && eventData.equals(other.eventData)
                && events.equals(other.events);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.userId,
                this.orderId,
                this.address,
                this.location,
                this.startAt,
                this.endAt,
                this.ianaTimezone,
                this.type,
                this.provider,
                this.status,
                this.providerId,
                this.externalId,
                this.canReschedule,
                this.eventStatus,
                this.eventData,
                this.events);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        UserIdStage id(@NotNull String id);

        Builder from(ClientFacingAppointment other);
    }

    public interface UserIdStage {
        OrderIdStage userId(@NotNull String userId);
    }

    public interface OrderIdStage {
        AddressStage orderId(@NotNull String orderId);
    }

    public interface AddressStage {
        LocationStage address(@NotNull UsAddress address);
    }

    public interface LocationStage {
        TypeStage location(@NotNull LngLat location);
    }

    public interface TypeStage {
        ProviderStage type(@NotNull AppointmentType type);
    }

    public interface ProviderStage {
        StatusStage provider(@NotNull AppointmentProvider provider);
    }

    public interface StatusStage {
        ProviderIdStage status(@NotNull AppointmentStatus status);
    }

    public interface ProviderIdStage {
        CanRescheduleStage providerId(@NotNull String providerId);
    }

    public interface CanRescheduleStage {
        EventStatusStage canReschedule(boolean canReschedule);
    }

    public interface EventStatusStage {
        _FinalStage eventStatus(@NotNull AppointmentEventStatus eventStatus);
    }

    public interface _FinalStage {
        ClientFacingAppointment build();

        /**
         * <p>Time is in UTC</p>
         */
        _FinalStage startAt(Optional<OffsetDateTime> startAt);

        _FinalStage startAt(OffsetDateTime startAt);

        /**
         * <p>Time is in UTC</p>
         */
        _FinalStage endAt(Optional<OffsetDateTime> endAt);

        _FinalStage endAt(OffsetDateTime endAt);

        _FinalStage ianaTimezone(Optional<String> ianaTimezone);

        _FinalStage ianaTimezone(String ianaTimezone);

        _FinalStage externalId(Optional<String> externalId);

        _FinalStage externalId(String externalId);

        _FinalStage eventData(Optional<Map<String, Object>> eventData);

        _FinalStage eventData(Map<String, Object> eventData);

        _FinalStage events(List<ClientFacingAppointmentEvent> events);

        _FinalStage addEvents(ClientFacingAppointmentEvent events);

        _FinalStage addAllEvents(List<ClientFacingAppointmentEvent> events);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    UserIdStage,
                    OrderIdStage,
                    AddressStage,
                    LocationStage,
                    TypeStage,
                    ProviderStage,
                    StatusStage,
                    ProviderIdStage,
                    CanRescheduleStage,
                    EventStatusStage,
                    _FinalStage {
        private String id;

        private String userId;

        private String orderId;

        private UsAddress address;

        private LngLat location;

        private AppointmentType type;

        private AppointmentProvider provider;

        private AppointmentStatus status;

        private String providerId;

        private boolean canReschedule;

        private AppointmentEventStatus eventStatus;

        private List<ClientFacingAppointmentEvent> events = new ArrayList<>();

        private Optional<Map<String, Object>> eventData = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        private Optional<String> ianaTimezone = Optional.empty();

        private Optional<OffsetDateTime> endAt = Optional.empty();

        private Optional<OffsetDateTime> startAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingAppointment other) {
            id(other.getId());
            userId(other.getUserId());
            orderId(other.getOrderId());
            address(other.getAddress());
            location(other.getLocation());
            startAt(other.getStartAt());
            endAt(other.getEndAt());
            ianaTimezone(other.getIanaTimezone());
            type(other.getType());
            provider(other.getProvider());
            status(other.getStatus());
            providerId(other.getProviderId());
            externalId(other.getExternalId());
            canReschedule(other.getCanReschedule());
            eventStatus(other.getEventStatus());
            eventData(other.getEventData());
            events(other.getEvents());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public UserIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("user_id")
        public OrderIdStage userId(@NotNull String userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("order_id")
        public AddressStage orderId(@NotNull String orderId) {
            this.orderId = Objects.requireNonNull(orderId, "orderId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("address")
        public LocationStage address(@NotNull UsAddress address) {
            this.address = Objects.requireNonNull(address, "address must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("location")
        public TypeStage location(@NotNull LngLat location) {
            this.location = Objects.requireNonNull(location, "location must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public ProviderStage type(@NotNull AppointmentType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("provider")
        public StatusStage provider(@NotNull AppointmentProvider provider) {
            this.provider = Objects.requireNonNull(provider, "provider must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public ProviderIdStage status(@NotNull AppointmentStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("provider_id")
        public CanRescheduleStage providerId(@NotNull String providerId) {
            this.providerId = Objects.requireNonNull(providerId, "providerId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("can_reschedule")
        public EventStatusStage canReschedule(boolean canReschedule) {
            this.canReschedule = canReschedule;
            return this;
        }

        @java.lang.Override
        @JsonSetter("event_status")
        public _FinalStage eventStatus(@NotNull AppointmentEventStatus eventStatus) {
            this.eventStatus = Objects.requireNonNull(eventStatus, "eventStatus must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllEvents(List<ClientFacingAppointmentEvent> events) {
            if (events != null) {
                this.events.addAll(events);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addEvents(ClientFacingAppointmentEvent events) {
            this.events.add(events);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "events", nulls = Nulls.SKIP)
        public _FinalStage events(List<ClientFacingAppointmentEvent> events) {
            this.events.clear();
            this.events.addAll(events);
            return this;
        }

        @java.lang.Override
        public _FinalStage eventData(Map<String, Object> eventData) {
            this.eventData = Optional.ofNullable(eventData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "event_data", nulls = Nulls.SKIP)
        public _FinalStage eventData(Optional<Map<String, Object>> eventData) {
            this.eventData = eventData;
            return this;
        }

        @java.lang.Override
        public _FinalStage externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "external_id", nulls = Nulls.SKIP)
        public _FinalStage externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        public _FinalStage ianaTimezone(String ianaTimezone) {
            this.ianaTimezone = Optional.ofNullable(ianaTimezone);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "iana_timezone", nulls = Nulls.SKIP)
        public _FinalStage ianaTimezone(Optional<String> ianaTimezone) {
            this.ianaTimezone = ianaTimezone;
            return this;
        }

        /**
         * <p>Time is in UTC</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endAt(OffsetDateTime endAt) {
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        /**
         * <p>Time is in UTC</p>
         */
        @java.lang.Override
        @JsonSetter(value = "end_at", nulls = Nulls.SKIP)
        public _FinalStage endAt(Optional<OffsetDateTime> endAt) {
            this.endAt = endAt;
            return this;
        }

        /**
         * <p>Time is in UTC</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage startAt(OffsetDateTime startAt) {
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        /**
         * <p>Time is in UTC</p>
         */
        @java.lang.Override
        @JsonSetter(value = "start_at", nulls = Nulls.SKIP)
        public _FinalStage startAt(Optional<OffsetDateTime> startAt) {
            this.startAt = startAt;
            return this;
        }

        @java.lang.Override
        public ClientFacingAppointment build() {
            return new ClientFacingAppointment(
                    id,
                    userId,
                    orderId,
                    address,
                    location,
                    startAt,
                    endAt,
                    ianaTimezone,
                    type,
                    provider,
                    status,
                    providerId,
                    externalId,
                    canReschedule,
                    eventStatus,
                    eventData,
                    events,
                    additionalProperties);
        }
    }
}
