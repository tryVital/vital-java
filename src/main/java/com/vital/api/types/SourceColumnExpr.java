/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SourceColumnExpr.Builder.class)
public final class SourceColumnExpr {
    private final SourceColumnExprSource source;

    private final Map<String, Object> additionalProperties;

    private SourceColumnExpr(SourceColumnExprSource source, Map<String, Object> additionalProperties) {
        this.source = source;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return ℹ️ This enum is non-exhaustive.
     */
    @JsonProperty("source")
    public SourceColumnExprSource getSource() {
        return source;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SourceColumnExpr && equalTo((SourceColumnExpr) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SourceColumnExpr other) {
        return source.equals(other.source);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.source);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SourceStage builder() {
        return new Builder();
    }

    public interface SourceStage {
        _FinalStage source(SourceColumnExprSource source);

        Builder from(SourceColumnExpr other);
    }

    public interface _FinalStage {
        SourceColumnExpr build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SourceStage, _FinalStage {
        private SourceColumnExprSource source;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SourceColumnExpr other) {
            source(other.getSource());
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("source")
        public _FinalStage source(SourceColumnExprSource source) {
            this.source = source;
            return this;
        }

        @java.lang.Override
        public SourceColumnExpr build() {
            return new SourceColumnExpr(source, additionalProperties);
        }
    }
}
