/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = TelecomItem.Builder.class)
public final class TelecomItem {
    private final String system;

    private final String use;

    private final String value;

    private final Map<String, Object> additionalProperties;

    private TelecomItem(String system, String use, String value, Map<String, Object> additionalProperties) {
        this.system = system;
        this.use = use;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("system")
    public String getSystem() {
        return system;
    }

    @JsonProperty("use")
    public String getUse() {
        return use;
    }

    @JsonProperty("value")
    public String getValue() {
        return value;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TelecomItem && equalTo((TelecomItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TelecomItem other) {
        return system.equals(other.system) && use.equals(other.use) && value.equals(other.value);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.system, this.use, this.value);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SystemStage builder() {
        return new Builder();
    }

    public interface SystemStage {
        UseStage system(String system);

        Builder from(TelecomItem other);
    }

    public interface UseStage {
        ValueStage use(String use);
    }

    public interface ValueStage {
        _FinalStage value(String value);
    }

    public interface _FinalStage {
        TelecomItem build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SystemStage, UseStage, ValueStage, _FinalStage {
        private String system;

        private String use;

        private String value;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(TelecomItem other) {
            system(other.getSystem());
            use(other.getUse());
            value(other.getValue());
            return this;
        }

        @Override
        @JsonSetter("system")
        public UseStage system(String system) {
            this.system = system;
            return this;
        }

        @Override
        @JsonSetter("use")
        public ValueStage use(String use) {
            this.use = use;
            return this;
        }

        @Override
        @JsonSetter("value")
        public _FinalStage value(String value) {
            this.value = value;
            return this;
        }

        @Override
        public TelecomItem build() {
            return new TelecomItem(system, use, value, additionalProperties);
        }
    }
}
