/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Observation.Builder.class)
public final class Observation {
    private final String resourceType;

    private final String status;

    private final VitalCoreProvidersLabTestLabsSchemasResultsFhirCode code;

    private final ObservationEffectiveDateTime effectiveDateTime;

    private final ObservationIssued issued;

    private final Optional<ValueQuantity> valueQuantity;

    private final Optional<ValueRange> valueRange;

    private final Optional<String> valueString;

    private final List<InterpretationItem> interpretation;

    private final List<ReferenceRangeItem> referenceRange;

    private final Map<String, Object> additionalProperties;

    private Observation(
            String resourceType,
            String status,
            VitalCoreProvidersLabTestLabsSchemasResultsFhirCode code,
            ObservationEffectiveDateTime effectiveDateTime,
            ObservationIssued issued,
            Optional<ValueQuantity> valueQuantity,
            Optional<ValueRange> valueRange,
            Optional<String> valueString,
            List<InterpretationItem> interpretation,
            List<ReferenceRangeItem> referenceRange,
            Map<String, Object> additionalProperties) {
        this.resourceType = resourceType;
        this.status = status;
        this.code = code;
        this.effectiveDateTime = effectiveDateTime;
        this.issued = issued;
        this.valueQuantity = valueQuantity;
        this.valueRange = valueRange;
        this.valueString = valueString;
        this.interpretation = interpretation;
        this.referenceRange = referenceRange;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("resourceType")
    public String getResourceType() {
        return resourceType;
    }

    @JsonProperty("status")
    public String getStatus() {
        return status;
    }

    @JsonProperty("code")
    public VitalCoreProvidersLabTestLabsSchemasResultsFhirCode getCode() {
        return code;
    }

    @JsonProperty("effectiveDateTime")
    public ObservationEffectiveDateTime getEffectiveDateTime() {
        return effectiveDateTime;
    }

    @JsonProperty("issued")
    public ObservationIssued getIssued() {
        return issued;
    }

    @JsonProperty("valueQuantity")
    public Optional<ValueQuantity> getValueQuantity() {
        return valueQuantity;
    }

    @JsonProperty("valueRange")
    public Optional<ValueRange> getValueRange() {
        return valueRange;
    }

    @JsonProperty("valueString")
    public Optional<String> getValueString() {
        return valueString;
    }

    @JsonProperty("interpretation")
    public List<InterpretationItem> getInterpretation() {
        return interpretation;
    }

    @JsonProperty("referenceRange")
    public List<ReferenceRangeItem> getReferenceRange() {
        return referenceRange;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Observation && equalTo((Observation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Observation other) {
        return resourceType.equals(other.resourceType)
                && status.equals(other.status)
                && code.equals(other.code)
                && effectiveDateTime.equals(other.effectiveDateTime)
                && issued.equals(other.issued)
                && valueQuantity.equals(other.valueQuantity)
                && valueRange.equals(other.valueRange)
                && valueString.equals(other.valueString)
                && interpretation.equals(other.interpretation)
                && referenceRange.equals(other.referenceRange);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.resourceType,
                this.status,
                this.code,
                this.effectiveDateTime,
                this.issued,
                this.valueQuantity,
                this.valueRange,
                this.valueString,
                this.interpretation,
                this.referenceRange);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ResourceTypeStage builder() {
        return new Builder();
    }

    public interface ResourceTypeStage {
        StatusStage resourceType(String resourceType);

        Builder from(Observation other);
    }

    public interface StatusStage {
        CodeStage status(String status);
    }

    public interface CodeStage {
        EffectiveDateTimeStage code(VitalCoreProvidersLabTestLabsSchemasResultsFhirCode code);
    }

    public interface EffectiveDateTimeStage {
        IssuedStage effectiveDateTime(ObservationEffectiveDateTime effectiveDateTime);
    }

    public interface IssuedStage {
        _FinalStage issued(ObservationIssued issued);
    }

    public interface _FinalStage {
        Observation build();

        _FinalStage valueQuantity(Optional<ValueQuantity> valueQuantity);

        _FinalStage valueQuantity(ValueQuantity valueQuantity);

        _FinalStage valueRange(Optional<ValueRange> valueRange);

        _FinalStage valueRange(ValueRange valueRange);

        _FinalStage valueString(Optional<String> valueString);

        _FinalStage valueString(String valueString);

        _FinalStage interpretation(List<InterpretationItem> interpretation);

        _FinalStage addInterpretation(InterpretationItem interpretation);

        _FinalStage addAllInterpretation(List<InterpretationItem> interpretation);

        _FinalStage referenceRange(List<ReferenceRangeItem> referenceRange);

        _FinalStage addReferenceRange(ReferenceRangeItem referenceRange);

        _FinalStage addAllReferenceRange(List<ReferenceRangeItem> referenceRange);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ResourceTypeStage, StatusStage, CodeStage, EffectiveDateTimeStage, IssuedStage, _FinalStage {
        private String resourceType;

        private String status;

        private VitalCoreProvidersLabTestLabsSchemasResultsFhirCode code;

        private ObservationEffectiveDateTime effectiveDateTime;

        private ObservationIssued issued;

        private List<ReferenceRangeItem> referenceRange = new ArrayList<>();

        private List<InterpretationItem> interpretation = new ArrayList<>();

        private Optional<String> valueString = Optional.empty();

        private Optional<ValueRange> valueRange = Optional.empty();

        private Optional<ValueQuantity> valueQuantity = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(Observation other) {
            resourceType(other.getResourceType());
            status(other.getStatus());
            code(other.getCode());
            effectiveDateTime(other.getEffectiveDateTime());
            issued(other.getIssued());
            valueQuantity(other.getValueQuantity());
            valueRange(other.getValueRange());
            valueString(other.getValueString());
            interpretation(other.getInterpretation());
            referenceRange(other.getReferenceRange());
            return this;
        }

        @Override
        @JsonSetter("resourceType")
        public StatusStage resourceType(String resourceType) {
            this.resourceType = resourceType;
            return this;
        }

        @Override
        @JsonSetter("status")
        public CodeStage status(String status) {
            this.status = status;
            return this;
        }

        @Override
        @JsonSetter("code")
        public EffectiveDateTimeStage code(VitalCoreProvidersLabTestLabsSchemasResultsFhirCode code) {
            this.code = code;
            return this;
        }

        @Override
        @JsonSetter("effectiveDateTime")
        public IssuedStage effectiveDateTime(ObservationEffectiveDateTime effectiveDateTime) {
            this.effectiveDateTime = effectiveDateTime;
            return this;
        }

        @Override
        @JsonSetter("issued")
        public _FinalStage issued(ObservationIssued issued) {
            this.issued = issued;
            return this;
        }

        @Override
        public _FinalStage addAllReferenceRange(List<ReferenceRangeItem> referenceRange) {
            this.referenceRange.addAll(referenceRange);
            return this;
        }

        @Override
        public _FinalStage addReferenceRange(ReferenceRangeItem referenceRange) {
            this.referenceRange.add(referenceRange);
            return this;
        }

        @Override
        @JsonSetter(value = "referenceRange", nulls = Nulls.SKIP)
        public _FinalStage referenceRange(List<ReferenceRangeItem> referenceRange) {
            this.referenceRange.clear();
            this.referenceRange.addAll(referenceRange);
            return this;
        }

        @Override
        public _FinalStage addAllInterpretation(List<InterpretationItem> interpretation) {
            this.interpretation.addAll(interpretation);
            return this;
        }

        @Override
        public _FinalStage addInterpretation(InterpretationItem interpretation) {
            this.interpretation.add(interpretation);
            return this;
        }

        @Override
        @JsonSetter(value = "interpretation", nulls = Nulls.SKIP)
        public _FinalStage interpretation(List<InterpretationItem> interpretation) {
            this.interpretation.clear();
            this.interpretation.addAll(interpretation);
            return this;
        }

        @Override
        public _FinalStage valueString(String valueString) {
            this.valueString = Optional.of(valueString);
            return this;
        }

        @Override
        @JsonSetter(value = "valueString", nulls = Nulls.SKIP)
        public _FinalStage valueString(Optional<String> valueString) {
            this.valueString = valueString;
            return this;
        }

        @Override
        public _FinalStage valueRange(ValueRange valueRange) {
            this.valueRange = Optional.of(valueRange);
            return this;
        }

        @Override
        @JsonSetter(value = "valueRange", nulls = Nulls.SKIP)
        public _FinalStage valueRange(Optional<ValueRange> valueRange) {
            this.valueRange = valueRange;
            return this;
        }

        @Override
        public _FinalStage valueQuantity(ValueQuantity valueQuantity) {
            this.valueQuantity = Optional.of(valueQuantity);
            return this;
        }

        @Override
        @JsonSetter(value = "valueQuantity", nulls = Nulls.SKIP)
        public _FinalStage valueQuantity(Optional<ValueQuantity> valueQuantity) {
            this.valueQuantity = valueQuantity;
            return this;
        }

        @Override
        public Observation build() {
            return new Observation(
                    resourceType,
                    status,
                    code,
                    effectiveDateTime,
                    issued,
                    valueQuantity,
                    valueRange,
                    valueString,
                    interpretation,
                    referenceRange,
                    additionalProperties);
        }
    }
}
