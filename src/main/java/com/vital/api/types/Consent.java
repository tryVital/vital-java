/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Consent.Builder.class)
public final class Consent {
    private final ConsentType consentType;

    private final Optional<String> version;

    private final Optional<OffsetDateTime> timeOfConsent;

    private final Map<String, Object> additionalProperties;

    private Consent(
            ConsentType consentType,
            Optional<String> version,
            Optional<OffsetDateTime> timeOfConsent,
            Map<String, Object> additionalProperties) {
        this.consentType = consentType;
        this.version = version;
        this.timeOfConsent = timeOfConsent;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("consentType")
    public ConsentType getConsentType() {
        return consentType;
    }

    @JsonProperty("version")
    public Optional<String> getVersion() {
        return version;
    }

    @JsonProperty("timeOfConsent")
    public Optional<OffsetDateTime> getTimeOfConsent() {
        return timeOfConsent;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Consent && equalTo((Consent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Consent other) {
        return consentType.equals(other.consentType)
                && version.equals(other.version)
                && timeOfConsent.equals(other.timeOfConsent);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.consentType, this.version, this.timeOfConsent);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ConsentTypeStage builder() {
        return new Builder();
    }

    public interface ConsentTypeStage {
        _FinalStage consentType(@NotNull ConsentType consentType);

        Builder from(Consent other);
    }

    public interface _FinalStage {
        Consent build();

        _FinalStage version(Optional<String> version);

        _FinalStage version(String version);

        _FinalStage timeOfConsent(Optional<OffsetDateTime> timeOfConsent);

        _FinalStage timeOfConsent(OffsetDateTime timeOfConsent);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ConsentTypeStage, _FinalStage {
        private ConsentType consentType;

        private Optional<OffsetDateTime> timeOfConsent = Optional.empty();

        private Optional<String> version = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Consent other) {
            consentType(other.getConsentType());
            version(other.getVersion());
            timeOfConsent(other.getTimeOfConsent());
            return this;
        }

        @java.lang.Override
        @JsonSetter("consentType")
        public _FinalStage consentType(@NotNull ConsentType consentType) {
            this.consentType = Objects.requireNonNull(consentType, "consentType must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage timeOfConsent(OffsetDateTime timeOfConsent) {
            this.timeOfConsent = Optional.ofNullable(timeOfConsent);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "timeOfConsent", nulls = Nulls.SKIP)
        public _FinalStage timeOfConsent(Optional<OffsetDateTime> timeOfConsent) {
            this.timeOfConsent = timeOfConsent;
            return this;
        }

        @java.lang.Override
        public _FinalStage version(String version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public _FinalStage version(Optional<String> version) {
            this.version = version;
            return this;
        }

        @java.lang.Override
        public Consent build() {
            return new Consent(consentType, version, timeOfConsent, additionalProperties);
        }
    }
}
