/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Query.Builder.class)
public final class Query {
    private final List<QuerySelectItem> select;

    private final Optional<List<QueryGroupByItem>> groupBy;

    private final Optional<String> where;

    private final Map<String, Object> additionalProperties;

    private Query(
            List<QuerySelectItem> select,
            Optional<List<QueryGroupByItem>> groupBy,
            Optional<String> where,
            Map<String, Object> additionalProperties) {
        this.select = select;
        this.groupBy = groupBy;
        this.where = where;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("select")
    public List<QuerySelectItem> getSelect() {
        return select;
    }

    @JsonProperty("group_by")
    public Optional<List<QueryGroupByItem>> getGroupBy() {
        return groupBy;
    }

    /**
     * @return A WHERE clause filtering the input data. If a GROUP BY clause is present, filtering happens prior to GROUP BY evaluation.
     * <p>WHERE clause uses SQL Expression syntax to describe the filtering criteria:</p>
     * <ul>
     * <li>Available operators: <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>=</code>, <code>!=</code>, <code>NOT</code>, <code>AND</code> and <code>OR</code>.</li>
     * <li>Parentheses is supported.</li>
     * </ul>
     */
    @JsonProperty("where")
    public Optional<String> getWhere() {
        return where;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Query && equalTo((Query) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Query other) {
        return select.equals(other.select) && groupBy.equals(other.groupBy) && where.equals(other.where);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.select, this.groupBy, this.where);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<QuerySelectItem> select = new ArrayList<>();

        private Optional<List<QueryGroupByItem>> groupBy = Optional.empty();

        private Optional<String> where = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Query other) {
            select(other.getSelect());
            groupBy(other.getGroupBy());
            where(other.getWhere());
            return this;
        }

        @JsonSetter(value = "select", nulls = Nulls.SKIP)
        public Builder select(List<QuerySelectItem> select) {
            this.select.clear();
            this.select.addAll(select);
            return this;
        }

        public Builder addSelect(QuerySelectItem select) {
            this.select.add(select);
            return this;
        }

        public Builder addAllSelect(List<QuerySelectItem> select) {
            if (select != null) {
                this.select.addAll(select);
            }
            return this;
        }

        @JsonSetter(value = "group_by", nulls = Nulls.SKIP)
        public Builder groupBy(Optional<List<QueryGroupByItem>> groupBy) {
            this.groupBy = groupBy;
            return this;
        }

        public Builder groupBy(List<QueryGroupByItem> groupBy) {
            this.groupBy = Optional.ofNullable(groupBy);
            return this;
        }

        /**
         * <p>A WHERE clause filtering the input data. If a GROUP BY clause is present, filtering happens prior to GROUP BY evaluation.</p>
         * <p>WHERE clause uses SQL Expression syntax to describe the filtering criteria:</p>
         * <ul>
         * <li>Available operators: <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>=</code>, <code>!=</code>, <code>NOT</code>, <code>AND</code> and <code>OR</code>.</li>
         * <li>Parentheses is supported.</li>
         * </ul>
         */
        @JsonSetter(value = "where", nulls = Nulls.SKIP)
        public Builder where(Optional<String> where) {
            this.where = where;
            return this;
        }

        public Builder where(String where) {
            this.where = Optional.ofNullable(where);
            return this;
        }

        public Query build() {
            return new Query(select, groupBy, where, additionalProperties);
        }
    }
}
