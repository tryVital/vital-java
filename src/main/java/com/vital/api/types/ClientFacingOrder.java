/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingOrder.Builder.class)
public final class ClientFacingOrder {
    private final String userId;

    private final String id;

    private final String teamId;

    private final Optional<ClientFacingPatientDetailsCompatible> patientDetails;

    private final Optional<PatientAddressCompatible> patientAddress;

    private final ClientFacingLabTest labTest;

    private final ClientFacingOrderDetails details;

    private final Optional<String> sampleId;

    private final Optional<String> notes;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final List<ClientFacingOrderEvent> events;

    private final Optional<OrderTopLevelStatus> status;

    private final Optional<ClientFacingPhysician> physician;

    private final Optional<String> healthInsuranceId;

    private final Optional<String> requisitionFormUrl;

    private final Optional<Boolean> priority;

    private final Optional<ShippingAddress> shippingDetails;

    private final Optional<String> activateBy;

    private final Optional<String> passthrough;

    private final Optional<Billing> billingType;

    private final Optional<List<String>> icdCodes;

    private final boolean hasAbn;

    private final Optional<Interpretation> interpretation;

    private final Optional<String> expectedResultByDate;

    private final Optional<String> worstCaseResultByDate;

    private final Map<String, Object> additionalProperties;

    private ClientFacingOrder(
            String userId,
            String id,
            String teamId,
            Optional<ClientFacingPatientDetailsCompatible> patientDetails,
            Optional<PatientAddressCompatible> patientAddress,
            ClientFacingLabTest labTest,
            ClientFacingOrderDetails details,
            Optional<String> sampleId,
            Optional<String> notes,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            List<ClientFacingOrderEvent> events,
            Optional<OrderTopLevelStatus> status,
            Optional<ClientFacingPhysician> physician,
            Optional<String> healthInsuranceId,
            Optional<String> requisitionFormUrl,
            Optional<Boolean> priority,
            Optional<ShippingAddress> shippingDetails,
            Optional<String> activateBy,
            Optional<String> passthrough,
            Optional<Billing> billingType,
            Optional<List<String>> icdCodes,
            boolean hasAbn,
            Optional<Interpretation> interpretation,
            Optional<String> expectedResultByDate,
            Optional<String> worstCaseResultByDate,
            Map<String, Object> additionalProperties) {
        this.userId = userId;
        this.id = id;
        this.teamId = teamId;
        this.patientDetails = patientDetails;
        this.patientAddress = patientAddress;
        this.labTest = labTest;
        this.details = details;
        this.sampleId = sampleId;
        this.notes = notes;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.events = events;
        this.status = status;
        this.physician = physician;
        this.healthInsuranceId = healthInsuranceId;
        this.requisitionFormUrl = requisitionFormUrl;
        this.priority = priority;
        this.shippingDetails = shippingDetails;
        this.activateBy = activateBy;
        this.passthrough = passthrough;
        this.billingType = billingType;
        this.icdCodes = icdCodes;
        this.hasAbn = hasAbn;
        this.interpretation = interpretation;
        this.expectedResultByDate = expectedResultByDate;
        this.worstCaseResultByDate = worstCaseResultByDate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.
     */
    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    /**
     * @return The Vital Order ID
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return Your team id.
     */
    @JsonProperty("team_id")
    public String getTeamId() {
        return teamId;
    }

    /**
     * @return Patient Details
     */
    @JsonProperty("patient_details")
    public Optional<ClientFacingPatientDetailsCompatible> getPatientDetails() {
        return patientDetails;
    }

    /**
     * @return Patient Address
     */
    @JsonProperty("patient_address")
    public Optional<PatientAddressCompatible> getPatientAddress() {
        return patientAddress;
    }

    /**
     * @return The Vital Test associated with the order
     */
    @JsonProperty("lab_test")
    public ClientFacingLabTest getLabTest() {
        return labTest;
    }

    @JsonProperty("details")
    public ClientFacingOrderDetails getDetails() {
        return details;
    }

    /**
     * @return Sample ID
     */
    @JsonProperty("sample_id")
    public Optional<String> getSampleId() {
        return sampleId;
    }

    /**
     * @return Notes associated with the order
     */
    @JsonProperty("notes")
    public Optional<String> getNotes() {
        return notes;
    }

    /**
     * @return When your order was created
     */
    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return When your order was last updated.
     */
    @JsonProperty("updated_at")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("events")
    public List<ClientFacingOrderEvent> getEvents() {
        return events;
    }

    @JsonProperty("status")
    public Optional<OrderTopLevelStatus> getStatus() {
        return status;
    }

    @JsonProperty("physician")
    public Optional<ClientFacingPhysician> getPhysician() {
        return physician;
    }

    /**
     * @return Vital ID of the health insurance.
     */
    @JsonProperty("health_insurance_id")
    public Optional<String> getHealthInsuranceId() {
        return healthInsuranceId;
    }

    /**
     * @return DEPRECATED. Requistion form url.
     */
    @JsonProperty("requisition_form_url")
    public Optional<String> getRequisitionFormUrl() {
        return requisitionFormUrl;
    }

    /**
     * @return Defines whether order is priority or not. For some labs, this refers to a STAT order.
     */
    @JsonProperty("priority")
    public Optional<Boolean> getPriority() {
        return priority;
    }

    /**
     * @return Shipping Details. For unregistered testkit orders.
     */
    @JsonProperty("shipping_details")
    public Optional<ShippingAddress> getShippingDetails() {
        return shippingDetails;
    }

    /**
     * @return Schedule an Order to be processed in a future date.
     */
    @JsonProperty("activate_by")
    public Optional<String> getActivateBy() {
        return activateBy;
    }

    @JsonProperty("passthrough")
    public Optional<String> getPassthrough() {
        return passthrough;
    }

    @JsonProperty("billing_type")
    public Optional<Billing> getBillingType() {
        return billingType;
    }

    @JsonProperty("icd_codes")
    public Optional<List<String>> getIcdCodes() {
        return icdCodes;
    }

    /**
     * @return Defines whether the order has an Advanced Beneficiary Notice (ABN) form or not.
     */
    @JsonProperty("has_abn")
    public boolean getHasAbn() {
        return hasAbn;
    }

    /**
     * @return Interpretation of the order result. Can be one of (normal, abnormal, critical).
     */
    @JsonProperty("interpretation")
    public Optional<Interpretation> getInterpretation() {
        return interpretation;
    }

    /**
     * @return The common-case date by which the order result is expected to be available.
     */
    @JsonProperty("expected_result_by_date")
    public Optional<String> getExpectedResultByDate() {
        return expectedResultByDate;
    }

    /**
     * @return The latest date by which the order result is expected to be available.
     */
    @JsonProperty("worst_case_result_by_date")
    public Optional<String> getWorstCaseResultByDate() {
        return worstCaseResultByDate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingOrder && equalTo((ClientFacingOrder) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingOrder other) {
        return userId.equals(other.userId)
                && id.equals(other.id)
                && teamId.equals(other.teamId)
                && patientDetails.equals(other.patientDetails)
                && patientAddress.equals(other.patientAddress)
                && labTest.equals(other.labTest)
                && details.equals(other.details)
                && sampleId.equals(other.sampleId)
                && notes.equals(other.notes)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && events.equals(other.events)
                && status.equals(other.status)
                && physician.equals(other.physician)
                && healthInsuranceId.equals(other.healthInsuranceId)
                && requisitionFormUrl.equals(other.requisitionFormUrl)
                && priority.equals(other.priority)
                && shippingDetails.equals(other.shippingDetails)
                && activateBy.equals(other.activateBy)
                && passthrough.equals(other.passthrough)
                && billingType.equals(other.billingType)
                && icdCodes.equals(other.icdCodes)
                && hasAbn == other.hasAbn
                && interpretation.equals(other.interpretation)
                && expectedResultByDate.equals(other.expectedResultByDate)
                && worstCaseResultByDate.equals(other.worstCaseResultByDate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.userId,
                this.id,
                this.teamId,
                this.patientDetails,
                this.patientAddress,
                this.labTest,
                this.details,
                this.sampleId,
                this.notes,
                this.createdAt,
                this.updatedAt,
                this.events,
                this.status,
                this.physician,
                this.healthInsuranceId,
                this.requisitionFormUrl,
                this.priority,
                this.shippingDetails,
                this.activateBy,
                this.passthrough,
                this.billingType,
                this.icdCodes,
                this.hasAbn,
                this.interpretation,
                this.expectedResultByDate,
                this.worstCaseResultByDate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        IdStage userId(String userId);

        Builder from(ClientFacingOrder other);
    }

    public interface IdStage {
        TeamIdStage id(String id);
    }

    public interface TeamIdStage {
        LabTestStage teamId(String teamId);
    }

    public interface LabTestStage {
        DetailsStage labTest(ClientFacingLabTest labTest);
    }

    public interface DetailsStage {
        CreatedAtStage details(ClientFacingOrderDetails details);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        HasAbnStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface HasAbnStage {
        _FinalStage hasAbn(boolean hasAbn);
    }

    public interface _FinalStage {
        ClientFacingOrder build();

        _FinalStage patientDetails(Optional<ClientFacingPatientDetailsCompatible> patientDetails);

        _FinalStage patientDetails(ClientFacingPatientDetailsCompatible patientDetails);

        _FinalStage patientAddress(Optional<PatientAddressCompatible> patientAddress);

        _FinalStage patientAddress(PatientAddressCompatible patientAddress);

        _FinalStage sampleId(Optional<String> sampleId);

        _FinalStage sampleId(String sampleId);

        _FinalStage notes(Optional<String> notes);

        _FinalStage notes(String notes);

        _FinalStage events(List<ClientFacingOrderEvent> events);

        _FinalStage addEvents(ClientFacingOrderEvent events);

        _FinalStage addAllEvents(List<ClientFacingOrderEvent> events);

        _FinalStage status(Optional<OrderTopLevelStatus> status);

        _FinalStage status(OrderTopLevelStatus status);

        _FinalStage physician(Optional<ClientFacingPhysician> physician);

        _FinalStage physician(ClientFacingPhysician physician);

        _FinalStage healthInsuranceId(Optional<String> healthInsuranceId);

        _FinalStage healthInsuranceId(String healthInsuranceId);

        _FinalStage requisitionFormUrl(Optional<String> requisitionFormUrl);

        _FinalStage requisitionFormUrl(String requisitionFormUrl);

        _FinalStage priority(Optional<Boolean> priority);

        _FinalStage priority(Boolean priority);

        _FinalStage shippingDetails(Optional<ShippingAddress> shippingDetails);

        _FinalStage shippingDetails(ShippingAddress shippingDetails);

        _FinalStage activateBy(Optional<String> activateBy);

        _FinalStage activateBy(String activateBy);

        _FinalStage passthrough(Optional<String> passthrough);

        _FinalStage passthrough(String passthrough);

        _FinalStage billingType(Optional<Billing> billingType);

        _FinalStage billingType(Billing billingType);

        _FinalStage icdCodes(Optional<List<String>> icdCodes);

        _FinalStage icdCodes(List<String> icdCodes);

        _FinalStage interpretation(Optional<Interpretation> interpretation);

        _FinalStage interpretation(Interpretation interpretation);

        _FinalStage expectedResultByDate(Optional<String> expectedResultByDate);

        _FinalStage expectedResultByDate(String expectedResultByDate);

        _FinalStage worstCaseResultByDate(Optional<String> worstCaseResultByDate);

        _FinalStage worstCaseResultByDate(String worstCaseResultByDate);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements UserIdStage,
                    IdStage,
                    TeamIdStage,
                    LabTestStage,
                    DetailsStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    HasAbnStage,
                    _FinalStage {
        private String userId;

        private String id;

        private String teamId;

        private ClientFacingLabTest labTest;

        private ClientFacingOrderDetails details;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private boolean hasAbn;

        private Optional<String> worstCaseResultByDate = Optional.empty();

        private Optional<String> expectedResultByDate = Optional.empty();

        private Optional<Interpretation> interpretation = Optional.empty();

        private Optional<List<String>> icdCodes = Optional.empty();

        private Optional<Billing> billingType = Optional.empty();

        private Optional<String> passthrough = Optional.empty();

        private Optional<String> activateBy = Optional.empty();

        private Optional<ShippingAddress> shippingDetails = Optional.empty();

        private Optional<Boolean> priority = Optional.empty();

        private Optional<String> requisitionFormUrl = Optional.empty();

        private Optional<String> healthInsuranceId = Optional.empty();

        private Optional<ClientFacingPhysician> physician = Optional.empty();

        private Optional<OrderTopLevelStatus> status = Optional.empty();

        private List<ClientFacingOrderEvent> events = new ArrayList<>();

        private Optional<String> notes = Optional.empty();

        private Optional<String> sampleId = Optional.empty();

        private Optional<PatientAddressCompatible> patientAddress = Optional.empty();

        private Optional<ClientFacingPatientDetailsCompatible> patientDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingOrder other) {
            userId(other.getUserId());
            id(other.getId());
            teamId(other.getTeamId());
            patientDetails(other.getPatientDetails());
            patientAddress(other.getPatientAddress());
            labTest(other.getLabTest());
            details(other.getDetails());
            sampleId(other.getSampleId());
            notes(other.getNotes());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            events(other.getEvents());
            status(other.getStatus());
            physician(other.getPhysician());
            healthInsuranceId(other.getHealthInsuranceId());
            requisitionFormUrl(other.getRequisitionFormUrl());
            priority(other.getPriority());
            shippingDetails(other.getShippingDetails());
            activateBy(other.getActivateBy());
            passthrough(other.getPassthrough());
            billingType(other.getBillingType());
            icdCodes(other.getIcdCodes());
            hasAbn(other.getHasAbn());
            interpretation(other.getInterpretation());
            expectedResultByDate(other.getExpectedResultByDate());
            worstCaseResultByDate(other.getWorstCaseResultByDate());
            return this;
        }

        /**
         * <p>User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("user_id")
        public IdStage userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * <p>The Vital Order ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public TeamIdStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * <p>Your team id.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("team_id")
        public LabTestStage teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }

        /**
         * <p>The Vital Test associated with the order</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("lab_test")
        public DetailsStage labTest(ClientFacingLabTest labTest) {
            this.labTest = labTest;
            return this;
        }

        @java.lang.Override
        @JsonSetter("details")
        public CreatedAtStage details(ClientFacingOrderDetails details) {
            this.details = details;
            return this;
        }

        /**
         * <p>When your order was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("created_at")
        public UpdatedAtStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>When your order was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updated_at")
        public HasAbnStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>Defines whether the order has an Advanced Beneficiary Notice (ABN) form or not.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("has_abn")
        public _FinalStage hasAbn(boolean hasAbn) {
            this.hasAbn = hasAbn;
            return this;
        }

        /**
         * <p>The latest date by which the order result is expected to be available.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage worstCaseResultByDate(String worstCaseResultByDate) {
            this.worstCaseResultByDate = Optional.of(worstCaseResultByDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "worst_case_result_by_date", nulls = Nulls.SKIP)
        public _FinalStage worstCaseResultByDate(Optional<String> worstCaseResultByDate) {
            this.worstCaseResultByDate = worstCaseResultByDate;
            return this;
        }

        /**
         * <p>The common-case date by which the order result is expected to be available.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage expectedResultByDate(String expectedResultByDate) {
            this.expectedResultByDate = Optional.of(expectedResultByDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "expected_result_by_date", nulls = Nulls.SKIP)
        public _FinalStage expectedResultByDate(Optional<String> expectedResultByDate) {
            this.expectedResultByDate = expectedResultByDate;
            return this;
        }

        /**
         * <p>Interpretation of the order result. Can be one of (normal, abnormal, critical).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage interpretation(Interpretation interpretation) {
            this.interpretation = Optional.of(interpretation);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "interpretation", nulls = Nulls.SKIP)
        public _FinalStage interpretation(Optional<Interpretation> interpretation) {
            this.interpretation = interpretation;
            return this;
        }

        @java.lang.Override
        public _FinalStage icdCodes(List<String> icdCodes) {
            this.icdCodes = Optional.of(icdCodes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "icd_codes", nulls = Nulls.SKIP)
        public _FinalStage icdCodes(Optional<List<String>> icdCodes) {
            this.icdCodes = icdCodes;
            return this;
        }

        @java.lang.Override
        public _FinalStage billingType(Billing billingType) {
            this.billingType = Optional.of(billingType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "billing_type", nulls = Nulls.SKIP)
        public _FinalStage billingType(Optional<Billing> billingType) {
            this.billingType = billingType;
            return this;
        }

        @java.lang.Override
        public _FinalStage passthrough(String passthrough) {
            this.passthrough = Optional.of(passthrough);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "passthrough", nulls = Nulls.SKIP)
        public _FinalStage passthrough(Optional<String> passthrough) {
            this.passthrough = passthrough;
            return this;
        }

        /**
         * <p>Schedule an Order to be processed in a future date.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage activateBy(String activateBy) {
            this.activateBy = Optional.of(activateBy);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "activate_by", nulls = Nulls.SKIP)
        public _FinalStage activateBy(Optional<String> activateBy) {
            this.activateBy = activateBy;
            return this;
        }

        /**
         * <p>Shipping Details. For unregistered testkit orders.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage shippingDetails(ShippingAddress shippingDetails) {
            this.shippingDetails = Optional.of(shippingDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "shipping_details", nulls = Nulls.SKIP)
        public _FinalStage shippingDetails(Optional<ShippingAddress> shippingDetails) {
            this.shippingDetails = shippingDetails;
            return this;
        }

        /**
         * <p>Defines whether order is priority or not. For some labs, this refers to a STAT order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage priority(Boolean priority) {
            this.priority = Optional.of(priority);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "priority", nulls = Nulls.SKIP)
        public _FinalStage priority(Optional<Boolean> priority) {
            this.priority = priority;
            return this;
        }

        /**
         * <p>DEPRECATED. Requistion form url.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requisitionFormUrl(String requisitionFormUrl) {
            this.requisitionFormUrl = Optional.of(requisitionFormUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "requisition_form_url", nulls = Nulls.SKIP)
        public _FinalStage requisitionFormUrl(Optional<String> requisitionFormUrl) {
            this.requisitionFormUrl = requisitionFormUrl;
            return this;
        }

        /**
         * <p>Vital ID of the health insurance.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage healthInsuranceId(String healthInsuranceId) {
            this.healthInsuranceId = Optional.of(healthInsuranceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "health_insurance_id", nulls = Nulls.SKIP)
        public _FinalStage healthInsuranceId(Optional<String> healthInsuranceId) {
            this.healthInsuranceId = healthInsuranceId;
            return this;
        }

        @java.lang.Override
        public _FinalStage physician(ClientFacingPhysician physician) {
            this.physician = Optional.of(physician);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "physician", nulls = Nulls.SKIP)
        public _FinalStage physician(Optional<ClientFacingPhysician> physician) {
            this.physician = physician;
            return this;
        }

        @java.lang.Override
        public _FinalStage status(OrderTopLevelStatus status) {
            this.status = Optional.of(status);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<OrderTopLevelStatus> status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllEvents(List<ClientFacingOrderEvent> events) {
            this.events.addAll(events);
            return this;
        }

        @java.lang.Override
        public _FinalStage addEvents(ClientFacingOrderEvent events) {
            this.events.add(events);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "events", nulls = Nulls.SKIP)
        public _FinalStage events(List<ClientFacingOrderEvent> events) {
            this.events.clear();
            this.events.addAll(events);
            return this;
        }

        /**
         * <p>Notes associated with the order</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notes(String notes) {
            this.notes = Optional.of(notes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "notes", nulls = Nulls.SKIP)
        public _FinalStage notes(Optional<String> notes) {
            this.notes = notes;
            return this;
        }

        /**
         * <p>Sample ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sampleId(String sampleId) {
            this.sampleId = Optional.of(sampleId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sample_id", nulls = Nulls.SKIP)
        public _FinalStage sampleId(Optional<String> sampleId) {
            this.sampleId = sampleId;
            return this;
        }

        /**
         * <p>Patient Address</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage patientAddress(PatientAddressCompatible patientAddress) {
            this.patientAddress = Optional.of(patientAddress);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "patient_address", nulls = Nulls.SKIP)
        public _FinalStage patientAddress(Optional<PatientAddressCompatible> patientAddress) {
            this.patientAddress = patientAddress;
            return this;
        }

        /**
         * <p>Patient Details</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage patientDetails(ClientFacingPatientDetailsCompatible patientDetails) {
            this.patientDetails = Optional.of(patientDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "patient_details", nulls = Nulls.SKIP)
        public _FinalStage patientDetails(Optional<ClientFacingPatientDetailsCompatible> patientDetails) {
            this.patientDetails = patientDetails;
            return this;
        }

        @java.lang.Override
        public ClientFacingOrder build() {
            return new ClientFacingOrder(
                    userId,
                    id,
                    teamId,
                    patientDetails,
                    patientAddress,
                    labTest,
                    details,
                    sampleId,
                    notes,
                    createdAt,
                    updatedAt,
                    events,
                    status,
                    physician,
                    healthInsuranceId,
                    requisitionFormUrl,
                    priority,
                    shippingDetails,
                    activateBy,
                    passthrough,
                    billingType,
                    icdCodes,
                    hasAbn,
                    interpretation,
                    expectedResultByDate,
                    worstCaseResultByDate,
                    additionalProperties);
        }
    }
}
