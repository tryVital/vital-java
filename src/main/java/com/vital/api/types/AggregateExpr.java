/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AggregateExpr.Builder.class)
public final class AggregateExpr {
    private final AggregateExprArg arg;

    private final AggregateExprFunc func;

    private final Map<String, Object> additionalProperties;

    private AggregateExpr(AggregateExprArg arg, AggregateExprFunc func, Map<String, Object> additionalProperties) {
        this.arg = arg;
        this.func = func;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("arg")
    public AggregateExprArg getArg() {
        return arg;
    }

    /**
     * @return ℹ️ This enum is non-exhaustive.
     */
    @JsonProperty("func")
    public AggregateExprFunc getFunc() {
        return func;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AggregateExpr && equalTo((AggregateExpr) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AggregateExpr other) {
        return arg.equals(other.arg) && func.equals(other.func);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.arg, this.func);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ArgStage builder() {
        return new Builder();
    }

    public interface ArgStage {
        FuncStage arg(@NotNull AggregateExprArg arg);

        Builder from(AggregateExpr other);
    }

    public interface FuncStage {
        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         */
        _FinalStage func(@NotNull AggregateExprFunc func);
    }

    public interface _FinalStage {
        AggregateExpr build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ArgStage, FuncStage, _FinalStage {
        private AggregateExprArg arg;

        private AggregateExprFunc func;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AggregateExpr other) {
            arg(other.getArg());
            func(other.getFunc());
            return this;
        }

        @java.lang.Override
        @JsonSetter("arg")
        public FuncStage arg(@NotNull AggregateExprArg arg) {
            this.arg = Objects.requireNonNull(arg, "arg must not be null");
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("func")
        public _FinalStage func(@NotNull AggregateExprFunc func) {
            this.func = Objects.requireNonNull(func, "func must not be null");
            return this;
        }

        @java.lang.Override
        public AggregateExpr build() {
            return new AggregateExpr(arg, func, additionalProperties);
        }
    }
}
