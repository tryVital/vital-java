/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LabLocationMetadata.Builder.class)
public final class LabLocationMetadata {
    private final String name;

    private final String state;

    private final String city;

    private final String zipCode;

    private final String firstLine;

    private final Optional<String> secondLine;

    private final Optional<String> phoneNumber;

    private final Optional<String> faxNumber;

    private final Optional<Map<String, Object>> hours;

    private final Map<String, Object> additionalProperties;

    private LabLocationMetadata(
            String name,
            String state,
            String city,
            String zipCode,
            String firstLine,
            Optional<String> secondLine,
            Optional<String> phoneNumber,
            Optional<String> faxNumber,
            Optional<Map<String, Object>> hours,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.state = state;
        this.city = city;
        this.zipCode = zipCode;
        this.firstLine = firstLine;
        this.secondLine = secondLine;
        this.phoneNumber = phoneNumber;
        this.faxNumber = faxNumber;
        this.hours = hours;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("state")
    public String getState() {
        return state;
    }

    @JsonProperty("city")
    public String getCity() {
        return city;
    }

    @JsonProperty("zip_code")
    public String getZipCode() {
        return zipCode;
    }

    @JsonProperty("first_line")
    public String getFirstLine() {
        return firstLine;
    }

    @JsonProperty("second_line")
    public Optional<String> getSecondLine() {
        return secondLine;
    }

    @JsonProperty("phone_number")
    public Optional<String> getPhoneNumber() {
        return phoneNumber;
    }

    @JsonProperty("fax_number")
    public Optional<String> getFaxNumber() {
        return faxNumber;
    }

    @JsonProperty("hours")
    public Optional<Map<String, Object>> getHours() {
        return hours;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabLocationMetadata && equalTo((LabLocationMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabLocationMetadata other) {
        return name.equals(other.name)
                && state.equals(other.state)
                && city.equals(other.city)
                && zipCode.equals(other.zipCode)
                && firstLine.equals(other.firstLine)
                && secondLine.equals(other.secondLine)
                && phoneNumber.equals(other.phoneNumber)
                && faxNumber.equals(other.faxNumber)
                && hours.equals(other.hours);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.state,
                this.city,
                this.zipCode,
                this.firstLine,
                this.secondLine,
                this.phoneNumber,
                this.faxNumber,
                this.hours);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        StateStage name(@NotNull String name);

        Builder from(LabLocationMetadata other);
    }

    public interface StateStage {
        CityStage state(@NotNull String state);
    }

    public interface CityStage {
        ZipCodeStage city(@NotNull String city);
    }

    public interface ZipCodeStage {
        FirstLineStage zipCode(@NotNull String zipCode);
    }

    public interface FirstLineStage {
        _FinalStage firstLine(@NotNull String firstLine);
    }

    public interface _FinalStage {
        LabLocationMetadata build();

        _FinalStage secondLine(Optional<String> secondLine);

        _FinalStage secondLine(String secondLine);

        _FinalStage phoneNumber(Optional<String> phoneNumber);

        _FinalStage phoneNumber(String phoneNumber);

        _FinalStage faxNumber(Optional<String> faxNumber);

        _FinalStage faxNumber(String faxNumber);

        _FinalStage hours(Optional<Map<String, Object>> hours);

        _FinalStage hours(Map<String, Object> hours);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements NameStage, StateStage, CityStage, ZipCodeStage, FirstLineStage, _FinalStage {
        private String name;

        private String state;

        private String city;

        private String zipCode;

        private String firstLine;

        private Optional<Map<String, Object>> hours = Optional.empty();

        private Optional<String> faxNumber = Optional.empty();

        private Optional<String> phoneNumber = Optional.empty();

        private Optional<String> secondLine = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LabLocationMetadata other) {
            name(other.getName());
            state(other.getState());
            city(other.getCity());
            zipCode(other.getZipCode());
            firstLine(other.getFirstLine());
            secondLine(other.getSecondLine());
            phoneNumber(other.getPhoneNumber());
            faxNumber(other.getFaxNumber());
            hours(other.getHours());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public StateStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("state")
        public CityStage state(@NotNull String state) {
            this.state = Objects.requireNonNull(state, "state must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("city")
        public ZipCodeStage city(@NotNull String city) {
            this.city = Objects.requireNonNull(city, "city must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("zip_code")
        public FirstLineStage zipCode(@NotNull String zipCode) {
            this.zipCode = Objects.requireNonNull(zipCode, "zipCode must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("first_line")
        public _FinalStage firstLine(@NotNull String firstLine) {
            this.firstLine = Objects.requireNonNull(firstLine, "firstLine must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage hours(Map<String, Object> hours) {
            this.hours = Optional.ofNullable(hours);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "hours", nulls = Nulls.SKIP)
        public _FinalStage hours(Optional<Map<String, Object>> hours) {
            this.hours = hours;
            return this;
        }

        @java.lang.Override
        public _FinalStage faxNumber(String faxNumber) {
            this.faxNumber = Optional.ofNullable(faxNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fax_number", nulls = Nulls.SKIP)
        public _FinalStage faxNumber(Optional<String> faxNumber) {
            this.faxNumber = faxNumber;
            return this;
        }

        @java.lang.Override
        public _FinalStage phoneNumber(String phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public _FinalStage phoneNumber(Optional<String> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        @java.lang.Override
        public _FinalStage secondLine(String secondLine) {
            this.secondLine = Optional.ofNullable(secondLine);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "second_line", nulls = Nulls.SKIP)
        public _FinalStage secondLine(Optional<String> secondLine) {
            this.secondLine = secondLine;
            return this;
        }

        @java.lang.Override
        public LabLocationMetadata build() {
            return new LabLocationMetadata(
                    name,
                    state,
                    city,
                    zipCode,
                    firstLine,
                    secondLine,
                    phoneNumber,
                    faxNumber,
                    hours,
                    additionalProperties);
        }
    }
}
