/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SampleData.Builder.class)
public final class SampleData {
    private final Optional<String> sampleId;

    private final Optional<String> controlNumber;

    private final Optional<SampleDataDateCollected> dateCollected;

    private final Optional<SampleDataDateReceived> dateReceived;

    private final Optional<SampleDataDateReported> dateReported;

    private final Optional<Map<String, Optional<PerformingLaboratory>>> performingLaboratories;

    private final Optional<ClinicalInformation> clinicalInformation;

    private final Map<String, Object> additionalProperties;

    private SampleData(
            Optional<String> sampleId,
            Optional<String> controlNumber,
            Optional<SampleDataDateCollected> dateCollected,
            Optional<SampleDataDateReceived> dateReceived,
            Optional<SampleDataDateReported> dateReported,
            Optional<Map<String, Optional<PerformingLaboratory>>> performingLaboratories,
            Optional<ClinicalInformation> clinicalInformation,
            Map<String, Object> additionalProperties) {
        this.sampleId = sampleId;
        this.controlNumber = controlNumber;
        this.dateCollected = dateCollected;
        this.dateReceived = dateReceived;
        this.dateReported = dateReported;
        this.performingLaboratories = performingLaboratories;
        this.clinicalInformation = clinicalInformation;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("sample_id")
    public Optional<String> getSampleId() {
        return sampleId;
    }

    @JsonProperty("control_number")
    public Optional<String> getControlNumber() {
        return controlNumber;
    }

    @JsonProperty("date_collected")
    public Optional<SampleDataDateCollected> getDateCollected() {
        return dateCollected;
    }

    @JsonProperty("date_received")
    public Optional<SampleDataDateReceived> getDateReceived() {
        return dateReceived;
    }

    @JsonProperty("date_reported")
    public Optional<SampleDataDateReported> getDateReported() {
        return dateReported;
    }

    @JsonProperty("performing_laboratories")
    public Optional<Map<String, Optional<PerformingLaboratory>>> getPerformingLaboratories() {
        return performingLaboratories;
    }

    @JsonProperty("clinical_information")
    public Optional<ClinicalInformation> getClinicalInformation() {
        return clinicalInformation;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SampleData && equalTo((SampleData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SampleData other) {
        return sampleId.equals(other.sampleId)
                && controlNumber.equals(other.controlNumber)
                && dateCollected.equals(other.dateCollected)
                && dateReceived.equals(other.dateReceived)
                && dateReported.equals(other.dateReported)
                && performingLaboratories.equals(other.performingLaboratories)
                && clinicalInformation.equals(other.clinicalInformation);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.sampleId,
                this.controlNumber,
                this.dateCollected,
                this.dateReceived,
                this.dateReported,
                this.performingLaboratories,
                this.clinicalInformation);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> sampleId = Optional.empty();

        private Optional<String> controlNumber = Optional.empty();

        private Optional<SampleDataDateCollected> dateCollected = Optional.empty();

        private Optional<SampleDataDateReceived> dateReceived = Optional.empty();

        private Optional<SampleDataDateReported> dateReported = Optional.empty();

        private Optional<Map<String, Optional<PerformingLaboratory>>> performingLaboratories = Optional.empty();

        private Optional<ClinicalInformation> clinicalInformation = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SampleData other) {
            sampleId(other.getSampleId());
            controlNumber(other.getControlNumber());
            dateCollected(other.getDateCollected());
            dateReceived(other.getDateReceived());
            dateReported(other.getDateReported());
            performingLaboratories(other.getPerformingLaboratories());
            clinicalInformation(other.getClinicalInformation());
            return this;
        }

        @JsonSetter(value = "sample_id", nulls = Nulls.SKIP)
        public Builder sampleId(Optional<String> sampleId) {
            this.sampleId = sampleId;
            return this;
        }

        public Builder sampleId(String sampleId) {
            this.sampleId = Optional.ofNullable(sampleId);
            return this;
        }

        @JsonSetter(value = "control_number", nulls = Nulls.SKIP)
        public Builder controlNumber(Optional<String> controlNumber) {
            this.controlNumber = controlNumber;
            return this;
        }

        public Builder controlNumber(String controlNumber) {
            this.controlNumber = Optional.ofNullable(controlNumber);
            return this;
        }

        @JsonSetter(value = "date_collected", nulls = Nulls.SKIP)
        public Builder dateCollected(Optional<SampleDataDateCollected> dateCollected) {
            this.dateCollected = dateCollected;
            return this;
        }

        public Builder dateCollected(SampleDataDateCollected dateCollected) {
            this.dateCollected = Optional.ofNullable(dateCollected);
            return this;
        }

        @JsonSetter(value = "date_received", nulls = Nulls.SKIP)
        public Builder dateReceived(Optional<SampleDataDateReceived> dateReceived) {
            this.dateReceived = dateReceived;
            return this;
        }

        public Builder dateReceived(SampleDataDateReceived dateReceived) {
            this.dateReceived = Optional.ofNullable(dateReceived);
            return this;
        }

        @JsonSetter(value = "date_reported", nulls = Nulls.SKIP)
        public Builder dateReported(Optional<SampleDataDateReported> dateReported) {
            this.dateReported = dateReported;
            return this;
        }

        public Builder dateReported(SampleDataDateReported dateReported) {
            this.dateReported = Optional.ofNullable(dateReported);
            return this;
        }

        @JsonSetter(value = "performing_laboratories", nulls = Nulls.SKIP)
        public Builder performingLaboratories(
                Optional<Map<String, Optional<PerformingLaboratory>>> performingLaboratories) {
            this.performingLaboratories = performingLaboratories;
            return this;
        }

        public Builder performingLaboratories(Map<String, Optional<PerformingLaboratory>> performingLaboratories) {
            this.performingLaboratories = Optional.ofNullable(performingLaboratories);
            return this;
        }

        @JsonSetter(value = "clinical_information", nulls = Nulls.SKIP)
        public Builder clinicalInformation(Optional<ClinicalInformation> clinicalInformation) {
            this.clinicalInformation = clinicalInformation;
            return this;
        }

        public Builder clinicalInformation(ClinicalInformation clinicalInformation) {
            this.clinicalInformation = Optional.ofNullable(clinicalInformation);
            return this;
        }

        public SampleData build() {
            return new SampleData(
                    sampleId,
                    controlNumber,
                    dateCollected,
                    dateReceived,
                    dateReported,
                    performingLaboratories,
                    clinicalInformation,
                    additionalProperties);
        }
    }
}
