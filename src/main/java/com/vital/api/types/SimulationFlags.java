/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SimulationFlags.Builder.class)
public final class SimulationFlags {
    private final Optional<Interpretation> interpretation;

    private final Optional<List<ResultType>> resultTypes;

    private final Map<String, Object> additionalProperties;

    private SimulationFlags(
            Optional<Interpretation> interpretation,
            Optional<List<ResultType>> resultTypes,
            Map<String, Object> additionalProperties) {
        this.interpretation = interpretation;
        this.resultTypes = resultTypes;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("interpretation")
    public Optional<Interpretation> getInterpretation() {
        return interpretation;
    }

    @JsonProperty("result_types")
    public Optional<List<ResultType>> getResultTypes() {
        return resultTypes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SimulationFlags && equalTo((SimulationFlags) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SimulationFlags other) {
        return interpretation.equals(other.interpretation) && resultTypes.equals(other.resultTypes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.interpretation, this.resultTypes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Interpretation> interpretation = Optional.empty();

        private Optional<List<ResultType>> resultTypes = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SimulationFlags other) {
            interpretation(other.getInterpretation());
            resultTypes(other.getResultTypes());
            return this;
        }

        @JsonSetter(value = "interpretation", nulls = Nulls.SKIP)
        public Builder interpretation(Optional<Interpretation> interpretation) {
            this.interpretation = interpretation;
            return this;
        }

        public Builder interpretation(Interpretation interpretation) {
            this.interpretation = Optional.of(interpretation);
            return this;
        }

        @JsonSetter(value = "result_types", nulls = Nulls.SKIP)
        public Builder resultTypes(Optional<List<ResultType>> resultTypes) {
            this.resultTypes = resultTypes;
            return this;
        }

        public Builder resultTypes(List<ResultType> resultTypes) {
            this.resultTypes = Optional.of(resultTypes);
            return this;
        }

        public SimulationFlags build() {
            return new SimulationFlags(interpretation, resultTypes, additionalProperties);
        }
    }
}
