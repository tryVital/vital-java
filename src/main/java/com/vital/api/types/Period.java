/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Period.Builder.class)
public final class Period {
    private final Optional<Integer> value;

    private final PeriodUnit unit;

    private final Map<String, Object> additionalProperties;

    private Period(Optional<Integer> value, PeriodUnit unit, Map<String, Object> additionalProperties) {
        this.value = value;
        this.unit = unit;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("value")
    public Optional<Integer> getValue() {
        return value;
    }

    @JsonProperty("unit")
    public PeriodUnit getUnit() {
        return unit;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Period && equalTo((Period) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Period other) {
        return value.equals(other.value) && unit.equals(other.unit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.value, this.unit);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UnitStage builder() {
        return new Builder();
    }

    public interface UnitStage {
        _FinalStage unit(PeriodUnit unit);

        Builder from(Period other);
    }

    public interface _FinalStage {
        Period build();

        _FinalStage value(Optional<Integer> value);

        _FinalStage value(Integer value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UnitStage, _FinalStage {
        private PeriodUnit unit;

        private Optional<Integer> value = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(Period other) {
            value(other.getValue());
            unit(other.getUnit());
            return this;
        }

        @Override
        @JsonSetter("unit")
        public _FinalStage unit(PeriodUnit unit) {
            this.unit = unit;
            return this;
        }

        @Override
        public _FinalStage value(Integer value) {
            this.value = Optional.of(value);
            return this;
        }

        @Override
        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public _FinalStage value(Optional<Integer> value) {
            this.value = value;
            return this;
        }

        @Override
        public Period build() {
            return new Period(value, unit, additionalProperties);
        }
    }
}
