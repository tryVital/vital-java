/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ValueRange.Builder.class)
public final class ValueRange {
    private final ValueQuantity low;

    private final ValueQuantity high;

    private final Map<String, Object> additionalProperties;

    private ValueRange(ValueQuantity low, ValueQuantity high, Map<String, Object> additionalProperties) {
        this.low = low;
        this.high = high;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("low")
    public ValueQuantity getLow() {
        return low;
    }

    @JsonProperty("high")
    public ValueQuantity getHigh() {
        return high;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ValueRange && equalTo((ValueRange) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ValueRange other) {
        return low.equals(other.low) && high.equals(other.high);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.low, this.high);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LowStage builder() {
        return new Builder();
    }

    public interface LowStage {
        HighStage low(ValueQuantity low);

        Builder from(ValueRange other);
    }

    public interface HighStage {
        _FinalStage high(ValueQuantity high);
    }

    public interface _FinalStage {
        ValueRange build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LowStage, HighStage, _FinalStage {
        private ValueQuantity low;

        private ValueQuantity high;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(ValueRange other) {
            low(other.getLow());
            high(other.getHigh());
            return this;
        }

        @Override
        @JsonSetter("low")
        public HighStage low(ValueQuantity low) {
            this.low = low;
            return this;
        }

        @Override
        @JsonSetter("high")
        public _FinalStage high(ValueQuantity high) {
            this.high = high;
            return this;
        }

        @Override
        public ValueRange build() {
            return new ValueRange(low, high, additionalProperties);
        }
    }
}
