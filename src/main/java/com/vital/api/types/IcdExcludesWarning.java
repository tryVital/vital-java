/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = IcdExcludesWarning.Builder.class)
public final class IcdExcludesWarning {
    private final String code;

    private final String overlapsWith;

    private final String type;

    private final Map<String, Object> additionalProperties;

    private IcdExcludesWarning(
            String code, String overlapsWith, String type, Map<String, Object> additionalProperties) {
        this.code = code;
        this.overlapsWith = overlapsWith;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("code")
    public String getCode() {
        return code;
    }

    @JsonProperty("overlaps_with")
    public String getOverlapsWith() {
        return overlapsWith;
    }

    @JsonProperty("type")
    public String getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IcdExcludesWarning && equalTo((IcdExcludesWarning) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IcdExcludesWarning other) {
        return code.equals(other.code) && overlapsWith.equals(other.overlapsWith) && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.code, this.overlapsWith, this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CodeStage builder() {
        return new Builder();
    }

    public interface CodeStage {
        OverlapsWithStage code(@NotNull String code);

        Builder from(IcdExcludesWarning other);
    }

    public interface OverlapsWithStage {
        TypeStage overlapsWith(@NotNull String overlapsWith);
    }

    public interface TypeStage {
        _FinalStage type(@NotNull String type);
    }

    public interface _FinalStage {
        IcdExcludesWarning build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CodeStage, OverlapsWithStage, TypeStage, _FinalStage {
        private String code;

        private String overlapsWith;

        private String type;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(IcdExcludesWarning other) {
            code(other.getCode());
            overlapsWith(other.getOverlapsWith());
            type(other.getType());
            return this;
        }

        @java.lang.Override
        @JsonSetter("code")
        public OverlapsWithStage code(@NotNull String code) {
            this.code = Objects.requireNonNull(code, "code must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("overlaps_with")
        public TypeStage overlapsWith(@NotNull String overlapsWith) {
            this.overlapsWith = Objects.requireNonNull(overlapsWith, "overlapsWith must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        public IcdExcludesWarning build() {
            return new IcdExcludesWarning(code, overlapsWith, type, additionalProperties);
        }
    }
}
