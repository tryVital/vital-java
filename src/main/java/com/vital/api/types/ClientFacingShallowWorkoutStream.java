/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingShallowWorkoutStream.Builder.class)
public final class ClientFacingShallowWorkoutStream {
    private final String userId;

    private final String workoutId;

    private final String providerId;

    private final Optional<String> message;

    private final ClientFacingSource source;

    private final Optional<ClientFacingSport> sport;

    private final Map<String, Object> additionalProperties;

    private ClientFacingShallowWorkoutStream(
            String userId,
            String workoutId,
            String providerId,
            Optional<String> message,
            ClientFacingSource source,
            Optional<ClientFacingSport> sport,
            Map<String, Object> additionalProperties) {
        this.userId = userId;
        this.workoutId = workoutId;
        this.providerId = providerId;
        this.message = message;
        this.source = source;
        this.sport = sport;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.
     */
    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("workout_id")
    public String getWorkoutId() {
        return workoutId;
    }

    @JsonProperty("provider_id")
    public String getProviderId() {
        return providerId;
    }

    @JsonProperty("message")
    public Optional<String> getMessage() {
        return message;
    }

    /**
     * @return Source the data has come from.
     */
    @JsonProperty("source")
    public ClientFacingSource getSource() {
        return source;
    }

    /**
     * @return Sport's name
     */
    @JsonProperty("sport")
    public Optional<ClientFacingSport> getSport() {
        return sport;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingShallowWorkoutStream && equalTo((ClientFacingShallowWorkoutStream) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingShallowWorkoutStream other) {
        return userId.equals(other.userId)
                && workoutId.equals(other.workoutId)
                && providerId.equals(other.providerId)
                && message.equals(other.message)
                && source.equals(other.source)
                && sport.equals(other.sport);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.userId, this.workoutId, this.providerId, this.message, this.source, this.sport);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        WorkoutIdStage userId(String userId);

        Builder from(ClientFacingShallowWorkoutStream other);
    }

    public interface WorkoutIdStage {
        ProviderIdStage workoutId(String workoutId);
    }

    public interface ProviderIdStage {
        SourceStage providerId(String providerId);
    }

    public interface SourceStage {
        _FinalStage source(ClientFacingSource source);
    }

    public interface _FinalStage {
        ClientFacingShallowWorkoutStream build();

        _FinalStage message(Optional<String> message);

        _FinalStage message(String message);

        _FinalStage sport(Optional<ClientFacingSport> sport);

        _FinalStage sport(ClientFacingSport sport);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements UserIdStage, WorkoutIdStage, ProviderIdStage, SourceStage, _FinalStage {
        private String userId;

        private String workoutId;

        private String providerId;

        private ClientFacingSource source;

        private Optional<ClientFacingSport> sport = Optional.empty();

        private Optional<String> message = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingShallowWorkoutStream other) {
            userId(other.getUserId());
            workoutId(other.getWorkoutId());
            providerId(other.getProviderId());
            message(other.getMessage());
            source(other.getSource());
            sport(other.getSport());
            return this;
        }

        /**
         * <p>User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("user_id")
        public WorkoutIdStage userId(String userId) {
            this.userId = userId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("workout_id")
        public ProviderIdStage workoutId(String workoutId) {
            this.workoutId = workoutId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("provider_id")
        public SourceStage providerId(String providerId) {
            this.providerId = providerId;
            return this;
        }

        /**
         * <p>Source the data has come from.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("source")
        public _FinalStage source(ClientFacingSource source) {
            this.source = source;
            return this;
        }

        /**
         * <p>Sport's name</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sport(ClientFacingSport sport) {
            this.sport = Optional.of(sport);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sport", nulls = Nulls.SKIP)
        public _FinalStage sport(Optional<ClientFacingSport> sport) {
            this.sport = sport;
            return this;
        }

        @java.lang.Override
        public _FinalStage message(String message) {
            this.message = Optional.of(message);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "message", nulls = Nulls.SKIP)
        public _FinalStage message(Optional<String> message) {
            this.message = message;
            return this;
        }

        @java.lang.Override
        public ClientFacingShallowWorkoutStream build() {
            return new ClientFacingShallowWorkoutStream(
                    userId, workoutId, providerId, message, source, sport, additionalProperties);
        }
    }
}
