/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = OrderSetRequest.Builder.class)
public final class OrderSetRequest {
    private final Optional<List<String>> labTestIds;

    private final Optional<AddOnOrder> addOn;

    private final Map<String, Object> additionalProperties;

    private OrderSetRequest(
            Optional<List<String>> labTestIds, Optional<AddOnOrder> addOn, Map<String, Object> additionalProperties) {
        this.labTestIds = labTestIds;
        this.addOn = addOn;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("lab_test_ids")
    public Optional<List<String>> getLabTestIds() {
        return labTestIds;
    }

    @JsonProperty("add_on")
    public Optional<AddOnOrder> getAddOn() {
        return addOn;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderSetRequest && equalTo((OrderSetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderSetRequest other) {
        return labTestIds.equals(other.labTestIds) && addOn.equals(other.addOn);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.labTestIds, this.addOn);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> labTestIds = Optional.empty();

        private Optional<AddOnOrder> addOn = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderSetRequest other) {
            labTestIds(other.getLabTestIds());
            addOn(other.getAddOn());
            return this;
        }

        @JsonSetter(value = "lab_test_ids", nulls = Nulls.SKIP)
        public Builder labTestIds(Optional<List<String>> labTestIds) {
            this.labTestIds = labTestIds;
            return this;
        }

        public Builder labTestIds(List<String> labTestIds) {
            this.labTestIds = Optional.of(labTestIds);
            return this;
        }

        @JsonSetter(value = "add_on", nulls = Nulls.SKIP)
        public Builder addOn(Optional<AddOnOrder> addOn) {
            this.addOn = addOn;
            return this;
        }

        public Builder addOn(AddOnOrder addOn) {
            this.addOn = Optional.of(addOn);
            return this;
        }

        public OrderSetRequest build() {
            return new OrderSetRequest(labTestIds, addOn, additionalProperties);
        }
    }
}
