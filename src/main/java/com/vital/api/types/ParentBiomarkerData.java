/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParentBiomarkerData.Builder.class)
public final class ParentBiomarkerData {
    private final int markerId;

    private final String name;

    private final String slug;

    private final Optional<String> providerId;

    private final Map<String, Object> additionalProperties;

    private ParentBiomarkerData(
            int markerId,
            String name,
            String slug,
            Optional<String> providerId,
            Map<String, Object> additionalProperties) {
        this.markerId = markerId;
        this.name = name;
        this.slug = slug;
        this.providerId = providerId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("marker_id")
    public int getMarkerId() {
        return markerId;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("slug")
    public String getSlug() {
        return slug;
    }

    @JsonProperty("provider_id")
    public Optional<String> getProviderId() {
        return providerId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParentBiomarkerData && equalTo((ParentBiomarkerData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParentBiomarkerData other) {
        return markerId == other.markerId
                && name.equals(other.name)
                && slug.equals(other.slug)
                && providerId.equals(other.providerId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.markerId, this.name, this.slug, this.providerId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MarkerIdStage builder() {
        return new Builder();
    }

    public interface MarkerIdStage {
        NameStage markerId(int markerId);

        Builder from(ParentBiomarkerData other);
    }

    public interface NameStage {
        SlugStage name(@NotNull String name);
    }

    public interface SlugStage {
        _FinalStage slug(@NotNull String slug);
    }

    public interface _FinalStage {
        ParentBiomarkerData build();

        _FinalStage providerId(Optional<String> providerId);

        _FinalStage providerId(String providerId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MarkerIdStage, NameStage, SlugStage, _FinalStage {
        private int markerId;

        private String name;

        private String slug;

        private Optional<String> providerId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ParentBiomarkerData other) {
            markerId(other.getMarkerId());
            name(other.getName());
            slug(other.getSlug());
            providerId(other.getProviderId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("marker_id")
        public NameStage markerId(int markerId) {
            this.markerId = markerId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public SlugStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("slug")
        public _FinalStage slug(@NotNull String slug) {
            this.slug = Objects.requireNonNull(slug, "slug must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage providerId(String providerId) {
            this.providerId = Optional.ofNullable(providerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "provider_id", nulls = Nulls.SKIP)
        public _FinalStage providerId(Optional<String> providerId) {
            this.providerId = providerId;
            return this;
        }

        @java.lang.Override
        public ParentBiomarkerData build() {
            return new ParentBiomarkerData(markerId, name, slug, providerId, additionalProperties);
        }
    }
}
