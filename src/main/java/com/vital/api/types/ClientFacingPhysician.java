/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingPhysician.Builder.class)
public final class ClientFacingPhysician {
    private final String firstName;

    private final String lastName;

    private final String npi;

    private final Map<String, Object> additionalProperties;

    private ClientFacingPhysician(
            String firstName, String lastName, String npi, Map<String, Object> additionalProperties) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.npi = npi;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("first_name")
    public String getFirstName() {
        return firstName;
    }

    @JsonProperty("last_name")
    public String getLastName() {
        return lastName;
    }

    @JsonProperty("npi")
    public String getNpi() {
        return npi;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingPhysician && equalTo((ClientFacingPhysician) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingPhysician other) {
        return firstName.equals(other.firstName) && lastName.equals(other.lastName) && npi.equals(other.npi);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.firstName, this.lastName, this.npi);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FirstNameStage builder() {
        return new Builder();
    }

    public interface FirstNameStage {
        LastNameStage firstName(String firstName);

        Builder from(ClientFacingPhysician other);
    }

    public interface LastNameStage {
        NpiStage lastName(String lastName);
    }

    public interface NpiStage {
        _FinalStage npi(String npi);
    }

    public interface _FinalStage {
        ClientFacingPhysician build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FirstNameStage, LastNameStage, NpiStage, _FinalStage {
        private String firstName;

        private String lastName;

        private String npi;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingPhysician other) {
            firstName(other.getFirstName());
            lastName(other.getLastName());
            npi(other.getNpi());
            return this;
        }

        @java.lang.Override
        @JsonSetter("first_name")
        public LastNameStage firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }

        @java.lang.Override
        @JsonSetter("last_name")
        public NpiStage lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }

        @java.lang.Override
        @JsonSetter("npi")
        public _FinalStage npi(String npi) {
            this.npi = npi;
            return this;
        }

        @java.lang.Override
        public ClientFacingPhysician build() {
            return new ClientFacingPhysician(firstName, lastName, npi, additionalProperties);
        }
    }
}
