/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ProviderConnectionError.Builder.class)
public final class ProviderConnectionError {
    private final String provider;

    private final String userId;

    private final String message;

    private final String errorType;

    private final String errorDetails;

    private final Map<String, Object> additionalProperties;

    private ProviderConnectionError(
            String provider,
            String userId,
            String message,
            String errorType,
            String errorDetails,
            Map<String, Object> additionalProperties) {
        this.provider = provider;
        this.userId = userId;
        this.message = message;
        this.errorType = errorType;
        this.errorDetails = errorDetails;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("provider")
    public String getProvider() {
        return provider;
    }

    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("message")
    public String getMessage() {
        return message;
    }

    @JsonProperty("error_type")
    public String getErrorType() {
        return errorType;
    }

    @JsonProperty("error_details")
    public String getErrorDetails() {
        return errorDetails;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProviderConnectionError && equalTo((ProviderConnectionError) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProviderConnectionError other) {
        return provider.equals(other.provider)
                && userId.equals(other.userId)
                && message.equals(other.message)
                && errorType.equals(other.errorType)
                && errorDetails.equals(other.errorDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.provider, this.userId, this.message, this.errorType, this.errorDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ProviderStage builder() {
        return new Builder();
    }

    public interface ProviderStage {
        UserIdStage provider(String provider);

        Builder from(ProviderConnectionError other);
    }

    public interface UserIdStage {
        MessageStage userId(String userId);
    }

    public interface MessageStage {
        ErrorTypeStage message(String message);
    }

    public interface ErrorTypeStage {
        ErrorDetailsStage errorType(String errorType);
    }

    public interface ErrorDetailsStage {
        _FinalStage errorDetails(String errorDetails);
    }

    public interface _FinalStage {
        ProviderConnectionError build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ProviderStage, UserIdStage, MessageStage, ErrorTypeStage, ErrorDetailsStage, _FinalStage {
        private String provider;

        private String userId;

        private String message;

        private String errorType;

        private String errorDetails;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProviderConnectionError other) {
            provider(other.getProvider());
            userId(other.getUserId());
            message(other.getMessage());
            errorType(other.getErrorType());
            errorDetails(other.getErrorDetails());
            return this;
        }

        @java.lang.Override
        @JsonSetter("provider")
        public UserIdStage provider(String provider) {
            this.provider = provider;
            return this;
        }

        @java.lang.Override
        @JsonSetter("user_id")
        public MessageStage userId(String userId) {
            this.userId = userId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("message")
        public ErrorTypeStage message(String message) {
            this.message = message;
            return this;
        }

        @java.lang.Override
        @JsonSetter("error_type")
        public ErrorDetailsStage errorType(String errorType) {
            this.errorType = errorType;
            return this;
        }

        @java.lang.Override
        @JsonSetter("error_details")
        public _FinalStage errorDetails(String errorDetails) {
            this.errorDetails = errorDetails;
            return this;
        }

        @java.lang.Override
        public ProviderConnectionError build() {
            return new ProviderConnectionError(
                    provider, userId, message, errorType, errorDetails, additionalProperties);
        }
    }
}
