/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingInsurance.Builder.class)
public final class ClientFacingInsurance {
    private final String memberId;

    private final String payorCode;

    private final ResponsibleRelationship relationship;

    private final VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails insured;

    private final CompanyDetails company;

    private final Optional<String> groupId;

    private final Optional<GuarantorDetails> guarantor;

    private final Map<String, Object> additionalProperties;

    private ClientFacingInsurance(
            String memberId,
            String payorCode,
            ResponsibleRelationship relationship,
            VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails insured,
            CompanyDetails company,
            Optional<String> groupId,
            Optional<GuarantorDetails> guarantor,
            Map<String, Object> additionalProperties) {
        this.memberId = memberId;
        this.payorCode = payorCode;
        this.relationship = relationship;
        this.insured = insured;
        this.company = company;
        this.groupId = groupId;
        this.guarantor = guarantor;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("member_id")
    public String getMemberId() {
        return memberId;
    }

    @JsonProperty("payor_code")
    public String getPayorCode() {
        return payorCode;
    }

    @JsonProperty("relationship")
    public ResponsibleRelationship getRelationship() {
        return relationship;
    }

    @JsonProperty("insured")
    public VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails getInsured() {
        return insured;
    }

    @JsonProperty("company")
    public CompanyDetails getCompany() {
        return company;
    }

    @JsonProperty("group_id")
    public Optional<String> getGroupId() {
        return groupId;
    }

    @JsonProperty("guarantor")
    public Optional<GuarantorDetails> getGuarantor() {
        return guarantor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingInsurance && equalTo((ClientFacingInsurance) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingInsurance other) {
        return memberId.equals(other.memberId)
                && payorCode.equals(other.payorCode)
                && relationship.equals(other.relationship)
                && insured.equals(other.insured)
                && company.equals(other.company)
                && groupId.equals(other.groupId)
                && guarantor.equals(other.guarantor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.memberId,
                this.payorCode,
                this.relationship,
                this.insured,
                this.company,
                this.groupId,
                this.guarantor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MemberIdStage builder() {
        return new Builder();
    }

    public interface MemberIdStage {
        PayorCodeStage memberId(String memberId);

        Builder from(ClientFacingInsurance other);
    }

    public interface PayorCodeStage {
        RelationshipStage payorCode(String payorCode);
    }

    public interface RelationshipStage {
        InsuredStage relationship(ResponsibleRelationship relationship);
    }

    public interface InsuredStage {
        CompanyStage insured(VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails insured);
    }

    public interface CompanyStage {
        _FinalStage company(CompanyDetails company);
    }

    public interface _FinalStage {
        ClientFacingInsurance build();

        _FinalStage groupId(Optional<String> groupId);

        _FinalStage groupId(String groupId);

        _FinalStage guarantor(Optional<GuarantorDetails> guarantor);

        _FinalStage guarantor(GuarantorDetails guarantor);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements MemberIdStage, PayorCodeStage, RelationshipStage, InsuredStage, CompanyStage, _FinalStage {
        private String memberId;

        private String payorCode;

        private ResponsibleRelationship relationship;

        private VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails insured;

        private CompanyDetails company;

        private Optional<GuarantorDetails> guarantor = Optional.empty();

        private Optional<String> groupId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingInsurance other) {
            memberId(other.getMemberId());
            payorCode(other.getPayorCode());
            relationship(other.getRelationship());
            insured(other.getInsured());
            company(other.getCompany());
            groupId(other.getGroupId());
            guarantor(other.getGuarantor());
            return this;
        }

        @java.lang.Override
        @JsonSetter("member_id")
        public PayorCodeStage memberId(String memberId) {
            this.memberId = memberId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("payor_code")
        public RelationshipStage payorCode(String payorCode) {
            this.payorCode = payorCode;
            return this;
        }

        @java.lang.Override
        @JsonSetter("relationship")
        public InsuredStage relationship(ResponsibleRelationship relationship) {
            this.relationship = relationship;
            return this;
        }

        @java.lang.Override
        @JsonSetter("insured")
        public CompanyStage insured(VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails insured) {
            this.insured = insured;
            return this;
        }

        @java.lang.Override
        @JsonSetter("company")
        public _FinalStage company(CompanyDetails company) {
            this.company = company;
            return this;
        }

        @java.lang.Override
        public _FinalStage guarantor(GuarantorDetails guarantor) {
            this.guarantor = Optional.of(guarantor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "guarantor", nulls = Nulls.SKIP)
        public _FinalStage guarantor(Optional<GuarantorDetails> guarantor) {
            this.guarantor = guarantor;
            return this;
        }

        @java.lang.Override
        public _FinalStage groupId(String groupId) {
            this.groupId = Optional.of(groupId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "group_id", nulls = Nulls.SKIP)
        public _FinalStage groupId(Optional<String> groupId) {
            this.groupId = groupId;
            return this;
        }

        @java.lang.Override
        public ClientFacingInsurance build() {
            return new ClientFacingInsurance(
                    memberId, payorCode, relationship, insured, company, groupId, guarantor, additionalProperties);
        }
    }
}
