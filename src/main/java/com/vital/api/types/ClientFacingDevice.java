/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientFacingDevice.Builder.class)
public final class ClientFacingDevice {
    private final String id;

    private final String userId;

    private final String provider;

    private final ClientFacingDeviceSourceType sourceType;

    private final Optional<String> appId;

    private final Optional<String> deviceManufacturer;

    private final Optional<String> deviceModel;

    private final Optional<String> deviceVersion;

    private final Optional<String> deviceId;

    private final Map<String, Object> additionalProperties;

    private ClientFacingDevice(
            String id,
            String userId,
            String provider,
            ClientFacingDeviceSourceType sourceType,
            Optional<String> appId,
            Optional<String> deviceManufacturer,
            Optional<String> deviceModel,
            Optional<String> deviceVersion,
            Optional<String> deviceId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.userId = userId;
        this.provider = provider;
        this.sourceType = sourceType;
        this.appId = appId;
        this.deviceManufacturer = deviceManufacturer;
        this.deviceModel = deviceModel;
        this.deviceVersion = deviceVersion;
        this.deviceId = deviceId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("provider")
    public String getProvider() {
        return provider;
    }

    /**
     * @return ℹ️ This enum is non-exhaustive.
     */
    @JsonProperty("source_type")
    public ClientFacingDeviceSourceType getSourceType() {
        return sourceType;
    }

    @JsonProperty("app_id")
    public Optional<String> getAppId() {
        return appId;
    }

    @JsonProperty("device_manufacturer")
    public Optional<String> getDeviceManufacturer() {
        return deviceManufacturer;
    }

    @JsonProperty("device_model")
    public Optional<String> getDeviceModel() {
        return deviceModel;
    }

    @JsonProperty("device_version")
    public Optional<String> getDeviceVersion() {
        return deviceVersion;
    }

    @JsonProperty("device_id")
    public Optional<String> getDeviceId() {
        return deviceId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingDevice && equalTo((ClientFacingDevice) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingDevice other) {
        return id.equals(other.id)
                && userId.equals(other.userId)
                && provider.equals(other.provider)
                && sourceType.equals(other.sourceType)
                && appId.equals(other.appId)
                && deviceManufacturer.equals(other.deviceManufacturer)
                && deviceModel.equals(other.deviceModel)
                && deviceVersion.equals(other.deviceVersion)
                && deviceId.equals(other.deviceId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.userId,
                this.provider,
                this.sourceType,
                this.appId,
                this.deviceManufacturer,
                this.deviceModel,
                this.deviceVersion,
                this.deviceId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        UserIdStage id(@NotNull String id);

        Builder from(ClientFacingDevice other);
    }

    public interface UserIdStage {
        ProviderStage userId(@NotNull String userId);
    }

    public interface ProviderStage {
        SourceTypeStage provider(@NotNull String provider);
    }

    public interface SourceTypeStage {
        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         */
        _FinalStage sourceType(@NotNull ClientFacingDeviceSourceType sourceType);
    }

    public interface _FinalStage {
        ClientFacingDevice build();

        _FinalStage appId(Optional<String> appId);

        _FinalStage appId(String appId);

        _FinalStage deviceManufacturer(Optional<String> deviceManufacturer);

        _FinalStage deviceManufacturer(String deviceManufacturer);

        _FinalStage deviceModel(Optional<String> deviceModel);

        _FinalStage deviceModel(String deviceModel);

        _FinalStage deviceVersion(Optional<String> deviceVersion);

        _FinalStage deviceVersion(String deviceVersion);

        _FinalStage deviceId(Optional<String> deviceId);

        _FinalStage deviceId(String deviceId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, UserIdStage, ProviderStage, SourceTypeStage, _FinalStage {
        private String id;

        private String userId;

        private String provider;

        private ClientFacingDeviceSourceType sourceType;

        private Optional<String> deviceId = Optional.empty();

        private Optional<String> deviceVersion = Optional.empty();

        private Optional<String> deviceModel = Optional.empty();

        private Optional<String> deviceManufacturer = Optional.empty();

        private Optional<String> appId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingDevice other) {
            id(other.getId());
            userId(other.getUserId());
            provider(other.getProvider());
            sourceType(other.getSourceType());
            appId(other.getAppId());
            deviceManufacturer(other.getDeviceManufacturer());
            deviceModel(other.getDeviceModel());
            deviceVersion(other.getDeviceVersion());
            deviceId(other.getDeviceId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public UserIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("user_id")
        public ProviderStage userId(@NotNull String userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("provider")
        public SourceTypeStage provider(@NotNull String provider) {
            this.provider = Objects.requireNonNull(provider, "provider must not be null");
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("source_type")
        public _FinalStage sourceType(@NotNull ClientFacingDeviceSourceType sourceType) {
            this.sourceType = Objects.requireNonNull(sourceType, "sourceType must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage deviceId(String deviceId) {
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "device_id", nulls = Nulls.SKIP)
        public _FinalStage deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        @java.lang.Override
        public _FinalStage deviceVersion(String deviceVersion) {
            this.deviceVersion = Optional.ofNullable(deviceVersion);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "device_version", nulls = Nulls.SKIP)
        public _FinalStage deviceVersion(Optional<String> deviceVersion) {
            this.deviceVersion = deviceVersion;
            return this;
        }

        @java.lang.Override
        public _FinalStage deviceModel(String deviceModel) {
            this.deviceModel = Optional.ofNullable(deviceModel);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "device_model", nulls = Nulls.SKIP)
        public _FinalStage deviceModel(Optional<String> deviceModel) {
            this.deviceModel = deviceModel;
            return this;
        }

        @java.lang.Override
        public _FinalStage deviceManufacturer(String deviceManufacturer) {
            this.deviceManufacturer = Optional.ofNullable(deviceManufacturer);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "device_manufacturer", nulls = Nulls.SKIP)
        public _FinalStage deviceManufacturer(Optional<String> deviceManufacturer) {
            this.deviceManufacturer = deviceManufacturer;
            return this;
        }

        @java.lang.Override
        public _FinalStage appId(String appId) {
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "app_id", nulls = Nulls.SKIP)
        public _FinalStage appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        @java.lang.Override
        public ClientFacingDevice build() {
            return new ClientFacingDevice(
                    id,
                    userId,
                    provider,
                    sourceType,
                    appId,
                    deviceManufacturer,
                    deviceModel,
                    deviceVersion,
                    deviceId,
                    additionalProperties);
        }
    }
}
