/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ProviderLinkResponse.Builder.class)
public final class ProviderLinkResponse {
    private final PasswordProviders provider;

    private final boolean connected;

    private final Optional<String> providerId;

    private final ProviderLinkResponseState state;

    private final Optional<String> errorType;

    private final Optional<String> error;

    private final Map<String, Object> additionalProperties;

    private ProviderLinkResponse(
            PasswordProviders provider,
            boolean connected,
            Optional<String> providerId,
            ProviderLinkResponseState state,
            Optional<String> errorType,
            Optional<String> error,
            Map<String, Object> additionalProperties) {
        this.provider = provider;
        this.connected = connected;
        this.providerId = providerId;
        this.state = state;
        this.errorType = errorType;
        this.error = error;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("provider")
    public PasswordProviders getProvider() {
        return provider;
    }

    @JsonProperty("connected")
    public boolean getConnected() {
        return connected;
    }

    @JsonProperty("provider_id")
    public Optional<String> getProviderId() {
        return providerId;
    }

    @JsonProperty("state")
    public ProviderLinkResponseState getState() {
        return state;
    }

    @JsonProperty("error_type")
    public Optional<String> getErrorType() {
        return errorType;
    }

    @JsonProperty("error")
    public Optional<String> getError() {
        return error;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProviderLinkResponse && equalTo((ProviderLinkResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProviderLinkResponse other) {
        return provider.equals(other.provider)
                && connected == other.connected
                && providerId.equals(other.providerId)
                && state.equals(other.state)
                && errorType.equals(other.errorType)
                && error.equals(other.error);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.provider, this.connected, this.providerId, this.state, this.errorType, this.error);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ProviderStage builder() {
        return new Builder();
    }

    public interface ProviderStage {
        ConnectedStage provider(PasswordProviders provider);

        Builder from(ProviderLinkResponse other);
    }

    public interface ConnectedStage {
        StateStage connected(boolean connected);
    }

    public interface StateStage {
        _FinalStage state(ProviderLinkResponseState state);
    }

    public interface _FinalStage {
        ProviderLinkResponse build();

        _FinalStage providerId(Optional<String> providerId);

        _FinalStage providerId(String providerId);

        _FinalStage errorType(Optional<String> errorType);

        _FinalStage errorType(String errorType);

        _FinalStage error(Optional<String> error);

        _FinalStage error(String error);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ProviderStage, ConnectedStage, StateStage, _FinalStage {
        private PasswordProviders provider;

        private boolean connected;

        private ProviderLinkResponseState state;

        private Optional<String> error = Optional.empty();

        private Optional<String> errorType = Optional.empty();

        private Optional<String> providerId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(ProviderLinkResponse other) {
            provider(other.getProvider());
            connected(other.getConnected());
            providerId(other.getProviderId());
            state(other.getState());
            errorType(other.getErrorType());
            error(other.getError());
            return this;
        }

        @Override
        @JsonSetter("provider")
        public ConnectedStage provider(PasswordProviders provider) {
            this.provider = provider;
            return this;
        }

        @Override
        @JsonSetter("connected")
        public StateStage connected(boolean connected) {
            this.connected = connected;
            return this;
        }

        @Override
        @JsonSetter("state")
        public _FinalStage state(ProviderLinkResponseState state) {
            this.state = state;
            return this;
        }

        @Override
        public _FinalStage error(String error) {
            this.error = Optional.of(error);
            return this;
        }

        @Override
        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public _FinalStage error(Optional<String> error) {
            this.error = error;
            return this;
        }

        @Override
        public _FinalStage errorType(String errorType) {
            this.errorType = Optional.of(errorType);
            return this;
        }

        @Override
        @JsonSetter(value = "error_type", nulls = Nulls.SKIP)
        public _FinalStage errorType(Optional<String> errorType) {
            this.errorType = errorType;
            return this;
        }

        @Override
        public _FinalStage providerId(String providerId) {
            this.providerId = Optional.of(providerId);
            return this;
        }

        @Override
        @JsonSetter(value = "provider_id", nulls = Nulls.SKIP)
        public _FinalStage providerId(Optional<String> providerId) {
            this.providerId = providerId;
            return this;
        }

        @Override
        public ProviderLinkResponse build() {
            return new ProviderLinkResponse(
                    provider, connected, providerId, state, errorType, error, additionalProperties);
        }
    }
}
