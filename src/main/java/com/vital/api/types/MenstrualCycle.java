/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = MenstrualCycle.Builder.class)
public final class MenstrualCycle {
    private final String periodStart;

    private final Optional<String> periodEnd;

    private final Optional<String> cycleEnd;

    private final Optional<Boolean> isPredicted;

    private final Optional<List<MenstrualFlowEntry>> menstrualFlow;

    private final Optional<List<CervicalMucusEntry>> cervicalMucus;

    private final Optional<List<IntermenstrualBleedingEntry>> intermenstrualBleeding;

    private final Optional<List<ContraceptiveEntry>> contraceptive;

    private final Optional<List<DetectedDeviationEntry>> detectedDeviations;

    private final Optional<List<OvulationTestEntry>> ovulationTest;

    private final Optional<List<HomePregnancyTestEntry>> homePregnancyTest;

    private final Optional<List<HomeProgesteroneTestEntry>> homeProgesteroneTest;

    private final Optional<List<SexualActivityEntry>> sexualActivity;

    private final Optional<List<BasalBodyTemperatureEntry>> basalBodyTemperature;

    private final ClientFacingSource source;

    private final Map<String, Object> additionalProperties;

    private MenstrualCycle(
            String periodStart,
            Optional<String> periodEnd,
            Optional<String> cycleEnd,
            Optional<Boolean> isPredicted,
            Optional<List<MenstrualFlowEntry>> menstrualFlow,
            Optional<List<CervicalMucusEntry>> cervicalMucus,
            Optional<List<IntermenstrualBleedingEntry>> intermenstrualBleeding,
            Optional<List<ContraceptiveEntry>> contraceptive,
            Optional<List<DetectedDeviationEntry>> detectedDeviations,
            Optional<List<OvulationTestEntry>> ovulationTest,
            Optional<List<HomePregnancyTestEntry>> homePregnancyTest,
            Optional<List<HomeProgesteroneTestEntry>> homeProgesteroneTest,
            Optional<List<SexualActivityEntry>> sexualActivity,
            Optional<List<BasalBodyTemperatureEntry>> basalBodyTemperature,
            ClientFacingSource source,
            Map<String, Object> additionalProperties) {
        this.periodStart = periodStart;
        this.periodEnd = periodEnd;
        this.cycleEnd = cycleEnd;
        this.isPredicted = isPredicted;
        this.menstrualFlow = menstrualFlow;
        this.cervicalMucus = cervicalMucus;
        this.intermenstrualBleeding = intermenstrualBleeding;
        this.contraceptive = contraceptive;
        this.detectedDeviations = detectedDeviations;
        this.ovulationTest = ovulationTest;
        this.homePregnancyTest = homePregnancyTest;
        this.homeProgesteroneTest = homeProgesteroneTest;
        this.sexualActivity = sexualActivity;
        this.basalBodyTemperature = basalBodyTemperature;
        this.source = source;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("period_start")
    public String getPeriodStart() {
        return periodStart;
    }

    @JsonProperty("period_end")
    public Optional<String> getPeriodEnd() {
        return periodEnd;
    }

    @JsonProperty("cycle_end")
    public Optional<String> getCycleEnd() {
        return cycleEnd;
    }

    @JsonProperty("is_predicted")
    public Optional<Boolean> getIsPredicted() {
        return isPredicted;
    }

    @JsonProperty("menstrual_flow")
    public Optional<List<MenstrualFlowEntry>> getMenstrualFlow() {
        return menstrualFlow;
    }

    @JsonProperty("cervical_mucus")
    public Optional<List<CervicalMucusEntry>> getCervicalMucus() {
        return cervicalMucus;
    }

    @JsonProperty("intermenstrual_bleeding")
    public Optional<List<IntermenstrualBleedingEntry>> getIntermenstrualBleeding() {
        return intermenstrualBleeding;
    }

    @JsonProperty("contraceptive")
    public Optional<List<ContraceptiveEntry>> getContraceptive() {
        return contraceptive;
    }

    @JsonProperty("detected_deviations")
    public Optional<List<DetectedDeviationEntry>> getDetectedDeviations() {
        return detectedDeviations;
    }

    @JsonProperty("ovulation_test")
    public Optional<List<OvulationTestEntry>> getOvulationTest() {
        return ovulationTest;
    }

    @JsonProperty("home_pregnancy_test")
    public Optional<List<HomePregnancyTestEntry>> getHomePregnancyTest() {
        return homePregnancyTest;
    }

    @JsonProperty("home_progesterone_test")
    public Optional<List<HomeProgesteroneTestEntry>> getHomeProgesteroneTest() {
        return homeProgesteroneTest;
    }

    @JsonProperty("sexual_activity")
    public Optional<List<SexualActivityEntry>> getSexualActivity() {
        return sexualActivity;
    }

    @JsonProperty("basal_body_temperature")
    public Optional<List<BasalBodyTemperatureEntry>> getBasalBodyTemperature() {
        return basalBodyTemperature;
    }

    @JsonProperty("source")
    public ClientFacingSource getSource() {
        return source;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MenstrualCycle && equalTo((MenstrualCycle) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MenstrualCycle other) {
        return periodStart.equals(other.periodStart)
                && periodEnd.equals(other.periodEnd)
                && cycleEnd.equals(other.cycleEnd)
                && isPredicted.equals(other.isPredicted)
                && menstrualFlow.equals(other.menstrualFlow)
                && cervicalMucus.equals(other.cervicalMucus)
                && intermenstrualBleeding.equals(other.intermenstrualBleeding)
                && contraceptive.equals(other.contraceptive)
                && detectedDeviations.equals(other.detectedDeviations)
                && ovulationTest.equals(other.ovulationTest)
                && homePregnancyTest.equals(other.homePregnancyTest)
                && homeProgesteroneTest.equals(other.homeProgesteroneTest)
                && sexualActivity.equals(other.sexualActivity)
                && basalBodyTemperature.equals(other.basalBodyTemperature)
                && source.equals(other.source);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.periodStart,
                this.periodEnd,
                this.cycleEnd,
                this.isPredicted,
                this.menstrualFlow,
                this.cervicalMucus,
                this.intermenstrualBleeding,
                this.contraceptive,
                this.detectedDeviations,
                this.ovulationTest,
                this.homePregnancyTest,
                this.homeProgesteroneTest,
                this.sexualActivity,
                this.basalBodyTemperature,
                this.source);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PeriodStartStage builder() {
        return new Builder();
    }

    public interface PeriodStartStage {
        SourceStage periodStart(String periodStart);

        Builder from(MenstrualCycle other);
    }

    public interface SourceStage {
        _FinalStage source(ClientFacingSource source);
    }

    public interface _FinalStage {
        MenstrualCycle build();

        _FinalStage periodEnd(Optional<String> periodEnd);

        _FinalStage periodEnd(String periodEnd);

        _FinalStage cycleEnd(Optional<String> cycleEnd);

        _FinalStage cycleEnd(String cycleEnd);

        _FinalStage isPredicted(Optional<Boolean> isPredicted);

        _FinalStage isPredicted(Boolean isPredicted);

        _FinalStage menstrualFlow(Optional<List<MenstrualFlowEntry>> menstrualFlow);

        _FinalStage menstrualFlow(List<MenstrualFlowEntry> menstrualFlow);

        _FinalStage cervicalMucus(Optional<List<CervicalMucusEntry>> cervicalMucus);

        _FinalStage cervicalMucus(List<CervicalMucusEntry> cervicalMucus);

        _FinalStage intermenstrualBleeding(Optional<List<IntermenstrualBleedingEntry>> intermenstrualBleeding);

        _FinalStage intermenstrualBleeding(List<IntermenstrualBleedingEntry> intermenstrualBleeding);

        _FinalStage contraceptive(Optional<List<ContraceptiveEntry>> contraceptive);

        _FinalStage contraceptive(List<ContraceptiveEntry> contraceptive);

        _FinalStage detectedDeviations(Optional<List<DetectedDeviationEntry>> detectedDeviations);

        _FinalStage detectedDeviations(List<DetectedDeviationEntry> detectedDeviations);

        _FinalStage ovulationTest(Optional<List<OvulationTestEntry>> ovulationTest);

        _FinalStage ovulationTest(List<OvulationTestEntry> ovulationTest);

        _FinalStage homePregnancyTest(Optional<List<HomePregnancyTestEntry>> homePregnancyTest);

        _FinalStage homePregnancyTest(List<HomePregnancyTestEntry> homePregnancyTest);

        _FinalStage homeProgesteroneTest(Optional<List<HomeProgesteroneTestEntry>> homeProgesteroneTest);

        _FinalStage homeProgesteroneTest(List<HomeProgesteroneTestEntry> homeProgesteroneTest);

        _FinalStage sexualActivity(Optional<List<SexualActivityEntry>> sexualActivity);

        _FinalStage sexualActivity(List<SexualActivityEntry> sexualActivity);

        _FinalStage basalBodyTemperature(Optional<List<BasalBodyTemperatureEntry>> basalBodyTemperature);

        _FinalStage basalBodyTemperature(List<BasalBodyTemperatureEntry> basalBodyTemperature);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PeriodStartStage, SourceStage, _FinalStage {
        private String periodStart;

        private ClientFacingSource source;

        private Optional<List<BasalBodyTemperatureEntry>> basalBodyTemperature = Optional.empty();

        private Optional<List<SexualActivityEntry>> sexualActivity = Optional.empty();

        private Optional<List<HomeProgesteroneTestEntry>> homeProgesteroneTest = Optional.empty();

        private Optional<List<HomePregnancyTestEntry>> homePregnancyTest = Optional.empty();

        private Optional<List<OvulationTestEntry>> ovulationTest = Optional.empty();

        private Optional<List<DetectedDeviationEntry>> detectedDeviations = Optional.empty();

        private Optional<List<ContraceptiveEntry>> contraceptive = Optional.empty();

        private Optional<List<IntermenstrualBleedingEntry>> intermenstrualBleeding = Optional.empty();

        private Optional<List<CervicalMucusEntry>> cervicalMucus = Optional.empty();

        private Optional<List<MenstrualFlowEntry>> menstrualFlow = Optional.empty();

        private Optional<Boolean> isPredicted = Optional.empty();

        private Optional<String> cycleEnd = Optional.empty();

        private Optional<String> periodEnd = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MenstrualCycle other) {
            periodStart(other.getPeriodStart());
            periodEnd(other.getPeriodEnd());
            cycleEnd(other.getCycleEnd());
            isPredicted(other.getIsPredicted());
            menstrualFlow(other.getMenstrualFlow());
            cervicalMucus(other.getCervicalMucus());
            intermenstrualBleeding(other.getIntermenstrualBleeding());
            contraceptive(other.getContraceptive());
            detectedDeviations(other.getDetectedDeviations());
            ovulationTest(other.getOvulationTest());
            homePregnancyTest(other.getHomePregnancyTest());
            homeProgesteroneTest(other.getHomeProgesteroneTest());
            sexualActivity(other.getSexualActivity());
            basalBodyTemperature(other.getBasalBodyTemperature());
            source(other.getSource());
            return this;
        }

        @java.lang.Override
        @JsonSetter("period_start")
        public SourceStage periodStart(String periodStart) {
            this.periodStart = periodStart;
            return this;
        }

        @java.lang.Override
        @JsonSetter("source")
        public _FinalStage source(ClientFacingSource source) {
            this.source = source;
            return this;
        }

        @java.lang.Override
        public _FinalStage basalBodyTemperature(List<BasalBodyTemperatureEntry> basalBodyTemperature) {
            this.basalBodyTemperature = Optional.of(basalBodyTemperature);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "basal_body_temperature", nulls = Nulls.SKIP)
        public _FinalStage basalBodyTemperature(Optional<List<BasalBodyTemperatureEntry>> basalBodyTemperature) {
            this.basalBodyTemperature = basalBodyTemperature;
            return this;
        }

        @java.lang.Override
        public _FinalStage sexualActivity(List<SexualActivityEntry> sexualActivity) {
            this.sexualActivity = Optional.of(sexualActivity);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sexual_activity", nulls = Nulls.SKIP)
        public _FinalStage sexualActivity(Optional<List<SexualActivityEntry>> sexualActivity) {
            this.sexualActivity = sexualActivity;
            return this;
        }

        @java.lang.Override
        public _FinalStage homeProgesteroneTest(List<HomeProgesteroneTestEntry> homeProgesteroneTest) {
            this.homeProgesteroneTest = Optional.of(homeProgesteroneTest);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "home_progesterone_test", nulls = Nulls.SKIP)
        public _FinalStage homeProgesteroneTest(Optional<List<HomeProgesteroneTestEntry>> homeProgesteroneTest) {
            this.homeProgesteroneTest = homeProgesteroneTest;
            return this;
        }

        @java.lang.Override
        public _FinalStage homePregnancyTest(List<HomePregnancyTestEntry> homePregnancyTest) {
            this.homePregnancyTest = Optional.of(homePregnancyTest);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "home_pregnancy_test", nulls = Nulls.SKIP)
        public _FinalStage homePregnancyTest(Optional<List<HomePregnancyTestEntry>> homePregnancyTest) {
            this.homePregnancyTest = homePregnancyTest;
            return this;
        }

        @java.lang.Override
        public _FinalStage ovulationTest(List<OvulationTestEntry> ovulationTest) {
            this.ovulationTest = Optional.of(ovulationTest);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ovulation_test", nulls = Nulls.SKIP)
        public _FinalStage ovulationTest(Optional<List<OvulationTestEntry>> ovulationTest) {
            this.ovulationTest = ovulationTest;
            return this;
        }

        @java.lang.Override
        public _FinalStage detectedDeviations(List<DetectedDeviationEntry> detectedDeviations) {
            this.detectedDeviations = Optional.of(detectedDeviations);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "detected_deviations", nulls = Nulls.SKIP)
        public _FinalStage detectedDeviations(Optional<List<DetectedDeviationEntry>> detectedDeviations) {
            this.detectedDeviations = detectedDeviations;
            return this;
        }

        @java.lang.Override
        public _FinalStage contraceptive(List<ContraceptiveEntry> contraceptive) {
            this.contraceptive = Optional.of(contraceptive);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "contraceptive", nulls = Nulls.SKIP)
        public _FinalStage contraceptive(Optional<List<ContraceptiveEntry>> contraceptive) {
            this.contraceptive = contraceptive;
            return this;
        }

        @java.lang.Override
        public _FinalStage intermenstrualBleeding(List<IntermenstrualBleedingEntry> intermenstrualBleeding) {
            this.intermenstrualBleeding = Optional.of(intermenstrualBleeding);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "intermenstrual_bleeding", nulls = Nulls.SKIP)
        public _FinalStage intermenstrualBleeding(Optional<List<IntermenstrualBleedingEntry>> intermenstrualBleeding) {
            this.intermenstrualBleeding = intermenstrualBleeding;
            return this;
        }

        @java.lang.Override
        public _FinalStage cervicalMucus(List<CervicalMucusEntry> cervicalMucus) {
            this.cervicalMucus = Optional.of(cervicalMucus);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cervical_mucus", nulls = Nulls.SKIP)
        public _FinalStage cervicalMucus(Optional<List<CervicalMucusEntry>> cervicalMucus) {
            this.cervicalMucus = cervicalMucus;
            return this;
        }

        @java.lang.Override
        public _FinalStage menstrualFlow(List<MenstrualFlowEntry> menstrualFlow) {
            this.menstrualFlow = Optional.of(menstrualFlow);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "menstrual_flow", nulls = Nulls.SKIP)
        public _FinalStage menstrualFlow(Optional<List<MenstrualFlowEntry>> menstrualFlow) {
            this.menstrualFlow = menstrualFlow;
            return this;
        }

        @java.lang.Override
        public _FinalStage isPredicted(Boolean isPredicted) {
            this.isPredicted = Optional.of(isPredicted);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_predicted", nulls = Nulls.SKIP)
        public _FinalStage isPredicted(Optional<Boolean> isPredicted) {
            this.isPredicted = isPredicted;
            return this;
        }

        @java.lang.Override
        public _FinalStage cycleEnd(String cycleEnd) {
            this.cycleEnd = Optional.of(cycleEnd);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cycle_end", nulls = Nulls.SKIP)
        public _FinalStage cycleEnd(Optional<String> cycleEnd) {
            this.cycleEnd = cycleEnd;
            return this;
        }

        @java.lang.Override
        public _FinalStage periodEnd(String periodEnd) {
            this.periodEnd = Optional.of(periodEnd);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "period_end", nulls = Nulls.SKIP)
        public _FinalStage periodEnd(Optional<String> periodEnd) {
            this.periodEnd = periodEnd;
            return this;
        }

        @java.lang.Override
        public MenstrualCycle build() {
            return new MenstrualCycle(
                    periodStart,
                    periodEnd,
                    cycleEnd,
                    isPredicted,
                    menstrualFlow,
                    cervicalMucus,
                    intermenstrualBleeding,
                    contraceptive,
                    detectedDeviations,
                    ovulationTest,
                    homePregnancyTest,
                    homeProgesteroneTest,
                    sexualActivity,
                    basalBodyTemperature,
                    source,
                    additionalProperties);
        }
    }
}
