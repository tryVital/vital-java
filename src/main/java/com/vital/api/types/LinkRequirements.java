/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = LinkRequirements.Builder.class)
public final class LinkRequirements {
    private final Optional<Providers> provider;

    private final Optional<List<Providers>> providerAllowlist;

    private final Optional<String> redirectUrl;

    private final Map<String, Object> additionalProperties;

    private LinkRequirements(
            Optional<Providers> provider,
            Optional<List<Providers>> providerAllowlist,
            Optional<String> redirectUrl,
            Map<String, Object> additionalProperties) {
        this.provider = provider;
        this.providerAllowlist = providerAllowlist;
        this.redirectUrl = redirectUrl;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("provider")
    public Optional<Providers> getProvider() {
        return provider;
    }

    @JsonProperty("provider_allowlist")
    public Optional<List<Providers>> getProviderAllowlist() {
        return providerAllowlist;
    }

    @JsonProperty("redirect_url")
    public Optional<String> getRedirectUrl() {
        return redirectUrl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LinkRequirements && equalTo((LinkRequirements) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LinkRequirements other) {
        return provider.equals(other.provider)
                && providerAllowlist.equals(other.providerAllowlist)
                && redirectUrl.equals(other.redirectUrl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.provider, this.providerAllowlist, this.redirectUrl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Providers> provider = Optional.empty();

        private Optional<List<Providers>> providerAllowlist = Optional.empty();

        private Optional<String> redirectUrl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LinkRequirements other) {
            provider(other.getProvider());
            providerAllowlist(other.getProviderAllowlist());
            redirectUrl(other.getRedirectUrl());
            return this;
        }

        @JsonSetter(value = "provider", nulls = Nulls.SKIP)
        public Builder provider(Optional<Providers> provider) {
            this.provider = provider;
            return this;
        }

        public Builder provider(Providers provider) {
            this.provider = Optional.of(provider);
            return this;
        }

        @JsonSetter(value = "provider_allowlist", nulls = Nulls.SKIP)
        public Builder providerAllowlist(Optional<List<Providers>> providerAllowlist) {
            this.providerAllowlist = providerAllowlist;
            return this;
        }

        public Builder providerAllowlist(List<Providers> providerAllowlist) {
            this.providerAllowlist = Optional.of(providerAllowlist);
            return this;
        }

        @JsonSetter(value = "redirect_url", nulls = Nulls.SKIP)
        public Builder redirectUrl(Optional<String> redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }

        public Builder redirectUrl(String redirectUrl) {
            this.redirectUrl = Optional.of(redirectUrl);
            return this;
        }

        public LinkRequirements build() {
            return new LinkRequirements(provider, providerAllowlist, redirectUrl, additionalProperties);
        }
    }
}
