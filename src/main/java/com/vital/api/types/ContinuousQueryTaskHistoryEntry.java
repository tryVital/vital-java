/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ContinuousQueryTaskHistoryEntry.Builder.class)
public final class ContinuousQueryTaskHistoryEntry {
    private final String queryId;

    private final String userId;

    private final ContinuousQueryTaskStatus status;

    private final OffsetDateTime scheduledAt;

    private final Optional<OffsetDateTime> startedAt;

    private final Optional<OffsetDateTime> endedAt;

    private final Optional<String> errorDetails;

    private final Map<String, Object> additionalProperties;

    private ContinuousQueryTaskHistoryEntry(
            String queryId,
            String userId,
            ContinuousQueryTaskStatus status,
            OffsetDateTime scheduledAt,
            Optional<OffsetDateTime> startedAt,
            Optional<OffsetDateTime> endedAt,
            Optional<String> errorDetails,
            Map<String, Object> additionalProperties) {
        this.queryId = queryId;
        this.userId = userId;
        this.status = status;
        this.scheduledAt = scheduledAt;
        this.startedAt = startedAt;
        this.endedAt = endedAt;
        this.errorDetails = errorDetails;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("query_id")
    public String getQueryId() {
        return queryId;
    }

    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("status")
    public ContinuousQueryTaskStatus getStatus() {
        return status;
    }

    @JsonProperty("scheduled_at")
    public OffsetDateTime getScheduledAt() {
        return scheduledAt;
    }

    @JsonProperty("started_at")
    public Optional<OffsetDateTime> getStartedAt() {
        return startedAt;
    }

    @JsonProperty("ended_at")
    public Optional<OffsetDateTime> getEndedAt() {
        return endedAt;
    }

    @JsonProperty("error_details")
    public Optional<String> getErrorDetails() {
        return errorDetails;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ContinuousQueryTaskHistoryEntry && equalTo((ContinuousQueryTaskHistoryEntry) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ContinuousQueryTaskHistoryEntry other) {
        return queryId.equals(other.queryId)
                && userId.equals(other.userId)
                && status.equals(other.status)
                && scheduledAt.equals(other.scheduledAt)
                && startedAt.equals(other.startedAt)
                && endedAt.equals(other.endedAt)
                && errorDetails.equals(other.errorDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.queryId,
                this.userId,
                this.status,
                this.scheduledAt,
                this.startedAt,
                this.endedAt,
                this.errorDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static QueryIdStage builder() {
        return new Builder();
    }

    public interface QueryIdStage {
        UserIdStage queryId(@NotNull String queryId);

        Builder from(ContinuousQueryTaskHistoryEntry other);
    }

    public interface UserIdStage {
        StatusStage userId(@NotNull String userId);
    }

    public interface StatusStage {
        ScheduledAtStage status(@NotNull ContinuousQueryTaskStatus status);
    }

    public interface ScheduledAtStage {
        _FinalStage scheduledAt(@NotNull OffsetDateTime scheduledAt);
    }

    public interface _FinalStage {
        ContinuousQueryTaskHistoryEntry build();

        _FinalStage startedAt(Optional<OffsetDateTime> startedAt);

        _FinalStage startedAt(OffsetDateTime startedAt);

        _FinalStage endedAt(Optional<OffsetDateTime> endedAt);

        _FinalStage endedAt(OffsetDateTime endedAt);

        _FinalStage errorDetails(Optional<String> errorDetails);

        _FinalStage errorDetails(String errorDetails);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements QueryIdStage, UserIdStage, StatusStage, ScheduledAtStage, _FinalStage {
        private String queryId;

        private String userId;

        private ContinuousQueryTaskStatus status;

        private OffsetDateTime scheduledAt;

        private Optional<String> errorDetails = Optional.empty();

        private Optional<OffsetDateTime> endedAt = Optional.empty();

        private Optional<OffsetDateTime> startedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ContinuousQueryTaskHistoryEntry other) {
            queryId(other.getQueryId());
            userId(other.getUserId());
            status(other.getStatus());
            scheduledAt(other.getScheduledAt());
            startedAt(other.getStartedAt());
            endedAt(other.getEndedAt());
            errorDetails(other.getErrorDetails());
            return this;
        }

        @java.lang.Override
        @JsonSetter("query_id")
        public UserIdStage queryId(@NotNull String queryId) {
            this.queryId = Objects.requireNonNull(queryId, "queryId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("user_id")
        public StatusStage userId(@NotNull String userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public ScheduledAtStage status(@NotNull ContinuousQueryTaskStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("scheduled_at")
        public _FinalStage scheduledAt(@NotNull OffsetDateTime scheduledAt) {
            this.scheduledAt = Objects.requireNonNull(scheduledAt, "scheduledAt must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage errorDetails(String errorDetails) {
            this.errorDetails = Optional.ofNullable(errorDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "error_details", nulls = Nulls.SKIP)
        public _FinalStage errorDetails(Optional<String> errorDetails) {
            this.errorDetails = errorDetails;
            return this;
        }

        @java.lang.Override
        public _FinalStage endedAt(OffsetDateTime endedAt) {
            this.endedAt = Optional.ofNullable(endedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ended_at", nulls = Nulls.SKIP)
        public _FinalStage endedAt(Optional<OffsetDateTime> endedAt) {
            this.endedAt = endedAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage startedAt(OffsetDateTime startedAt) {
            this.startedAt = Optional.ofNullable(startedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "started_at", nulls = Nulls.SKIP)
        public _FinalStage startedAt(Optional<OffsetDateTime> startedAt) {
            this.startedAt = startedAt;
            return this;
        }

        @java.lang.Override
        public ContinuousQueryTaskHistoryEntry build() {
            return new ContinuousQueryTaskHistoryEntry(
                    queryId, userId, status, scheduledAt, startedAt, endedAt, errorDetails, additionalProperties);
        }
    }
}
