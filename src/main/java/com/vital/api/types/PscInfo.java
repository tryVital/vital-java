/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = PscInfo.Builder.class)
public final class PscInfo {
    private final int labId;

    private final List<ClientFacingLabLocation> pscs;

    private final Map<String, Object> additionalProperties;

    private PscInfo(int labId, List<ClientFacingLabLocation> pscs, Map<String, Object> additionalProperties) {
        this.labId = labId;
        this.pscs = pscs;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("lab_id")
    public int getLabId() {
        return labId;
    }

    @JsonProperty("pscs")
    public List<ClientFacingLabLocation> getPscs() {
        return pscs;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PscInfo && equalTo((PscInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PscInfo other) {
        return labId == other.labId && pscs.equals(other.pscs);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.labId, this.pscs);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LabIdStage builder() {
        return new Builder();
    }

    public interface LabIdStage {
        _FinalStage labId(int labId);

        Builder from(PscInfo other);
    }

    public interface _FinalStage {
        PscInfo build();

        _FinalStage pscs(List<ClientFacingLabLocation> pscs);

        _FinalStage addPscs(ClientFacingLabLocation pscs);

        _FinalStage addAllPscs(List<ClientFacingLabLocation> pscs);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LabIdStage, _FinalStage {
        private int labId;

        private List<ClientFacingLabLocation> pscs = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(PscInfo other) {
            labId(other.getLabId());
            pscs(other.getPscs());
            return this;
        }

        @Override
        @JsonSetter("lab_id")
        public _FinalStage labId(int labId) {
            this.labId = labId;
            return this;
        }

        @Override
        public _FinalStage addAllPscs(List<ClientFacingLabLocation> pscs) {
            this.pscs.addAll(pscs);
            return this;
        }

        @Override
        public _FinalStage addPscs(ClientFacingLabLocation pscs) {
            this.pscs.add(pscs);
            return this;
        }

        @Override
        @JsonSetter(value = "pscs", nulls = Nulls.SKIP)
        public _FinalStage pscs(List<ClientFacingLabLocation> pscs) {
            this.pscs.clear();
            this.pscs.addAll(pscs);
            return this;
        }

        @Override
        public PscInfo build() {
            return new PscInfo(labId, pscs, additionalProperties);
        }
    }
}
