/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = VitalCoreSchemasRequestSchemasOrdersNameItem.Builder.class)
public final class VitalCoreSchemasRequestSchemasOrdersNameItem {
    private final String use;

    private final List<String> given;

    private final String family;

    private final Map<String, Object> additionalProperties;

    private VitalCoreSchemasRequestSchemasOrdersNameItem(
            String use, List<String> given, String family, Map<String, Object> additionalProperties) {
        this.use = use;
        this.given = given;
        this.family = family;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("use")
    public String getUse() {
        return use;
    }

    @JsonProperty("given")
    public List<String> getGiven() {
        return given;
    }

    @JsonProperty("family")
    public String getFamily() {
        return family;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VitalCoreSchemasRequestSchemasOrdersNameItem
                && equalTo((VitalCoreSchemasRequestSchemasOrdersNameItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VitalCoreSchemasRequestSchemasOrdersNameItem other) {
        return use.equals(other.use) && given.equals(other.given) && family.equals(other.family);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.use, this.given, this.family);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UseStage builder() {
        return new Builder();
    }

    public interface UseStage {
        FamilyStage use(String use);

        Builder from(VitalCoreSchemasRequestSchemasOrdersNameItem other);
    }

    public interface FamilyStage {
        _FinalStage family(String family);
    }

    public interface _FinalStage {
        VitalCoreSchemasRequestSchemasOrdersNameItem build();

        _FinalStage given(List<String> given);

        _FinalStage addGiven(String given);

        _FinalStage addAllGiven(List<String> given);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UseStage, FamilyStage, _FinalStage {
        private String use;

        private String family;

        private List<String> given = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(VitalCoreSchemasRequestSchemasOrdersNameItem other) {
            use(other.getUse());
            given(other.getGiven());
            family(other.getFamily());
            return this;
        }

        @Override
        @JsonSetter("use")
        public FamilyStage use(String use) {
            this.use = use;
            return this;
        }

        @Override
        @JsonSetter("family")
        public _FinalStage family(String family) {
            this.family = family;
            return this;
        }

        @Override
        public _FinalStage addAllGiven(List<String> given) {
            this.given.addAll(given);
            return this;
        }

        @Override
        public _FinalStage addGiven(String given) {
            this.given.add(given);
            return this;
        }

        @Override
        @JsonSetter(value = "given", nulls = Nulls.SKIP)
        public _FinalStage given(List<String> given) {
            this.given.clear();
            this.given.addAll(given);
            return this;
        }

        @Override
        public VitalCoreSchemasRequestSchemasOrdersNameItem build() {
            return new VitalCoreSchemasRequestSchemasOrdersNameItem(use, given, family, additionalProperties);
        }
    }
}
