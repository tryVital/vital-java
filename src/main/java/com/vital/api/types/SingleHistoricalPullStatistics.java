/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SingleHistoricalPullStatistics.Builder.class)
public final class SingleHistoricalPullStatistics {
    private final HistoricalPullStatus status;

    private final Optional<String> rangeStart;

    private final Optional<String> rangeEnd;

    private final HistoricalPullTimeline timeline;

    private final Optional<Integer> daysWithData;

    private final String release;

    private final Optional<String> traceId;

    private final Map<String, Object> additionalProperties;

    private SingleHistoricalPullStatistics(
            HistoricalPullStatus status,
            Optional<String> rangeStart,
            Optional<String> rangeEnd,
            HistoricalPullTimeline timeline,
            Optional<Integer> daysWithData,
            String release,
            Optional<String> traceId,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.rangeStart = rangeStart;
        this.rangeEnd = rangeEnd;
        this.timeline = timeline;
        this.daysWithData = daysWithData;
        this.release = release;
        this.traceId = traceId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("status")
    public HistoricalPullStatus getStatus() {
        return status;
    }

    @JsonProperty("range_start")
    public Optional<String> getRangeStart() {
        return rangeStart;
    }

    @JsonProperty("range_end")
    public Optional<String> getRangeEnd() {
        return rangeEnd;
    }

    @JsonProperty("timeline")
    public HistoricalPullTimeline getTimeline() {
        return timeline;
    }

    @JsonProperty("days_with_data")
    public Optional<Integer> getDaysWithData() {
        return daysWithData;
    }

    @JsonProperty("release")
    public String getRelease() {
        return release;
    }

    @JsonProperty("trace_id")
    public Optional<String> getTraceId() {
        return traceId;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SingleHistoricalPullStatistics && equalTo((SingleHistoricalPullStatistics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SingleHistoricalPullStatistics other) {
        return status.equals(other.status)
                && rangeStart.equals(other.rangeStart)
                && rangeEnd.equals(other.rangeEnd)
                && timeline.equals(other.timeline)
                && daysWithData.equals(other.daysWithData)
                && release.equals(other.release)
                && traceId.equals(other.traceId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.status,
                this.rangeStart,
                this.rangeEnd,
                this.timeline,
                this.daysWithData,
                this.release,
                this.traceId);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatusStage builder() {
        return new Builder();
    }

    public interface StatusStage {
        TimelineStage status(HistoricalPullStatus status);

        Builder from(SingleHistoricalPullStatistics other);
    }

    public interface TimelineStage {
        ReleaseStage timeline(HistoricalPullTimeline timeline);
    }

    public interface ReleaseStage {
        _FinalStage release(String release);
    }

    public interface _FinalStage {
        SingleHistoricalPullStatistics build();

        _FinalStage rangeStart(Optional<String> rangeStart);

        _FinalStage rangeStart(String rangeStart);

        _FinalStage rangeEnd(Optional<String> rangeEnd);

        _FinalStage rangeEnd(String rangeEnd);

        _FinalStage daysWithData(Optional<Integer> daysWithData);

        _FinalStage daysWithData(Integer daysWithData);

        _FinalStage traceId(Optional<String> traceId);

        _FinalStage traceId(String traceId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StatusStage, TimelineStage, ReleaseStage, _FinalStage {
        private HistoricalPullStatus status;

        private HistoricalPullTimeline timeline;

        private String release;

        private Optional<String> traceId = Optional.empty();

        private Optional<Integer> daysWithData = Optional.empty();

        private Optional<String> rangeEnd = Optional.empty();

        private Optional<String> rangeStart = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(SingleHistoricalPullStatistics other) {
            status(other.getStatus());
            rangeStart(other.getRangeStart());
            rangeEnd(other.getRangeEnd());
            timeline(other.getTimeline());
            daysWithData(other.getDaysWithData());
            release(other.getRelease());
            traceId(other.getTraceId());
            return this;
        }

        @Override
        @JsonSetter("status")
        public TimelineStage status(HistoricalPullStatus status) {
            this.status = status;
            return this;
        }

        @Override
        @JsonSetter("timeline")
        public ReleaseStage timeline(HistoricalPullTimeline timeline) {
            this.timeline = timeline;
            return this;
        }

        @Override
        @JsonSetter("release")
        public _FinalStage release(String release) {
            this.release = release;
            return this;
        }

        @Override
        public _FinalStage traceId(String traceId) {
            this.traceId = Optional.of(traceId);
            return this;
        }

        @Override
        @JsonSetter(value = "trace_id", nulls = Nulls.SKIP)
        public _FinalStage traceId(Optional<String> traceId) {
            this.traceId = traceId;
            return this;
        }

        @Override
        public _FinalStage daysWithData(Integer daysWithData) {
            this.daysWithData = Optional.of(daysWithData);
            return this;
        }

        @Override
        @JsonSetter(value = "days_with_data", nulls = Nulls.SKIP)
        public _FinalStage daysWithData(Optional<Integer> daysWithData) {
            this.daysWithData = daysWithData;
            return this;
        }

        @Override
        public _FinalStage rangeEnd(String rangeEnd) {
            this.rangeEnd = Optional.of(rangeEnd);
            return this;
        }

        @Override
        @JsonSetter(value = "range_end", nulls = Nulls.SKIP)
        public _FinalStage rangeEnd(Optional<String> rangeEnd) {
            this.rangeEnd = rangeEnd;
            return this;
        }

        @Override
        public _FinalStage rangeStart(String rangeStart) {
            this.rangeStart = Optional.of(rangeStart);
            return this;
        }

        @Override
        @JsonSetter(value = "range_start", nulls = Nulls.SKIP)
        public _FinalStage rangeStart(Optional<String> rangeStart) {
            this.rangeStart = rangeStart;
            return this;
        }

        @Override
        public SingleHistoricalPullStatistics build() {
            return new SingleHistoricalPullStatistics(
                    status, rangeStart, rangeEnd, timeline, daysWithData, release, traceId, additionalProperties);
        }
    }
}
