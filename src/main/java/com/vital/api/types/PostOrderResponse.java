/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PostOrderResponse.Builder.class)
public final class PostOrderResponse {
    private final ClientFacingOrder order;

    private final String status;

    private final String message;

    private final Map<String, Object> additionalProperties;

    private PostOrderResponse(
            ClientFacingOrder order, String status, String message, Map<String, Object> additionalProperties) {
        this.order = order;
        this.status = status;
        this.message = message;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("order")
    public ClientFacingOrder getOrder() {
        return order;
    }

    @JsonProperty("status")
    public String getStatus() {
        return status;
    }

    @JsonProperty("message")
    public String getMessage() {
        return message;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PostOrderResponse && equalTo((PostOrderResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PostOrderResponse other) {
        return order.equals(other.order) && status.equals(other.status) && message.equals(other.message);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.order, this.status, this.message);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OrderStage builder() {
        return new Builder();
    }

    public interface OrderStage {
        StatusStage order(@NotNull ClientFacingOrder order);

        Builder from(PostOrderResponse other);
    }

    public interface StatusStage {
        MessageStage status(@NotNull String status);
    }

    public interface MessageStage {
        _FinalStage message(@NotNull String message);
    }

    public interface _FinalStage {
        PostOrderResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OrderStage, StatusStage, MessageStage, _FinalStage {
        private ClientFacingOrder order;

        private String status;

        private String message;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PostOrderResponse other) {
            order(other.getOrder());
            status(other.getStatus());
            message(other.getMessage());
            return this;
        }

        @java.lang.Override
        @JsonSetter("order")
        public StatusStage order(@NotNull ClientFacingOrder order) {
            this.order = Objects.requireNonNull(order, "order must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public MessageStage status(@NotNull String status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("message")
        public _FinalStage message(@NotNull String message) {
            this.message = Objects.requireNonNull(message, "message must not be null");
            return this;
        }

        @java.lang.Override
        public PostOrderResponse build() {
            return new PostOrderResponse(order, status, message, additionalProperties);
        }
    }
}
