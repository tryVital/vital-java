/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AnswerItem.Builder.class)
public final class AnswerItem {
    private final String valueString;

    private final Map<String, Object> additionalProperties;

    private AnswerItem(String valueString, Map<String, Object> additionalProperties) {
        this.valueString = valueString;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("valueString")
    public String getValueString() {
        return valueString;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AnswerItem && equalTo((AnswerItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AnswerItem other) {
        return valueString.equals(other.valueString);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.valueString);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ValueStringStage builder() {
        return new Builder();
    }

    public interface ValueStringStage {
        _FinalStage valueString(String valueString);

        Builder from(AnswerItem other);
    }

    public interface _FinalStage {
        AnswerItem build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ValueStringStage, _FinalStage {
        private String valueString;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(AnswerItem other) {
            valueString(other.getValueString());
            return this;
        }

        @Override
        @JsonSetter("valueString")
        public _FinalStage valueString(String valueString) {
            this.valueString = valueString;
            return this;
        }

        @Override
        public AnswerItem build() {
            return new AnswerItem(valueString, additionalProperties);
        }
    }
}
