/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingCriticalResult.Builder.class)
public final class ClientFacingCriticalResult {
    private final String orderId;

    private final String sampleId;

    private final String status;

    private final String interpretation;

    private final String teamId;

    private final String userId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private ClientFacingCriticalResult(
            String orderId,
            String sampleId,
            String status,
            String interpretation,
            String teamId,
            String userId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.orderId = orderId;
        this.sampleId = sampleId;
        this.status = status;
        this.interpretation = interpretation;
        this.teamId = teamId;
        this.userId = userId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Vital Order ID
     */
    @JsonProperty("order_id")
    public String getOrderId() {
        return orderId;
    }

    /**
     * @return Sample ID
     */
    @JsonProperty("sample_id")
    public String getSampleId() {
        return sampleId;
    }

    /**
     * @return The current results status, can be either (final, partial).
     */
    @JsonProperty("status")
    public String getStatus() {
        return status;
    }

    /**
     * @return The results interpretation, can be either (normal, abnormal, critical).
     */
    @JsonProperty("interpretation")
    public String getInterpretation() {
        return interpretation;
    }

    /**
     * @return Your team id.
     */
    @JsonProperty("team_id")
    public String getTeamId() {
        return teamId;
    }

    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    /**
     * @return When the result was first fetched from a laboratory.
     */
    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return When the result was last fetched from a laboratory.
     */
    @JsonProperty("updated_at")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingCriticalResult && equalTo((ClientFacingCriticalResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingCriticalResult other) {
        return orderId.equals(other.orderId)
                && sampleId.equals(other.sampleId)
                && status.equals(other.status)
                && interpretation.equals(other.interpretation)
                && teamId.equals(other.teamId)
                && userId.equals(other.userId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.orderId,
                this.sampleId,
                this.status,
                this.interpretation,
                this.teamId,
                this.userId,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OrderIdStage builder() {
        return new Builder();
    }

    public interface OrderIdStage {
        SampleIdStage orderId(String orderId);

        Builder from(ClientFacingCriticalResult other);
    }

    public interface SampleIdStage {
        StatusStage sampleId(String sampleId);
    }

    public interface StatusStage {
        InterpretationStage status(String status);
    }

    public interface InterpretationStage {
        TeamIdStage interpretation(String interpretation);
    }

    public interface TeamIdStage {
        UserIdStage teamId(String teamId);
    }

    public interface UserIdStage {
        CreatedAtStage userId(String userId);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        ClientFacingCriticalResult build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements OrderIdStage,
                    SampleIdStage,
                    StatusStage,
                    InterpretationStage,
                    TeamIdStage,
                    UserIdStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    _FinalStage {
        private String orderId;

        private String sampleId;

        private String status;

        private String interpretation;

        private String teamId;

        private String userId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingCriticalResult other) {
            orderId(other.getOrderId());
            sampleId(other.getSampleId());
            status(other.getStatus());
            interpretation(other.getInterpretation());
            teamId(other.getTeamId());
            userId(other.getUserId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        /**
         * <p>The Vital Order ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("order_id")
        public SampleIdStage orderId(String orderId) {
            this.orderId = orderId;
            return this;
        }

        /**
         * <p>Sample ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sample_id")
        public StatusStage sampleId(String sampleId) {
            this.sampleId = sampleId;
            return this;
        }

        /**
         * <p>The current results status, can be either (final, partial).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public InterpretationStage status(String status) {
            this.status = status;
            return this;
        }

        /**
         * <p>The results interpretation, can be either (normal, abnormal, critical).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("interpretation")
        public TeamIdStage interpretation(String interpretation) {
            this.interpretation = interpretation;
            return this;
        }

        /**
         * <p>Your team id.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("team_id")
        public UserIdStage teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("user_id")
        public CreatedAtStage userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * <p>When the result was first fetched from a laboratory.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("created_at")
        public UpdatedAtStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>When the result was last fetched from a laboratory.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updated_at")
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        public ClientFacingCriticalResult build() {
            return new ClientFacingCriticalResult(
                    orderId,
                    sampleId,
                    status,
                    interpretation,
                    teamId,
                    userId,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
