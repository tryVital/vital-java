/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = MenstrualFlowEntry.Builder.class)
public final class MenstrualFlowEntry {
    private final String date;

    private final MenstrualFlowEntryFlow flow;

    private final Map<String, Object> additionalProperties;

    private MenstrualFlowEntry(String date, MenstrualFlowEntryFlow flow, Map<String, Object> additionalProperties) {
        this.date = date;
        this.flow = flow;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("date")
    public String getDate() {
        return date;
    }

    @JsonProperty("flow")
    public MenstrualFlowEntryFlow getFlow() {
        return flow;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MenstrualFlowEntry && equalTo((MenstrualFlowEntry) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MenstrualFlowEntry other) {
        return date.equals(other.date) && flow.equals(other.flow);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.date, this.flow);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DateStage builder() {
        return new Builder();
    }

    public interface DateStage {
        FlowStage date(String date);

        Builder from(MenstrualFlowEntry other);
    }

    public interface FlowStage {
        _FinalStage flow(MenstrualFlowEntryFlow flow);
    }

    public interface _FinalStage {
        MenstrualFlowEntry build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DateStage, FlowStage, _FinalStage {
        private String date;

        private MenstrualFlowEntryFlow flow;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MenstrualFlowEntry other) {
            date(other.getDate());
            flow(other.getFlow());
            return this;
        }

        @java.lang.Override
        @JsonSetter("date")
        public FlowStage date(String date) {
            this.date = date;
            return this;
        }

        @java.lang.Override
        @JsonSetter("flow")
        public _FinalStage flow(MenstrualFlowEntryFlow flow) {
            this.flow = flow;
            return this;
        }

        @java.lang.Override
        public MenstrualFlowEntry build() {
            return new MenstrualFlowEntry(date, flow, additionalProperties);
        }
    }
}
