/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Reducer.Builder.class)
public final class Reducer {
    private final ReducerFunction function;

    private final Map<String, Object> additionalProperties;

    private Reducer(ReducerFunction function, Map<String, Object> additionalProperties) {
        this.function = function;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("function")
    public ReducerFunction getFunction() {
        return function;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Reducer && equalTo((Reducer) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Reducer other) {
        return function.equals(other.function);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.function);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FunctionStage builder() {
        return new Builder();
    }

    public interface FunctionStage {
        _FinalStage function(ReducerFunction function);

        Builder from(Reducer other);
    }

    public interface _FinalStage {
        Reducer build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FunctionStage, _FinalStage {
        private ReducerFunction function;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(Reducer other) {
            function(other.getFunction());
            return this;
        }

        @Override
        @JsonSetter("function")
        public _FinalStage function(ReducerFunction function) {
            this.function = function;
            return this;
        }

        @Override
        public Reducer build() {
            return new Reducer(function, additionalProperties);
        }
    }
}
