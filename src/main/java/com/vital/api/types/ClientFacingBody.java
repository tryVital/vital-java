/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingBody.Builder.class)
public final class ClientFacingBody {
    private final String id;

    private final String userId;

    private final OffsetDateTime date;

    private final String calendarDate;

    private final Optional<Double> weight;

    private final Optional<Double> fat;

    private final Optional<Double> waterPercentage;

    private final Optional<Double> muscleMassPercentage;

    private final Optional<Double> visceralFatIndex;

    private final Optional<Double> boneMassPercentage;

    private final Optional<Double> bodyMassIndex;

    private final Optional<Double> leanBodyMassKilogram;

    private final Optional<Double> waistCircumferenceCentimeter;

    private final ClientFacingSource source;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private ClientFacingBody(
            String id,
            String userId,
            OffsetDateTime date,
            String calendarDate,
            Optional<Double> weight,
            Optional<Double> fat,
            Optional<Double> waterPercentage,
            Optional<Double> muscleMassPercentage,
            Optional<Double> visceralFatIndex,
            Optional<Double> boneMassPercentage,
            Optional<Double> bodyMassIndex,
            Optional<Double> leanBodyMassKilogram,
            Optional<Double> waistCircumferenceCentimeter,
            ClientFacingSource source,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.userId = userId;
        this.date = date;
        this.calendarDate = calendarDate;
        this.weight = weight;
        this.fat = fat;
        this.waterPercentage = waterPercentage;
        this.muscleMassPercentage = muscleMassPercentage;
        this.visceralFatIndex = visceralFatIndex;
        this.boneMassPercentage = boneMassPercentage;
        this.bodyMassIndex = bodyMassIndex;
        this.leanBodyMassKilogram = leanBodyMassKilogram;
        this.waistCircumferenceCentimeter = waistCircumferenceCentimeter;
        this.source = source;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.
     */
    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    /**
     * @return Date of the specified record, formatted as ISO8601 datetime string in UTC 00:00. Deprecated in favour of calendar_date.
     */
    @JsonProperty("date")
    public OffsetDateTime getDate() {
        return date;
    }

    /**
     * @return Date of the summary in the YYYY-mm-dd format.
     */
    @JsonProperty("calendar_date")
    public String getCalendarDate() {
        return calendarDate;
    }

    /**
     * @return Weight in kg::kg
     */
    @JsonProperty("weight")
    public Optional<Double> getWeight() {
        return weight;
    }

    /**
     * @return Total body fat percentage::perc
     */
    @JsonProperty("fat")
    public Optional<Double> getFat() {
        return fat;
    }

    /**
     * @return Water percentage in the body::perc
     */
    @JsonProperty("water_percentage")
    public Optional<Double> getWaterPercentage() {
        return waterPercentage;
    }

    /**
     * @return Muscle mass percentage in the body::perc
     */
    @JsonProperty("muscle_mass_percentage")
    public Optional<Double> getMuscleMassPercentage() {
        return muscleMassPercentage;
    }

    /**
     * @return Visceral fat index::scalar
     */
    @JsonProperty("visceral_fat_index")
    public Optional<Double> getVisceralFatIndex() {
        return visceralFatIndex;
    }

    /**
     * @return Bone mass percentage in the body::perc
     */
    @JsonProperty("bone_mass_percentage")
    public Optional<Double> getBoneMassPercentage() {
        return boneMassPercentage;
    }

    @JsonProperty("body_mass_index")
    public Optional<Double> getBodyMassIndex() {
        return bodyMassIndex;
    }

    @JsonProperty("lean_body_mass_kilogram")
    public Optional<Double> getLeanBodyMassKilogram() {
        return leanBodyMassKilogram;
    }

    @JsonProperty("waist_circumference_centimeter")
    public Optional<Double> getWaistCircumferenceCentimeter() {
        return waistCircumferenceCentimeter;
    }

    @JsonProperty("source")
    public ClientFacingSource getSource() {
        return source;
    }

    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updated_at")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingBody && equalTo((ClientFacingBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingBody other) {
        return id.equals(other.id)
                && userId.equals(other.userId)
                && date.equals(other.date)
                && calendarDate.equals(other.calendarDate)
                && weight.equals(other.weight)
                && fat.equals(other.fat)
                && waterPercentage.equals(other.waterPercentage)
                && muscleMassPercentage.equals(other.muscleMassPercentage)
                && visceralFatIndex.equals(other.visceralFatIndex)
                && boneMassPercentage.equals(other.boneMassPercentage)
                && bodyMassIndex.equals(other.bodyMassIndex)
                && leanBodyMassKilogram.equals(other.leanBodyMassKilogram)
                && waistCircumferenceCentimeter.equals(other.waistCircumferenceCentimeter)
                && source.equals(other.source)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.userId,
                this.date,
                this.calendarDate,
                this.weight,
                this.fat,
                this.waterPercentage,
                this.muscleMassPercentage,
                this.visceralFatIndex,
                this.boneMassPercentage,
                this.bodyMassIndex,
                this.leanBodyMassKilogram,
                this.waistCircumferenceCentimeter,
                this.source,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        UserIdStage id(String id);

        Builder from(ClientFacingBody other);
    }

    public interface UserIdStage {
        DateStage userId(String userId);
    }

    public interface DateStage {
        CalendarDateStage date(OffsetDateTime date);
    }

    public interface CalendarDateStage {
        SourceStage calendarDate(String calendarDate);
    }

    public interface SourceStage {
        CreatedAtStage source(ClientFacingSource source);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        ClientFacingBody build();

        _FinalStage weight(Optional<Double> weight);

        _FinalStage weight(Double weight);

        _FinalStage fat(Optional<Double> fat);

        _FinalStage fat(Double fat);

        _FinalStage waterPercentage(Optional<Double> waterPercentage);

        _FinalStage waterPercentage(Double waterPercentage);

        _FinalStage muscleMassPercentage(Optional<Double> muscleMassPercentage);

        _FinalStage muscleMassPercentage(Double muscleMassPercentage);

        _FinalStage visceralFatIndex(Optional<Double> visceralFatIndex);

        _FinalStage visceralFatIndex(Double visceralFatIndex);

        _FinalStage boneMassPercentage(Optional<Double> boneMassPercentage);

        _FinalStage boneMassPercentage(Double boneMassPercentage);

        _FinalStage bodyMassIndex(Optional<Double> bodyMassIndex);

        _FinalStage bodyMassIndex(Double bodyMassIndex);

        _FinalStage leanBodyMassKilogram(Optional<Double> leanBodyMassKilogram);

        _FinalStage leanBodyMassKilogram(Double leanBodyMassKilogram);

        _FinalStage waistCircumferenceCentimeter(Optional<Double> waistCircumferenceCentimeter);

        _FinalStage waistCircumferenceCentimeter(Double waistCircumferenceCentimeter);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    UserIdStage,
                    DateStage,
                    CalendarDateStage,
                    SourceStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    _FinalStage {
        private String id;

        private String userId;

        private OffsetDateTime date;

        private String calendarDate;

        private ClientFacingSource source;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<Double> waistCircumferenceCentimeter = Optional.empty();

        private Optional<Double> leanBodyMassKilogram = Optional.empty();

        private Optional<Double> bodyMassIndex = Optional.empty();

        private Optional<Double> boneMassPercentage = Optional.empty();

        private Optional<Double> visceralFatIndex = Optional.empty();

        private Optional<Double> muscleMassPercentage = Optional.empty();

        private Optional<Double> waterPercentage = Optional.empty();

        private Optional<Double> fat = Optional.empty();

        private Optional<Double> weight = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingBody other) {
            id(other.getId());
            userId(other.getUserId());
            date(other.getDate());
            calendarDate(other.getCalendarDate());
            weight(other.getWeight());
            fat(other.getFat());
            waterPercentage(other.getWaterPercentage());
            muscleMassPercentage(other.getMuscleMassPercentage());
            visceralFatIndex(other.getVisceralFatIndex());
            boneMassPercentage(other.getBoneMassPercentage());
            bodyMassIndex(other.getBodyMassIndex());
            leanBodyMassKilogram(other.getLeanBodyMassKilogram());
            waistCircumferenceCentimeter(other.getWaistCircumferenceCentimeter());
            source(other.getSource());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public UserIdStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * <p>User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("user_id")
        public DateStage userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * <p>Date of the specified record, formatted as ISO8601 datetime string in UTC 00:00. Deprecated in favour of calendar_date.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("date")
        public CalendarDateStage date(OffsetDateTime date) {
            this.date = date;
            return this;
        }

        /**
         * <p>Date of the summary in the YYYY-mm-dd format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("calendar_date")
        public SourceStage calendarDate(String calendarDate) {
            this.calendarDate = calendarDate;
            return this;
        }

        @java.lang.Override
        @JsonSetter("source")
        public CreatedAtStage source(ClientFacingSource source) {
            this.source = source;
            return this;
        }

        @java.lang.Override
        @JsonSetter("created_at")
        public UpdatedAtStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("updated_at")
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage waistCircumferenceCentimeter(Double waistCircumferenceCentimeter) {
            this.waistCircumferenceCentimeter = Optional.of(waistCircumferenceCentimeter);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "waist_circumference_centimeter", nulls = Nulls.SKIP)
        public _FinalStage waistCircumferenceCentimeter(Optional<Double> waistCircumferenceCentimeter) {
            this.waistCircumferenceCentimeter = waistCircumferenceCentimeter;
            return this;
        }

        @java.lang.Override
        public _FinalStage leanBodyMassKilogram(Double leanBodyMassKilogram) {
            this.leanBodyMassKilogram = Optional.of(leanBodyMassKilogram);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lean_body_mass_kilogram", nulls = Nulls.SKIP)
        public _FinalStage leanBodyMassKilogram(Optional<Double> leanBodyMassKilogram) {
            this.leanBodyMassKilogram = leanBodyMassKilogram;
            return this;
        }

        @java.lang.Override
        public _FinalStage bodyMassIndex(Double bodyMassIndex) {
            this.bodyMassIndex = Optional.of(bodyMassIndex);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "body_mass_index", nulls = Nulls.SKIP)
        public _FinalStage bodyMassIndex(Optional<Double> bodyMassIndex) {
            this.bodyMassIndex = bodyMassIndex;
            return this;
        }

        /**
         * <p>Bone mass percentage in the body::perc</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage boneMassPercentage(Double boneMassPercentage) {
            this.boneMassPercentage = Optional.of(boneMassPercentage);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "bone_mass_percentage", nulls = Nulls.SKIP)
        public _FinalStage boneMassPercentage(Optional<Double> boneMassPercentage) {
            this.boneMassPercentage = boneMassPercentage;
            return this;
        }

        /**
         * <p>Visceral fat index::scalar</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage visceralFatIndex(Double visceralFatIndex) {
            this.visceralFatIndex = Optional.of(visceralFatIndex);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "visceral_fat_index", nulls = Nulls.SKIP)
        public _FinalStage visceralFatIndex(Optional<Double> visceralFatIndex) {
            this.visceralFatIndex = visceralFatIndex;
            return this;
        }

        /**
         * <p>Muscle mass percentage in the body::perc</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage muscleMassPercentage(Double muscleMassPercentage) {
            this.muscleMassPercentage = Optional.of(muscleMassPercentage);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "muscle_mass_percentage", nulls = Nulls.SKIP)
        public _FinalStage muscleMassPercentage(Optional<Double> muscleMassPercentage) {
            this.muscleMassPercentage = muscleMassPercentage;
            return this;
        }

        /**
         * <p>Water percentage in the body::perc</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage waterPercentage(Double waterPercentage) {
            this.waterPercentage = Optional.of(waterPercentage);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "water_percentage", nulls = Nulls.SKIP)
        public _FinalStage waterPercentage(Optional<Double> waterPercentage) {
            this.waterPercentage = waterPercentage;
            return this;
        }

        /**
         * <p>Total body fat percentage::perc</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fat(Double fat) {
            this.fat = Optional.of(fat);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fat", nulls = Nulls.SKIP)
        public _FinalStage fat(Optional<Double> fat) {
            this.fat = fat;
            return this;
        }

        /**
         * <p>Weight in kg::kg</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage weight(Double weight) {
            this.weight = Optional.of(weight);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "weight", nulls = Nulls.SKIP)
        public _FinalStage weight(Optional<Double> weight) {
            this.weight = weight;
            return this;
        }

        @java.lang.Override
        public ClientFacingBody build() {
            return new ClientFacingBody(
                    id,
                    userId,
                    date,
                    calendarDate,
                    weight,
                    fat,
                    waterPercentage,
                    muscleMassPercentage,
                    visceralFatIndex,
                    boneMassPercentage,
                    bodyMassIndex,
                    leanBodyMassKilogram,
                    waistCircumferenceCentimeter,
                    source,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
