/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = MissingBiomarkerResult.Builder.class)
public final class MissingBiomarkerResult {
    private final String name;

    private final String slug;

    private final FailureType reason;

    private final Optional<String> loinc;

    private final Optional<String> loincSlug;

    private final Optional<String> providerId;

    private final Map<String, Object> additionalProperties;

    private MissingBiomarkerResult(
            String name,
            String slug,
            FailureType reason,
            Optional<String> loinc,
            Optional<String> loincSlug,
            Optional<String> providerId,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.slug = slug;
        this.reason = reason;
        this.loinc = loinc;
        this.loincSlug = loincSlug;
        this.providerId = providerId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("slug")
    public String getSlug() {
        return slug;
    }

    @JsonProperty("reason")
    public FailureType getReason() {
        return reason;
    }

    @JsonProperty("loinc")
    public Optional<String> getLoinc() {
        return loinc;
    }

    @JsonProperty("loinc_slug")
    public Optional<String> getLoincSlug() {
        return loincSlug;
    }

    @JsonProperty("provider_id")
    public Optional<String> getProviderId() {
        return providerId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MissingBiomarkerResult && equalTo((MissingBiomarkerResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MissingBiomarkerResult other) {
        return name.equals(other.name)
                && slug.equals(other.slug)
                && reason.equals(other.reason)
                && loinc.equals(other.loinc)
                && loincSlug.equals(other.loincSlug)
                && providerId.equals(other.providerId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.slug, this.reason, this.loinc, this.loincSlug, this.providerId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        SlugStage name(String name);

        Builder from(MissingBiomarkerResult other);
    }

    public interface SlugStage {
        ReasonStage slug(String slug);
    }

    public interface ReasonStage {
        _FinalStage reason(FailureType reason);
    }

    public interface _FinalStage {
        MissingBiomarkerResult build();

        _FinalStage loinc(Optional<String> loinc);

        _FinalStage loinc(String loinc);

        _FinalStage loincSlug(Optional<String> loincSlug);

        _FinalStage loincSlug(String loincSlug);

        _FinalStage providerId(Optional<String> providerId);

        _FinalStage providerId(String providerId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, SlugStage, ReasonStage, _FinalStage {
        private String name;

        private String slug;

        private FailureType reason;

        private Optional<String> providerId = Optional.empty();

        private Optional<String> loincSlug = Optional.empty();

        private Optional<String> loinc = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MissingBiomarkerResult other) {
            name(other.getName());
            slug(other.getSlug());
            reason(other.getReason());
            loinc(other.getLoinc());
            loincSlug(other.getLoincSlug());
            providerId(other.getProviderId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public SlugStage name(String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("slug")
        public ReasonStage slug(String slug) {
            this.slug = slug;
            return this;
        }

        @java.lang.Override
        @JsonSetter("reason")
        public _FinalStage reason(FailureType reason) {
            this.reason = reason;
            return this;
        }

        @java.lang.Override
        public _FinalStage providerId(String providerId) {
            this.providerId = Optional.of(providerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "provider_id", nulls = Nulls.SKIP)
        public _FinalStage providerId(Optional<String> providerId) {
            this.providerId = providerId;
            return this;
        }

        @java.lang.Override
        public _FinalStage loincSlug(String loincSlug) {
            this.loincSlug = Optional.of(loincSlug);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "loinc_slug", nulls = Nulls.SKIP)
        public _FinalStage loincSlug(Optional<String> loincSlug) {
            this.loincSlug = loincSlug;
            return this;
        }

        @java.lang.Override
        public _FinalStage loinc(String loinc) {
            this.loinc = Optional.of(loinc);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "loinc", nulls = Nulls.SKIP)
        public _FinalStage loinc(Optional<String> loinc) {
            this.loinc = loinc;
            return this;
        }

        @java.lang.Override
        public MissingBiomarkerResult build() {
            return new MissingBiomarkerResult(name, slug, reason, loinc, loincSlug, providerId, additionalProperties);
        }
    }
}
