/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MissingBiomarkerResult.Builder.class)
public final class MissingBiomarkerResult {
    private final String name;

    private final String slug;

    private final FailureType inferredFailureType;

    private final Optional<String> note;

    private final Optional<String> loinc;

    private final Optional<String> loincSlug;

    private final Optional<String> providerId;

    private final Optional<List<ParentBiomarkerData>> sourceMarkers;

    private final Map<String, Object> additionalProperties;

    private MissingBiomarkerResult(
            String name,
            String slug,
            FailureType inferredFailureType,
            Optional<String> note,
            Optional<String> loinc,
            Optional<String> loincSlug,
            Optional<String> providerId,
            Optional<List<ParentBiomarkerData>> sourceMarkers,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.slug = slug;
        this.inferredFailureType = inferredFailureType;
        this.note = note;
        this.loinc = loinc;
        this.loincSlug = loincSlug;
        this.providerId = providerId;
        this.sourceMarkers = sourceMarkers;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("slug")
    public String getSlug() {
        return slug;
    }

    @JsonProperty("inferred_failure_type")
    public FailureType getInferredFailureType() {
        return inferredFailureType;
    }

    @JsonProperty("note")
    public Optional<String> getNote() {
        return note;
    }

    @JsonProperty("loinc")
    public Optional<String> getLoinc() {
        return loinc;
    }

    @JsonProperty("loinc_slug")
    public Optional<String> getLoincSlug() {
        return loincSlug;
    }

    @JsonProperty("provider_id")
    public Optional<String> getProviderId() {
        return providerId;
    }

    @JsonProperty("source_markers")
    public Optional<List<ParentBiomarkerData>> getSourceMarkers() {
        return sourceMarkers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MissingBiomarkerResult && equalTo((MissingBiomarkerResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MissingBiomarkerResult other) {
        return name.equals(other.name)
                && slug.equals(other.slug)
                && inferredFailureType.equals(other.inferredFailureType)
                && note.equals(other.note)
                && loinc.equals(other.loinc)
                && loincSlug.equals(other.loincSlug)
                && providerId.equals(other.providerId)
                && sourceMarkers.equals(other.sourceMarkers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.slug,
                this.inferredFailureType,
                this.note,
                this.loinc,
                this.loincSlug,
                this.providerId,
                this.sourceMarkers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        SlugStage name(@NotNull String name);

        Builder from(MissingBiomarkerResult other);
    }

    public interface SlugStage {
        InferredFailureTypeStage slug(@NotNull String slug);
    }

    public interface InferredFailureTypeStage {
        _FinalStage inferredFailureType(@NotNull FailureType inferredFailureType);
    }

    public interface _FinalStage {
        MissingBiomarkerResult build();

        _FinalStage note(Optional<String> note);

        _FinalStage note(String note);

        _FinalStage loinc(Optional<String> loinc);

        _FinalStage loinc(String loinc);

        _FinalStage loincSlug(Optional<String> loincSlug);

        _FinalStage loincSlug(String loincSlug);

        _FinalStage providerId(Optional<String> providerId);

        _FinalStage providerId(String providerId);

        _FinalStage sourceMarkers(Optional<List<ParentBiomarkerData>> sourceMarkers);

        _FinalStage sourceMarkers(List<ParentBiomarkerData> sourceMarkers);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, SlugStage, InferredFailureTypeStage, _FinalStage {
        private String name;

        private String slug;

        private FailureType inferredFailureType;

        private Optional<List<ParentBiomarkerData>> sourceMarkers = Optional.empty();

        private Optional<String> providerId = Optional.empty();

        private Optional<String> loincSlug = Optional.empty();

        private Optional<String> loinc = Optional.empty();

        private Optional<String> note = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MissingBiomarkerResult other) {
            name(other.getName());
            slug(other.getSlug());
            inferredFailureType(other.getInferredFailureType());
            note(other.getNote());
            loinc(other.getLoinc());
            loincSlug(other.getLoincSlug());
            providerId(other.getProviderId());
            sourceMarkers(other.getSourceMarkers());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public SlugStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("slug")
        public InferredFailureTypeStage slug(@NotNull String slug) {
            this.slug = Objects.requireNonNull(slug, "slug must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("inferred_failure_type")
        public _FinalStage inferredFailureType(@NotNull FailureType inferredFailureType) {
            this.inferredFailureType =
                    Objects.requireNonNull(inferredFailureType, "inferredFailureType must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage sourceMarkers(List<ParentBiomarkerData> sourceMarkers) {
            this.sourceMarkers = Optional.ofNullable(sourceMarkers);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source_markers", nulls = Nulls.SKIP)
        public _FinalStage sourceMarkers(Optional<List<ParentBiomarkerData>> sourceMarkers) {
            this.sourceMarkers = sourceMarkers;
            return this;
        }

        @java.lang.Override
        public _FinalStage providerId(String providerId) {
            this.providerId = Optional.ofNullable(providerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "provider_id", nulls = Nulls.SKIP)
        public _FinalStage providerId(Optional<String> providerId) {
            this.providerId = providerId;
            return this;
        }

        @java.lang.Override
        public _FinalStage loincSlug(String loincSlug) {
            this.loincSlug = Optional.ofNullable(loincSlug);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "loinc_slug", nulls = Nulls.SKIP)
        public _FinalStage loincSlug(Optional<String> loincSlug) {
            this.loincSlug = loincSlug;
            return this;
        }

        @java.lang.Override
        public _FinalStage loinc(String loinc) {
            this.loinc = Optional.ofNullable(loinc);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "loinc", nulls = Nulls.SKIP)
        public _FinalStage loinc(Optional<String> loinc) {
            this.loinc = loinc;
            return this;
        }

        @java.lang.Override
        public _FinalStage note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public _FinalStage note(Optional<String> note) {
            this.note = note;
            return this;
        }

        @java.lang.Override
        public MissingBiomarkerResult build() {
            return new MissingBiomarkerResult(
                    name,
                    slug,
                    inferredFailureType,
                    note,
                    loinc,
                    loincSlug,
                    providerId,
                    sourceMarkers,
                    additionalProperties);
        }
    }
}
