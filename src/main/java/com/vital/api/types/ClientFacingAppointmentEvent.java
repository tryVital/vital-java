/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingAppointmentEvent.Builder.class)
public final class ClientFacingAppointmentEvent {
    private final String createdAt;

    private final AppointmentEventStatus status;

    private final Optional<Map<String, Object>> data;

    private final Map<String, Object> additionalProperties;

    private ClientFacingAppointmentEvent(
            String createdAt,
            AppointmentEventStatus status,
            Optional<Map<String, Object>> data,
            Map<String, Object> additionalProperties) {
        this.createdAt = createdAt;
        this.status = status;
        this.data = data;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("created_at")
    public String getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("status")
    public AppointmentEventStatus getStatus() {
        return status;
    }

    @JsonProperty("data")
    public Optional<Map<String, Object>> getData() {
        return data;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingAppointmentEvent && equalTo((ClientFacingAppointmentEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingAppointmentEvent other) {
        return createdAt.equals(other.createdAt) && status.equals(other.status) && data.equals(other.data);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.createdAt, this.status, this.data);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CreatedAtStage builder() {
        return new Builder();
    }

    public interface CreatedAtStage {
        StatusStage createdAt(String createdAt);

        Builder from(ClientFacingAppointmentEvent other);
    }

    public interface StatusStage {
        _FinalStage status(AppointmentEventStatus status);
    }

    public interface _FinalStage {
        ClientFacingAppointmentEvent build();

        _FinalStage data(Optional<Map<String, Object>> data);

        _FinalStage data(Map<String, Object> data);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CreatedAtStage, StatusStage, _FinalStage {
        private String createdAt;

        private AppointmentEventStatus status;

        private Optional<Map<String, Object>> data = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingAppointmentEvent other) {
            createdAt(other.getCreatedAt());
            status(other.getStatus());
            data(other.getData());
            return this;
        }

        @java.lang.Override
        @JsonSetter("created_at")
        public StatusStage createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(AppointmentEventStatus status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        public _FinalStage data(Map<String, Object> data) {
            this.data = Optional.of(data);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public _FinalStage data(Optional<Map<String, Object>> data) {
            this.data = data;
            return this;
        }

        @java.lang.Override
        public ClientFacingAppointmentEvent build() {
            return new ClientFacingAppointmentEvent(createdAt, status, data, additionalProperties);
        }
    }
}
