/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetOrdersResponse.Builder.class)
public final class GetOrdersResponse {
    private final List<ClientFacingOrder> orders;

    private final Optional<Integer> total;

    private final Optional<Integer> page;

    private final Optional<Integer> size;

    private final Map<String, Object> additionalProperties;

    private GetOrdersResponse(
            List<ClientFacingOrder> orders,
            Optional<Integer> total,
            Optional<Integer> page,
            Optional<Integer> size,
            Map<String, Object> additionalProperties) {
        this.orders = orders;
        this.total = total;
        this.page = page;
        this.size = size;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("orders")
    public List<ClientFacingOrder> getOrders() {
        return orders;
    }

    @JsonProperty("total")
    public Optional<Integer> getTotal() {
        return total;
    }

    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    @JsonProperty("size")
    public Optional<Integer> getSize() {
        return size;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetOrdersResponse && equalTo((GetOrdersResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetOrdersResponse other) {
        return orders.equals(other.orders)
                && total.equals(other.total)
                && page.equals(other.page)
                && size.equals(other.size);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.orders, this.total, this.page, this.size);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<ClientFacingOrder> orders = new ArrayList<>();

        private Optional<Integer> total = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> size = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetOrdersResponse other) {
            orders(other.getOrders());
            total(other.getTotal());
            page(other.getPage());
            size(other.getSize());
            return this;
        }

        @JsonSetter(value = "orders", nulls = Nulls.SKIP)
        public Builder orders(List<ClientFacingOrder> orders) {
            this.orders.clear();
            this.orders.addAll(orders);
            return this;
        }

        public Builder addOrders(ClientFacingOrder orders) {
            this.orders.add(orders);
            return this;
        }

        public Builder addAllOrders(List<ClientFacingOrder> orders) {
            if (orders != null) {
                this.orders.addAll(orders);
            }
            return this;
        }

        @JsonSetter(value = "total", nulls = Nulls.SKIP)
        public Builder total(Optional<Integer> total) {
            this.total = total;
            return this;
        }

        public Builder total(Integer total) {
            this.total = Optional.ofNullable(total);
            return this;
        }

        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @JsonSetter(value = "size", nulls = Nulls.SKIP)
        public Builder size(Optional<Integer> size) {
            this.size = size;
            return this;
        }

        public Builder size(Integer size) {
            this.size = Optional.ofNullable(size);
            return this;
        }

        public GetOrdersResponse build() {
            return new GetOrdersResponse(orders, total, page, size, additionalProperties);
        }
    }
}
