/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SexualActivityEntry.Builder.class)
public final class SexualActivityEntry {
    private final String date;

    private final boolean protectionUsed;

    private final Map<String, Object> additionalProperties;

    private SexualActivityEntry(String date, boolean protectionUsed, Map<String, Object> additionalProperties) {
        this.date = date;
        this.protectionUsed = protectionUsed;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("date")
    public String getDate() {
        return date;
    }

    @JsonProperty("protection_used")
    public boolean getProtectionUsed() {
        return protectionUsed;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SexualActivityEntry && equalTo((SexualActivityEntry) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SexualActivityEntry other) {
        return date.equals(other.date) && protectionUsed == other.protectionUsed;
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.date, this.protectionUsed);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DateStage builder() {
        return new Builder();
    }

    public interface DateStage {
        ProtectionUsedStage date(String date);

        Builder from(SexualActivityEntry other);
    }

    public interface ProtectionUsedStage {
        _FinalStage protectionUsed(boolean protectionUsed);
    }

    public interface _FinalStage {
        SexualActivityEntry build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DateStage, ProtectionUsedStage, _FinalStage {
        private String date;

        private boolean protectionUsed;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(SexualActivityEntry other) {
            date(other.getDate());
            protectionUsed(other.getProtectionUsed());
            return this;
        }

        @Override
        @JsonSetter("date")
        public ProtectionUsedStage date(String date) {
            this.date = date;
            return this;
        }

        @Override
        @JsonSetter("protection_used")
        public _FinalStage protectionUsed(boolean protectionUsed) {
            this.protectionUsed = protectionUsed;
            return this;
        }

        @Override
        public SexualActivityEntry build() {
            return new SexualActivityEntry(date, protectionUsed, additionalProperties);
        }
    }
}
