/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PatientDetailsWithValidation.Builder.class)
public final class PatientDetailsWithValidation {
    private final String firstName;

    private final String lastName;

    private final String dob;

    private final Gender gender;

    private final String phoneNumber;

    private final String email;

    private final Optional<GuarantorDetails> medicalProxy;

    private final Optional<Race> race;

    private final Optional<Ethnicity> ethnicity;

    private final Optional<SexualOrientation> sexualOrientation;

    private final Optional<GenderIdentity> genderIdentity;

    private final Optional<Integer> householdIncome;

    private final Optional<Integer> householdSize;

    private final Map<String, Object> additionalProperties;

    private PatientDetailsWithValidation(
            String firstName,
            String lastName,
            String dob,
            Gender gender,
            String phoneNumber,
            String email,
            Optional<GuarantorDetails> medicalProxy,
            Optional<Race> race,
            Optional<Ethnicity> ethnicity,
            Optional<SexualOrientation> sexualOrientation,
            Optional<GenderIdentity> genderIdentity,
            Optional<Integer> householdIncome,
            Optional<Integer> householdSize,
            Map<String, Object> additionalProperties) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.dob = dob;
        this.gender = gender;
        this.phoneNumber = phoneNumber;
        this.email = email;
        this.medicalProxy = medicalProxy;
        this.race = race;
        this.ethnicity = ethnicity;
        this.sexualOrientation = sexualOrientation;
        this.genderIdentity = genderIdentity;
        this.householdIncome = householdIncome;
        this.householdSize = householdSize;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("first_name")
    public String getFirstName() {
        return firstName;
    }

    @JsonProperty("last_name")
    public String getLastName() {
        return lastName;
    }

    @JsonProperty("dob")
    public String getDob() {
        return dob;
    }

    @JsonProperty("gender")
    public Gender getGender() {
        return gender;
    }

    @JsonProperty("phone_number")
    public String getPhoneNumber() {
        return phoneNumber;
    }

    @JsonProperty("email")
    public String getEmail() {
        return email;
    }

    /**
     * @return Parent/medical_proxy details. Required if patient is a minor.
     */
    @JsonProperty("medical_proxy")
    public Optional<GuarantorDetails> getMedicalProxy() {
        return medicalProxy;
    }

    /**
     * @return If not provided, will be set to 'Not Specified'
     */
    @JsonProperty("race")
    public Optional<Race> getRace() {
        return race;
    }

    /**
     * @return If not provided, will be set to 'Not Specified'
     */
    @JsonProperty("ethnicity")
    public Optional<Ethnicity> getEthnicity() {
        return ethnicity;
    }

    /**
     * @return If not provided, will be set to 'Not Specified'
     */
    @JsonProperty("sexual_orientation")
    public Optional<SexualOrientation> getSexualOrientation() {
        return sexualOrientation;
    }

    /**
     * @return If not provided, will be set to 'Not Specified'
     */
    @JsonProperty("gender_identity")
    public Optional<GenderIdentity> getGenderIdentity() {
        return genderIdentity;
    }

    /**
     * @return Household income in USD. If not provided, will be set to None
     */
    @JsonProperty("household_income")
    public Optional<Integer> getHouseholdIncome() {
        return householdIncome;
    }

    /**
     * @return Household size. If not provided, will be set to None
     */
    @JsonProperty("household_size")
    public Optional<Integer> getHouseholdSize() {
        return householdSize;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PatientDetailsWithValidation && equalTo((PatientDetailsWithValidation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PatientDetailsWithValidation other) {
        return firstName.equals(other.firstName)
                && lastName.equals(other.lastName)
                && dob.equals(other.dob)
                && gender.equals(other.gender)
                && phoneNumber.equals(other.phoneNumber)
                && email.equals(other.email)
                && medicalProxy.equals(other.medicalProxy)
                && race.equals(other.race)
                && ethnicity.equals(other.ethnicity)
                && sexualOrientation.equals(other.sexualOrientation)
                && genderIdentity.equals(other.genderIdentity)
                && householdIncome.equals(other.householdIncome)
                && householdSize.equals(other.householdSize);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.firstName,
                this.lastName,
                this.dob,
                this.gender,
                this.phoneNumber,
                this.email,
                this.medicalProxy,
                this.race,
                this.ethnicity,
                this.sexualOrientation,
                this.genderIdentity,
                this.householdIncome,
                this.householdSize);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FirstNameStage builder() {
        return new Builder();
    }

    public interface FirstNameStage {
        LastNameStage firstName(@NotNull String firstName);

        Builder from(PatientDetailsWithValidation other);
    }

    public interface LastNameStage {
        DobStage lastName(@NotNull String lastName);
    }

    public interface DobStage {
        GenderStage dob(@NotNull String dob);
    }

    public interface GenderStage {
        PhoneNumberStage gender(@NotNull Gender gender);
    }

    public interface PhoneNumberStage {
        EmailStage phoneNumber(@NotNull String phoneNumber);
    }

    public interface EmailStage {
        _FinalStage email(@NotNull String email);
    }

    public interface _FinalStage {
        PatientDetailsWithValidation build();

        /**
         * <p>Parent/medical_proxy details. Required if patient is a minor.</p>
         */
        _FinalStage medicalProxy(Optional<GuarantorDetails> medicalProxy);

        _FinalStage medicalProxy(GuarantorDetails medicalProxy);

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         */
        _FinalStage race(Optional<Race> race);

        _FinalStage race(Race race);

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         */
        _FinalStage ethnicity(Optional<Ethnicity> ethnicity);

        _FinalStage ethnicity(Ethnicity ethnicity);

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         */
        _FinalStage sexualOrientation(Optional<SexualOrientation> sexualOrientation);

        _FinalStage sexualOrientation(SexualOrientation sexualOrientation);

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         */
        _FinalStage genderIdentity(Optional<GenderIdentity> genderIdentity);

        _FinalStage genderIdentity(GenderIdentity genderIdentity);

        /**
         * <p>Household income in USD. If not provided, will be set to None</p>
         */
        _FinalStage householdIncome(Optional<Integer> householdIncome);

        _FinalStage householdIncome(Integer householdIncome);

        /**
         * <p>Household size. If not provided, will be set to None</p>
         */
        _FinalStage householdSize(Optional<Integer> householdSize);

        _FinalStage householdSize(Integer householdSize);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements FirstNameStage, LastNameStage, DobStage, GenderStage, PhoneNumberStage, EmailStage, _FinalStage {
        private String firstName;

        private String lastName;

        private String dob;

        private Gender gender;

        private String phoneNumber;

        private String email;

        private Optional<Integer> householdSize = Optional.empty();

        private Optional<Integer> householdIncome = Optional.empty();

        private Optional<GenderIdentity> genderIdentity = Optional.empty();

        private Optional<SexualOrientation> sexualOrientation = Optional.empty();

        private Optional<Ethnicity> ethnicity = Optional.empty();

        private Optional<Race> race = Optional.empty();

        private Optional<GuarantorDetails> medicalProxy = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PatientDetailsWithValidation other) {
            firstName(other.getFirstName());
            lastName(other.getLastName());
            dob(other.getDob());
            gender(other.getGender());
            phoneNumber(other.getPhoneNumber());
            email(other.getEmail());
            medicalProxy(other.getMedicalProxy());
            race(other.getRace());
            ethnicity(other.getEthnicity());
            sexualOrientation(other.getSexualOrientation());
            genderIdentity(other.getGenderIdentity());
            householdIncome(other.getHouseholdIncome());
            householdSize(other.getHouseholdSize());
            return this;
        }

        @java.lang.Override
        @JsonSetter("first_name")
        public LastNameStage firstName(@NotNull String firstName) {
            this.firstName = Objects.requireNonNull(firstName, "firstName must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("last_name")
        public DobStage lastName(@NotNull String lastName) {
            this.lastName = Objects.requireNonNull(lastName, "lastName must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("dob")
        public GenderStage dob(@NotNull String dob) {
            this.dob = Objects.requireNonNull(dob, "dob must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("gender")
        public PhoneNumberStage gender(@NotNull Gender gender) {
            this.gender = Objects.requireNonNull(gender, "gender must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("phone_number")
        public EmailStage phoneNumber(@NotNull String phoneNumber) {
            this.phoneNumber = Objects.requireNonNull(phoneNumber, "phoneNumber must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("email")
        public _FinalStage email(@NotNull String email) {
            this.email = Objects.requireNonNull(email, "email must not be null");
            return this;
        }

        /**
         * <p>Household size. If not provided, will be set to None</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage householdSize(Integer householdSize) {
            this.householdSize = Optional.ofNullable(householdSize);
            return this;
        }

        /**
         * <p>Household size. If not provided, will be set to None</p>
         */
        @java.lang.Override
        @JsonSetter(value = "household_size", nulls = Nulls.SKIP)
        public _FinalStage householdSize(Optional<Integer> householdSize) {
            this.householdSize = householdSize;
            return this;
        }

        /**
         * <p>Household income in USD. If not provided, will be set to None</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage householdIncome(Integer householdIncome) {
            this.householdIncome = Optional.ofNullable(householdIncome);
            return this;
        }

        /**
         * <p>Household income in USD. If not provided, will be set to None</p>
         */
        @java.lang.Override
        @JsonSetter(value = "household_income", nulls = Nulls.SKIP)
        public _FinalStage householdIncome(Optional<Integer> householdIncome) {
            this.householdIncome = householdIncome;
            return this;
        }

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage genderIdentity(GenderIdentity genderIdentity) {
            this.genderIdentity = Optional.ofNullable(genderIdentity);
            return this;
        }

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         */
        @java.lang.Override
        @JsonSetter(value = "gender_identity", nulls = Nulls.SKIP)
        public _FinalStage genderIdentity(Optional<GenderIdentity> genderIdentity) {
            this.genderIdentity = genderIdentity;
            return this;
        }

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sexualOrientation(SexualOrientation sexualOrientation) {
            this.sexualOrientation = Optional.ofNullable(sexualOrientation);
            return this;
        }

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         */
        @java.lang.Override
        @JsonSetter(value = "sexual_orientation", nulls = Nulls.SKIP)
        public _FinalStage sexualOrientation(Optional<SexualOrientation> sexualOrientation) {
            this.sexualOrientation = sexualOrientation;
            return this;
        }

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ethnicity(Ethnicity ethnicity) {
            this.ethnicity = Optional.ofNullable(ethnicity);
            return this;
        }

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ethnicity", nulls = Nulls.SKIP)
        public _FinalStage ethnicity(Optional<Ethnicity> ethnicity) {
            this.ethnicity = ethnicity;
            return this;
        }

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage race(Race race) {
            this.race = Optional.ofNullable(race);
            return this;
        }

        /**
         * <p>If not provided, will be set to 'Not Specified'</p>
         */
        @java.lang.Override
        @JsonSetter(value = "race", nulls = Nulls.SKIP)
        public _FinalStage race(Optional<Race> race) {
            this.race = race;
            return this;
        }

        /**
         * <p>Parent/medical_proxy details. Required if patient is a minor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage medicalProxy(GuarantorDetails medicalProxy) {
            this.medicalProxy = Optional.ofNullable(medicalProxy);
            return this;
        }

        /**
         * <p>Parent/medical_proxy details. Required if patient is a minor.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "medical_proxy", nulls = Nulls.SKIP)
        public _FinalStage medicalProxy(Optional<GuarantorDetails> medicalProxy) {
            this.medicalProxy = medicalProxy;
            return this;
        }

        @java.lang.Override
        public PatientDetailsWithValidation build() {
            return new PatientDetailsWithValidation(
                    firstName,
                    lastName,
                    dob,
                    gender,
                    phoneNumber,
                    email,
                    medicalProxy,
                    race,
                    ethnicity,
                    sexualOrientation,
                    genderIdentity,
                    householdIncome,
                    householdSize,
                    additionalProperties);
        }
    }
}
