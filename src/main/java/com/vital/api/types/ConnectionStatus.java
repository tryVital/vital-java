/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ConnectionStatus.Builder.class)
public final class ConnectionStatus {
    private final boolean success;

    private final Optional<String> redirectUrl;

    private final ConnectionStatusState state;

    private final Optional<String> errorType;

    private final Optional<String> error;

    private final Map<String, Object> additionalProperties;

    private ConnectionStatus(
            boolean success,
            Optional<String> redirectUrl,
            ConnectionStatusState state,
            Optional<String> errorType,
            Optional<String> error,
            Map<String, Object> additionalProperties) {
        this.success = success;
        this.redirectUrl = redirectUrl;
        this.state = state;
        this.errorType = errorType;
        this.error = error;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("success")
    public boolean getSuccess() {
        return success;
    }

    @JsonProperty("redirect_url")
    public Optional<String> getRedirectUrl() {
        return redirectUrl;
    }

    @JsonProperty("state")
    public ConnectionStatusState getState() {
        return state;
    }

    @JsonProperty("error_type")
    public Optional<String> getErrorType() {
        return errorType;
    }

    @JsonProperty("error")
    public Optional<String> getError() {
        return error;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConnectionStatus && equalTo((ConnectionStatus) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConnectionStatus other) {
        return success == other.success
                && redirectUrl.equals(other.redirectUrl)
                && state.equals(other.state)
                && errorType.equals(other.errorType)
                && error.equals(other.error);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.success, this.redirectUrl, this.state, this.errorType, this.error);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SuccessStage builder() {
        return new Builder();
    }

    public interface SuccessStage {
        StateStage success(boolean success);

        Builder from(ConnectionStatus other);
    }

    public interface StateStage {
        _FinalStage state(ConnectionStatusState state);
    }

    public interface _FinalStage {
        ConnectionStatus build();

        _FinalStage redirectUrl(Optional<String> redirectUrl);

        _FinalStage redirectUrl(String redirectUrl);

        _FinalStage errorType(Optional<String> errorType);

        _FinalStage errorType(String errorType);

        _FinalStage error(Optional<String> error);

        _FinalStage error(String error);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SuccessStage, StateStage, _FinalStage {
        private boolean success;

        private ConnectionStatusState state;

        private Optional<String> error = Optional.empty();

        private Optional<String> errorType = Optional.empty();

        private Optional<String> redirectUrl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(ConnectionStatus other) {
            success(other.getSuccess());
            redirectUrl(other.getRedirectUrl());
            state(other.getState());
            errorType(other.getErrorType());
            error(other.getError());
            return this;
        }

        @Override
        @JsonSetter("success")
        public StateStage success(boolean success) {
            this.success = success;
            return this;
        }

        @Override
        @JsonSetter("state")
        public _FinalStage state(ConnectionStatusState state) {
            this.state = state;
            return this;
        }

        @Override
        public _FinalStage error(String error) {
            this.error = Optional.of(error);
            return this;
        }

        @Override
        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public _FinalStage error(Optional<String> error) {
            this.error = error;
            return this;
        }

        @Override
        public _FinalStage errorType(String errorType) {
            this.errorType = Optional.of(errorType);
            return this;
        }

        @Override
        @JsonSetter(value = "error_type", nulls = Nulls.SKIP)
        public _FinalStage errorType(Optional<String> errorType) {
            this.errorType = errorType;
            return this;
        }

        @Override
        public _FinalStage redirectUrl(String redirectUrl) {
            this.redirectUrl = Optional.of(redirectUrl);
            return this;
        }

        @Override
        @JsonSetter(value = "redirect_url", nulls = Nulls.SKIP)
        public _FinalStage redirectUrl(Optional<String> redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }

        @Override
        public ConnectionStatus build() {
            return new ConnectionStatus(success, redirectUrl, state, errorType, error, additionalProperties);
        }
    }
}
