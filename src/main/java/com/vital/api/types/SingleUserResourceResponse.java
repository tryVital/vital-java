/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SingleUserResourceResponse.Builder.class)
public final class SingleUserResourceResponse {
    private final String userId;

    private final Map<String, Map<String, SingleResourceStatistics>> provider;

    private final Map<String, Object> additionalProperties;

    private SingleUserResourceResponse(
            String userId,
            Map<String, Map<String, SingleResourceStatistics>> provider,
            Map<String, Object> additionalProperties) {
        this.userId = userId;
        this.provider = provider;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("provider")
    public Map<String, Map<String, SingleResourceStatistics>> getProvider() {
        return provider;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SingleUserResourceResponse && equalTo((SingleUserResourceResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SingleUserResourceResponse other) {
        return userId.equals(other.userId) && provider.equals(other.provider);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.userId, this.provider);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        _FinalStage userId(@NotNull String userId);

        Builder from(SingleUserResourceResponse other);
    }

    public interface _FinalStage {
        SingleUserResourceResponse build();

        _FinalStage provider(Map<String, Map<String, SingleResourceStatistics>> provider);

        _FinalStage putAllProvider(Map<String, Map<String, SingleResourceStatistics>> provider);

        _FinalStage provider(String key, Map<String, SingleResourceStatistics> value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UserIdStage, _FinalStage {
        private String userId;

        private Map<String, Map<String, SingleResourceStatistics>> provider = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SingleUserResourceResponse other) {
            userId(other.getUserId());
            provider(other.getProvider());
            return this;
        }

        @java.lang.Override
        @JsonSetter("user_id")
        public _FinalStage userId(@NotNull String userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage provider(String key, Map<String, SingleResourceStatistics> value) {
            this.provider.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllProvider(Map<String, Map<String, SingleResourceStatistics>> provider) {
            if (provider != null) {
                this.provider.putAll(provider);
            }
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "provider", nulls = Nulls.SKIP)
        public _FinalStage provider(Map<String, Map<String, SingleResourceStatistics>> provider) {
            this.provider.clear();
            this.provider.putAll(provider);
            return this;
        }

        @java.lang.Override
        public SingleUserResourceResponse build() {
            return new SingleUserResourceResponse(userId, provider, additionalProperties);
        }
    }
}
