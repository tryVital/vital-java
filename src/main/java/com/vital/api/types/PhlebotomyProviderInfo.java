/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PhlebotomyProviderInfo.Builder.class)
public final class PhlebotomyProviderInfo {
    private final AppointmentProvider name;

    private final List<AppointmentServiceType> serviceTypes;

    private final Map<String, Object> additionalProperties;

    private PhlebotomyProviderInfo(
            AppointmentProvider name,
            List<AppointmentServiceType> serviceTypes,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.serviceTypes = serviceTypes;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public AppointmentProvider getName() {
        return name;
    }

    @JsonProperty("service_types")
    public List<AppointmentServiceType> getServiceTypes() {
        return serviceTypes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PhlebotomyProviderInfo && equalTo((PhlebotomyProviderInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PhlebotomyProviderInfo other) {
        return name.equals(other.name) && serviceTypes.equals(other.serviceTypes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.serviceTypes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull AppointmentProvider name);

        Builder from(PhlebotomyProviderInfo other);
    }

    public interface _FinalStage {
        PhlebotomyProviderInfo build();

        _FinalStage serviceTypes(List<AppointmentServiceType> serviceTypes);

        _FinalStage addServiceTypes(AppointmentServiceType serviceTypes);

        _FinalStage addAllServiceTypes(List<AppointmentServiceType> serviceTypes);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private AppointmentProvider name;

        private List<AppointmentServiceType> serviceTypes = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PhlebotomyProviderInfo other) {
            name(other.getName());
            serviceTypes(other.getServiceTypes());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull AppointmentProvider name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllServiceTypes(List<AppointmentServiceType> serviceTypes) {
            if (serviceTypes != null) {
                this.serviceTypes.addAll(serviceTypes);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addServiceTypes(AppointmentServiceType serviceTypes) {
            this.serviceTypes.add(serviceTypes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "service_types", nulls = Nulls.SKIP)
        public _FinalStage serviceTypes(List<AppointmentServiceType> serviceTypes) {
            this.serviceTypes.clear();
            this.serviceTypes.addAll(serviceTypes);
            return this;
        }

        @java.lang.Override
        public PhlebotomyProviderInfo build() {
            return new PhlebotomyProviderInfo(name, serviceTypes, additionalProperties);
        }
    }
}
