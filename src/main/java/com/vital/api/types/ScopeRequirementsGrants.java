/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ScopeRequirementsGrants.Builder.class)
public final class ScopeRequirementsGrants {
    private final ScopeRequirementsStr userGranted;

    private final ScopeRequirementsStr userDenied;

    private final Map<String, Object> additionalProperties;

    private ScopeRequirementsGrants(
            ScopeRequirementsStr userGranted,
            ScopeRequirementsStr userDenied,
            Map<String, Object> additionalProperties) {
        this.userGranted = userGranted;
        this.userDenied = userDenied;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("user_granted")
    public ScopeRequirementsStr getUserGranted() {
        return userGranted;
    }

    @JsonProperty("user_denied")
    public ScopeRequirementsStr getUserDenied() {
        return userDenied;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ScopeRequirementsGrants && equalTo((ScopeRequirementsGrants) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ScopeRequirementsGrants other) {
        return userGranted.equals(other.userGranted) && userDenied.equals(other.userDenied);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.userGranted, this.userDenied);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserGrantedStage builder() {
        return new Builder();
    }

    public interface UserGrantedStage {
        UserDeniedStage userGranted(@NotNull ScopeRequirementsStr userGranted);

        Builder from(ScopeRequirementsGrants other);
    }

    public interface UserDeniedStage {
        _FinalStage userDenied(@NotNull ScopeRequirementsStr userDenied);
    }

    public interface _FinalStage {
        ScopeRequirementsGrants build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UserGrantedStage, UserDeniedStage, _FinalStage {
        private ScopeRequirementsStr userGranted;

        private ScopeRequirementsStr userDenied;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ScopeRequirementsGrants other) {
            userGranted(other.getUserGranted());
            userDenied(other.getUserDenied());
            return this;
        }

        @java.lang.Override
        @JsonSetter("user_granted")
        public UserDeniedStage userGranted(@NotNull ScopeRequirementsStr userGranted) {
            this.userGranted = Objects.requireNonNull(userGranted, "userGranted must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("user_denied")
        public _FinalStage userDenied(@NotNull ScopeRequirementsStr userDenied) {
            this.userDenied = Objects.requireNonNull(userDenied, "userDenied must not be null");
            return this;
        }

        @java.lang.Override
        public ScopeRequirementsGrants build() {
            return new ScopeRequirementsGrants(userGranted, userDenied, additionalProperties);
        }
    }
}
