/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = RelativeTimeframe.Builder.class)
public final class RelativeTimeframe {
    private final String anchor;

    private final Period past;

    private final Map<String, Object> additionalProperties;

    private RelativeTimeframe(String anchor, Period past, Map<String, Object> additionalProperties) {
        this.anchor = anchor;
        this.past = past;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public String getType() {
        return "relative";
    }

    @JsonProperty("anchor")
    public String getAnchor() {
        return anchor;
    }

    @JsonProperty("past")
    public Period getPast() {
        return past;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RelativeTimeframe && equalTo((RelativeTimeframe) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RelativeTimeframe other) {
        return anchor.equals(other.anchor) && past.equals(other.past);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.anchor, this.past);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AnchorStage builder() {
        return new Builder();
    }

    public interface AnchorStage {
        PastStage anchor(String anchor);

        Builder from(RelativeTimeframe other);
    }

    public interface PastStage {
        _FinalStage past(Period past);
    }

    public interface _FinalStage {
        RelativeTimeframe build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AnchorStage, PastStage, _FinalStage {
        private String anchor;

        private Period past;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(RelativeTimeframe other) {
            anchor(other.getAnchor());
            past(other.getPast());
            return this;
        }

        @Override
        @JsonSetter("anchor")
        public PastStage anchor(String anchor) {
            this.anchor = anchor;
            return this;
        }

        @Override
        @JsonSetter("past")
        public _FinalStage past(Period past) {
            this.past = past;
            return this;
        }

        @Override
        public RelativeTimeframe build() {
            return new RelativeTimeframe(anchor, past, additionalProperties);
        }
    }
}
