/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = IcdExcludesViolation.Builder.class)
public final class IcdExcludesViolation {
    private final String code;

    private final String conflictsWith;

    private final String type;

    private final Map<String, Object> additionalProperties;

    private IcdExcludesViolation(
            String code, String conflictsWith, String type, Map<String, Object> additionalProperties) {
        this.code = code;
        this.conflictsWith = conflictsWith;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("code")
    public String getCode() {
        return code;
    }

    @JsonProperty("conflicts_with")
    public String getConflictsWith() {
        return conflictsWith;
    }

    @JsonProperty("type")
    public String getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IcdExcludesViolation && equalTo((IcdExcludesViolation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IcdExcludesViolation other) {
        return code.equals(other.code) && conflictsWith.equals(other.conflictsWith) && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.code, this.conflictsWith, this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CodeStage builder() {
        return new Builder();
    }

    public interface CodeStage {
        ConflictsWithStage code(@NotNull String code);

        Builder from(IcdExcludesViolation other);
    }

    public interface ConflictsWithStage {
        TypeStage conflictsWith(@NotNull String conflictsWith);
    }

    public interface TypeStage {
        _FinalStage type(@NotNull String type);
    }

    public interface _FinalStage {
        IcdExcludesViolation build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CodeStage, ConflictsWithStage, TypeStage, _FinalStage {
        private String code;

        private String conflictsWith;

        private String type;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(IcdExcludesViolation other) {
            code(other.getCode());
            conflictsWith(other.getConflictsWith());
            type(other.getType());
            return this;
        }

        @java.lang.Override
        @JsonSetter("code")
        public ConflictsWithStage code(@NotNull String code) {
            this.code = Objects.requireNonNull(code, "code must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("conflicts_with")
        public TypeStage conflictsWith(@NotNull String conflictsWith) {
            this.conflictsWith = Objects.requireNonNull(conflictsWith, "conflictsWith must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        public IcdExcludesViolation build() {
            return new IcdExcludesViolation(code, conflictsWith, type, additionalProperties);
        }
    }
}
