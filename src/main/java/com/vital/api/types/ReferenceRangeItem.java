/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ReferenceRangeItem.Builder.class)
public final class ReferenceRangeItem {
    private final Low low;

    private final Optional<High> high;

    private final Map<String, Object> additionalProperties;

    private ReferenceRangeItem(Low low, Optional<High> high, Map<String, Object> additionalProperties) {
        this.low = low;
        this.high = high;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("low")
    public Low getLow() {
        return low;
    }

    @JsonProperty("high")
    public Optional<High> getHigh() {
        return high;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ReferenceRangeItem && equalTo((ReferenceRangeItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ReferenceRangeItem other) {
        return low.equals(other.low) && high.equals(other.high);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.low, this.high);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LowStage builder() {
        return new Builder();
    }

    public interface LowStage {
        _FinalStage low(Low low);

        Builder from(ReferenceRangeItem other);
    }

    public interface _FinalStage {
        ReferenceRangeItem build();

        _FinalStage high(Optional<High> high);

        _FinalStage high(High high);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LowStage, _FinalStage {
        private Low low;

        private Optional<High> high = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(ReferenceRangeItem other) {
            low(other.getLow());
            high(other.getHigh());
            return this;
        }

        @Override
        @JsonSetter("low")
        public _FinalStage low(Low low) {
            this.low = low;
            return this;
        }

        @Override
        public _FinalStage high(High high) {
            this.high = Optional.of(high);
            return this;
        }

        @Override
        @JsonSetter(value = "high", nulls = Nulls.SKIP)
        public _FinalStage high(Optional<High> high) {
            this.high = high;
            return this;
        }

        @Override
        public ReferenceRangeItem build() {
            return new ReferenceRangeItem(low, high, additionalProperties);
        }
    }
}
