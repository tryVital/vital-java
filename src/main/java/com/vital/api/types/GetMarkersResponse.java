/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetMarkersResponse.Builder.class)
public final class GetMarkersResponse {
    private final List<ClientFacingMarkerComplete> markers;

    private final Optional<Integer> total;

    private final Optional<Integer> page;

    private final Optional<Integer> size;

    private final Optional<Integer> pages;

    private final Map<String, Object> additionalProperties;

    private GetMarkersResponse(
            List<ClientFacingMarkerComplete> markers,
            Optional<Integer> total,
            Optional<Integer> page,
            Optional<Integer> size,
            Optional<Integer> pages,
            Map<String, Object> additionalProperties) {
        this.markers = markers;
        this.total = total;
        this.page = page;
        this.size = size;
        this.pages = pages;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("markers")
    public List<ClientFacingMarkerComplete> getMarkers() {
        return markers;
    }

    @JsonProperty("total")
    public Optional<Integer> getTotal() {
        return total;
    }

    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    @JsonProperty("size")
    public Optional<Integer> getSize() {
        return size;
    }

    @JsonProperty("pages")
    public Optional<Integer> getPages() {
        return pages;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetMarkersResponse && equalTo((GetMarkersResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetMarkersResponse other) {
        return markers.equals(other.markers)
                && total.equals(other.total)
                && page.equals(other.page)
                && size.equals(other.size)
                && pages.equals(other.pages);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.markers, this.total, this.page, this.size, this.pages);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<ClientFacingMarkerComplete> markers = new ArrayList<>();

        private Optional<Integer> total = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> size = Optional.empty();

        private Optional<Integer> pages = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetMarkersResponse other) {
            markers(other.getMarkers());
            total(other.getTotal());
            page(other.getPage());
            size(other.getSize());
            pages(other.getPages());
            return this;
        }

        @JsonSetter(value = "markers", nulls = Nulls.SKIP)
        public Builder markers(List<ClientFacingMarkerComplete> markers) {
            this.markers.clear();
            this.markers.addAll(markers);
            return this;
        }

        public Builder addMarkers(ClientFacingMarkerComplete markers) {
            this.markers.add(markers);
            return this;
        }

        public Builder addAllMarkers(List<ClientFacingMarkerComplete> markers) {
            if (markers != null) {
                this.markers.addAll(markers);
            }
            return this;
        }

        @JsonSetter(value = "total", nulls = Nulls.SKIP)
        public Builder total(Optional<Integer> total) {
            this.total = total;
            return this;
        }

        public Builder total(Integer total) {
            this.total = Optional.ofNullable(total);
            return this;
        }

        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @JsonSetter(value = "size", nulls = Nulls.SKIP)
        public Builder size(Optional<Integer> size) {
            this.size = size;
            return this;
        }

        public Builder size(Integer size) {
            this.size = Optional.ofNullable(size);
            return this;
        }

        @JsonSetter(value = "pages", nulls = Nulls.SKIP)
        public Builder pages(Optional<Integer> pages) {
            this.pages = pages;
            return this;
        }

        public Builder pages(Integer pages) {
            this.pages = Optional.ofNullable(pages);
            return this;
        }

        public GetMarkersResponse build() {
            return new GetMarkersResponse(markers, total, page, size, pages, additionalProperties);
        }
    }
}
