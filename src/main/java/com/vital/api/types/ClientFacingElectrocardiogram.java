/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientFacingElectrocardiogram.Builder.class)
public final class ClientFacingElectrocardiogram {
    private final String id;

    private final OffsetDateTime sessionStart;

    private final OffsetDateTime sessionEnd;

    private final int voltageSampleCount;

    private final Optional<Integer> heartRateMean;

    private final Optional<Double> samplingFrequencyHz;

    private final Optional<ClientFacingElectrocardiogramClassification> classification;

    private final Optional<ClientFacingElectrocardiogramInconclusiveCause> inconclusiveCause;

    private final Optional<String> algorithmVersion;

    private final Optional<String> timeZone;

    private final ClientFacingElectrocardiogramSourceProvider sourceProvider;

    private final ClientFacingElectrocardiogramSourceType sourceType;

    private final Optional<String> sourceAppId;

    private final Optional<String> sourceDeviceModel;

    private final Optional<String> sourceDeviceId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final String userId;

    private final ClientFacingSource source;

    private final Map<String, Object> additionalProperties;

    private ClientFacingElectrocardiogram(
            String id,
            OffsetDateTime sessionStart,
            OffsetDateTime sessionEnd,
            int voltageSampleCount,
            Optional<Integer> heartRateMean,
            Optional<Double> samplingFrequencyHz,
            Optional<ClientFacingElectrocardiogramClassification> classification,
            Optional<ClientFacingElectrocardiogramInconclusiveCause> inconclusiveCause,
            Optional<String> algorithmVersion,
            Optional<String> timeZone,
            ClientFacingElectrocardiogramSourceProvider sourceProvider,
            ClientFacingElectrocardiogramSourceType sourceType,
            Optional<String> sourceAppId,
            Optional<String> sourceDeviceModel,
            Optional<String> sourceDeviceId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            String userId,
            ClientFacingSource source,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.sessionStart = sessionStart;
        this.sessionEnd = sessionEnd;
        this.voltageSampleCount = voltageSampleCount;
        this.heartRateMean = heartRateMean;
        this.samplingFrequencyHz = samplingFrequencyHz;
        this.classification = classification;
        this.inconclusiveCause = inconclusiveCause;
        this.algorithmVersion = algorithmVersion;
        this.timeZone = timeZone;
        this.sourceProvider = sourceProvider;
        this.sourceType = sourceType;
        this.sourceAppId = sourceAppId;
        this.sourceDeviceModel = sourceDeviceModel;
        this.sourceDeviceId = sourceDeviceId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.userId = userId;
        this.source = source;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("session_start")
    public OffsetDateTime getSessionStart() {
        return sessionStart;
    }

    @JsonProperty("session_end")
    public OffsetDateTime getSessionEnd() {
        return sessionEnd;
    }

    @JsonProperty("voltage_sample_count")
    public int getVoltageSampleCount() {
        return voltageSampleCount;
    }

    @JsonProperty("heart_rate_mean")
    public Optional<Integer> getHeartRateMean() {
        return heartRateMean;
    }

    @JsonProperty("sampling_frequency_hz")
    public Optional<Double> getSamplingFrequencyHz() {
        return samplingFrequencyHz;
    }

    /**
     * @return ℹ️ This enum is non-exhaustive.
     */
    @JsonProperty("classification")
    public Optional<ClientFacingElectrocardiogramClassification> getClassification() {
        return classification;
    }

    /**
     * @return ℹ️ This enum is non-exhaustive.
     */
    @JsonProperty("inconclusive_cause")
    public Optional<ClientFacingElectrocardiogramInconclusiveCause> getInconclusiveCause() {
        return inconclusiveCause;
    }

    @JsonProperty("algorithm_version")
    public Optional<String> getAlgorithmVersion() {
        return algorithmVersion;
    }

    @JsonProperty("time_zone")
    public Optional<String> getTimeZone() {
        return timeZone;
    }

    @JsonProperty("source_provider")
    public ClientFacingElectrocardiogramSourceProvider getSourceProvider() {
        return sourceProvider;
    }

    /**
     * @return ℹ️ This enum is non-exhaustive.
     */
    @JsonProperty("source_type")
    public ClientFacingElectrocardiogramSourceType getSourceType() {
        return sourceType;
    }

    @JsonProperty("source_app_id")
    public Optional<String> getSourceAppId() {
        return sourceAppId;
    }

    @JsonProperty("source_device_model")
    public Optional<String> getSourceDeviceModel() {
        return sourceDeviceModel;
    }

    @JsonProperty("source_device_id")
    public Optional<String> getSourceDeviceId() {
        return sourceDeviceId;
    }

    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updated_at")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("source")
    public ClientFacingSource getSource() {
        return source;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingElectrocardiogram && equalTo((ClientFacingElectrocardiogram) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingElectrocardiogram other) {
        return id.equals(other.id)
                && sessionStart.equals(other.sessionStart)
                && sessionEnd.equals(other.sessionEnd)
                && voltageSampleCount == other.voltageSampleCount
                && heartRateMean.equals(other.heartRateMean)
                && samplingFrequencyHz.equals(other.samplingFrequencyHz)
                && classification.equals(other.classification)
                && inconclusiveCause.equals(other.inconclusiveCause)
                && algorithmVersion.equals(other.algorithmVersion)
                && timeZone.equals(other.timeZone)
                && sourceProvider.equals(other.sourceProvider)
                && sourceType.equals(other.sourceType)
                && sourceAppId.equals(other.sourceAppId)
                && sourceDeviceModel.equals(other.sourceDeviceModel)
                && sourceDeviceId.equals(other.sourceDeviceId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && userId.equals(other.userId)
                && source.equals(other.source);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.sessionStart,
                this.sessionEnd,
                this.voltageSampleCount,
                this.heartRateMean,
                this.samplingFrequencyHz,
                this.classification,
                this.inconclusiveCause,
                this.algorithmVersion,
                this.timeZone,
                this.sourceProvider,
                this.sourceType,
                this.sourceAppId,
                this.sourceDeviceModel,
                this.sourceDeviceId,
                this.createdAt,
                this.updatedAt,
                this.userId,
                this.source);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        SessionStartStage id(@NotNull String id);

        Builder from(ClientFacingElectrocardiogram other);
    }

    public interface SessionStartStage {
        SessionEndStage sessionStart(@NotNull OffsetDateTime sessionStart);
    }

    public interface SessionEndStage {
        VoltageSampleCountStage sessionEnd(@NotNull OffsetDateTime sessionEnd);
    }

    public interface VoltageSampleCountStage {
        SourceProviderStage voltageSampleCount(int voltageSampleCount);
    }

    public interface SourceProviderStage {
        SourceTypeStage sourceProvider(@NotNull ClientFacingElectrocardiogramSourceProvider sourceProvider);
    }

    public interface SourceTypeStage {
        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         */
        CreatedAtStage sourceType(@NotNull ClientFacingElectrocardiogramSourceType sourceType);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        UserIdStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface UserIdStage {
        SourceStage userId(@NotNull String userId);
    }

    public interface SourceStage {
        _FinalStage source(@NotNull ClientFacingSource source);
    }

    public interface _FinalStage {
        ClientFacingElectrocardiogram build();

        _FinalStage heartRateMean(Optional<Integer> heartRateMean);

        _FinalStage heartRateMean(Integer heartRateMean);

        _FinalStage samplingFrequencyHz(Optional<Double> samplingFrequencyHz);

        _FinalStage samplingFrequencyHz(Double samplingFrequencyHz);

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         */
        _FinalStage classification(Optional<ClientFacingElectrocardiogramClassification> classification);

        _FinalStage classification(ClientFacingElectrocardiogramClassification classification);

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         */
        _FinalStage inconclusiveCause(Optional<ClientFacingElectrocardiogramInconclusiveCause> inconclusiveCause);

        _FinalStage inconclusiveCause(ClientFacingElectrocardiogramInconclusiveCause inconclusiveCause);

        _FinalStage algorithmVersion(Optional<String> algorithmVersion);

        _FinalStage algorithmVersion(String algorithmVersion);

        _FinalStage timeZone(Optional<String> timeZone);

        _FinalStage timeZone(String timeZone);

        _FinalStage sourceAppId(Optional<String> sourceAppId);

        _FinalStage sourceAppId(String sourceAppId);

        _FinalStage sourceDeviceModel(Optional<String> sourceDeviceModel);

        _FinalStage sourceDeviceModel(String sourceDeviceModel);

        _FinalStage sourceDeviceId(Optional<String> sourceDeviceId);

        _FinalStage sourceDeviceId(String sourceDeviceId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    SessionStartStage,
                    SessionEndStage,
                    VoltageSampleCountStage,
                    SourceProviderStage,
                    SourceTypeStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    UserIdStage,
                    SourceStage,
                    _FinalStage {
        private String id;

        private OffsetDateTime sessionStart;

        private OffsetDateTime sessionEnd;

        private int voltageSampleCount;

        private ClientFacingElectrocardiogramSourceProvider sourceProvider;

        private ClientFacingElectrocardiogramSourceType sourceType;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private String userId;

        private ClientFacingSource source;

        private Optional<String> sourceDeviceId = Optional.empty();

        private Optional<String> sourceDeviceModel = Optional.empty();

        private Optional<String> sourceAppId = Optional.empty();

        private Optional<String> timeZone = Optional.empty();

        private Optional<String> algorithmVersion = Optional.empty();

        private Optional<ClientFacingElectrocardiogramInconclusiveCause> inconclusiveCause = Optional.empty();

        private Optional<ClientFacingElectrocardiogramClassification> classification = Optional.empty();

        private Optional<Double> samplingFrequencyHz = Optional.empty();

        private Optional<Integer> heartRateMean = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingElectrocardiogram other) {
            id(other.getId());
            sessionStart(other.getSessionStart());
            sessionEnd(other.getSessionEnd());
            voltageSampleCount(other.getVoltageSampleCount());
            heartRateMean(other.getHeartRateMean());
            samplingFrequencyHz(other.getSamplingFrequencyHz());
            classification(other.getClassification());
            inconclusiveCause(other.getInconclusiveCause());
            algorithmVersion(other.getAlgorithmVersion());
            timeZone(other.getTimeZone());
            sourceProvider(other.getSourceProvider());
            sourceType(other.getSourceType());
            sourceAppId(other.getSourceAppId());
            sourceDeviceModel(other.getSourceDeviceModel());
            sourceDeviceId(other.getSourceDeviceId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            userId(other.getUserId());
            source(other.getSource());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public SessionStartStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("session_start")
        public SessionEndStage sessionStart(@NotNull OffsetDateTime sessionStart) {
            this.sessionStart = Objects.requireNonNull(sessionStart, "sessionStart must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("session_end")
        public VoltageSampleCountStage sessionEnd(@NotNull OffsetDateTime sessionEnd) {
            this.sessionEnd = Objects.requireNonNull(sessionEnd, "sessionEnd must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("voltage_sample_count")
        public SourceProviderStage voltageSampleCount(int voltageSampleCount) {
            this.voltageSampleCount = voltageSampleCount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("source_provider")
        public SourceTypeStage sourceProvider(@NotNull ClientFacingElectrocardiogramSourceProvider sourceProvider) {
            this.sourceProvider = Objects.requireNonNull(sourceProvider, "sourceProvider must not be null");
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("source_type")
        public CreatedAtStage sourceType(@NotNull ClientFacingElectrocardiogramSourceType sourceType) {
            this.sourceType = Objects.requireNonNull(sourceType, "sourceType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("created_at")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updated_at")
        public UserIdStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("user_id")
        public SourceStage userId(@NotNull String userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("source")
        public _FinalStage source(@NotNull ClientFacingSource source) {
            this.source = Objects.requireNonNull(source, "source must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage sourceDeviceId(String sourceDeviceId) {
            this.sourceDeviceId = Optional.ofNullable(sourceDeviceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source_device_id", nulls = Nulls.SKIP)
        public _FinalStage sourceDeviceId(Optional<String> sourceDeviceId) {
            this.sourceDeviceId = sourceDeviceId;
            return this;
        }

        @java.lang.Override
        public _FinalStage sourceDeviceModel(String sourceDeviceModel) {
            this.sourceDeviceModel = Optional.ofNullable(sourceDeviceModel);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source_device_model", nulls = Nulls.SKIP)
        public _FinalStage sourceDeviceModel(Optional<String> sourceDeviceModel) {
            this.sourceDeviceModel = sourceDeviceModel;
            return this;
        }

        @java.lang.Override
        public _FinalStage sourceAppId(String sourceAppId) {
            this.sourceAppId = Optional.ofNullable(sourceAppId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source_app_id", nulls = Nulls.SKIP)
        public _FinalStage sourceAppId(Optional<String> sourceAppId) {
            this.sourceAppId = sourceAppId;
            return this;
        }

        @java.lang.Override
        public _FinalStage timeZone(String timeZone) {
            this.timeZone = Optional.ofNullable(timeZone);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "time_zone", nulls = Nulls.SKIP)
        public _FinalStage timeZone(Optional<String> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        @java.lang.Override
        public _FinalStage algorithmVersion(String algorithmVersion) {
            this.algorithmVersion = Optional.ofNullable(algorithmVersion);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "algorithm_version", nulls = Nulls.SKIP)
        public _FinalStage algorithmVersion(Optional<String> algorithmVersion) {
            this.algorithmVersion = algorithmVersion;
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage inconclusiveCause(ClientFacingElectrocardiogramInconclusiveCause inconclusiveCause) {
            this.inconclusiveCause = Optional.ofNullable(inconclusiveCause);
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "inconclusive_cause", nulls = Nulls.SKIP)
        public _FinalStage inconclusiveCause(
                Optional<ClientFacingElectrocardiogramInconclusiveCause> inconclusiveCause) {
            this.inconclusiveCause = inconclusiveCause;
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage classification(ClientFacingElectrocardiogramClassification classification) {
            this.classification = Optional.ofNullable(classification);
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "classification", nulls = Nulls.SKIP)
        public _FinalStage classification(Optional<ClientFacingElectrocardiogramClassification> classification) {
            this.classification = classification;
            return this;
        }

        @java.lang.Override
        public _FinalStage samplingFrequencyHz(Double samplingFrequencyHz) {
            this.samplingFrequencyHz = Optional.ofNullable(samplingFrequencyHz);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sampling_frequency_hz", nulls = Nulls.SKIP)
        public _FinalStage samplingFrequencyHz(Optional<Double> samplingFrequencyHz) {
            this.samplingFrequencyHz = samplingFrequencyHz;
            return this;
        }

        @java.lang.Override
        public _FinalStage heartRateMean(Integer heartRateMean) {
            this.heartRateMean = Optional.ofNullable(heartRateMean);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "heart_rate_mean", nulls = Nulls.SKIP)
        public _FinalStage heartRateMean(Optional<Integer> heartRateMean) {
            this.heartRateMean = heartRateMean;
            return this;
        }

        @java.lang.Override
        public ClientFacingElectrocardiogram build() {
            return new ClientFacingElectrocardiogram(
                    id,
                    sessionStart,
                    sessionEnd,
                    voltageSampleCount,
                    heartRateMean,
                    samplingFrequencyHz,
                    classification,
                    inconclusiveCause,
                    algorithmVersion,
                    timeZone,
                    sourceProvider,
                    sourceType,
                    sourceAppId,
                    sourceDeviceModel,
                    sourceDeviceId,
                    createdAt,
                    updatedAt,
                    userId,
                    source,
                    additionalProperties);
        }
    }
}
