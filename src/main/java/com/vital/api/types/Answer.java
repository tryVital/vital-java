/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Answer.Builder.class)
public final class Answer {
    private final int id;

    private final String code;

    private final String value;

    private final Map<String, Object> additionalProperties;

    private Answer(int id, String code, String value, Map<String, Object> additionalProperties) {
        this.id = id;
        this.code = code;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public int getId() {
        return id;
    }

    @JsonProperty("code")
    public String getCode() {
        return code;
    }

    @JsonProperty("value")
    public String getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Answer && equalTo((Answer) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Answer other) {
        return id == other.id && code.equals(other.code) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.code, this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        CodeStage id(int id);

        Builder from(Answer other);
    }

    public interface CodeStage {
        ValueStage code(@NotNull String code);
    }

    public interface ValueStage {
        _FinalStage value(@NotNull String value);
    }

    public interface _FinalStage {
        Answer build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, CodeStage, ValueStage, _FinalStage {
        private int id;

        private String code;

        private String value;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Answer other) {
            id(other.getId());
            code(other.getCode());
            value(other.getValue());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public CodeStage id(int id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("code")
        public ValueStage code(@NotNull String code) {
            this.code = Objects.requireNonNull(code, "code must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("value")
        public _FinalStage value(@NotNull String value) {
            this.value = Objects.requireNonNull(value, "value must not be null");
            return this;
        }

        @java.lang.Override
        public Answer build() {
            return new Answer(id, code, value, additionalProperties);
        }
    }
}
