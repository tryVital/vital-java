/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = QueryInstruction.Builder.class)
public final class QueryInstruction {
    private final List<QueryInstructionSelectItem> select;

    private final List<QueryInstructionGroupByItem> groupBy;

    private final Optional<Boolean> splitBySource;

    private final Map<String, Object> additionalProperties;

    private QueryInstruction(
            List<QueryInstructionSelectItem> select,
            List<QueryInstructionGroupByItem> groupBy,
            Optional<Boolean> splitBySource,
            Map<String, Object> additionalProperties) {
        this.select = select;
        this.groupBy = groupBy;
        this.splitBySource = splitBySource;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("select")
    public List<QueryInstructionSelectItem> getSelect() {
        return select;
    }

    @JsonProperty("group_by")
    public List<QueryInstructionGroupByItem> getGroupBy() {
        return groupBy;
    }

    @JsonProperty("split_by_source")
    public Optional<Boolean> getSplitBySource() {
        return splitBySource;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryInstruction && equalTo((QueryInstruction) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryInstruction other) {
        return select.equals(other.select)
                && groupBy.equals(other.groupBy)
                && splitBySource.equals(other.splitBySource);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.select, this.groupBy, this.splitBySource);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<QueryInstructionSelectItem> select = new ArrayList<>();

        private List<QueryInstructionGroupByItem> groupBy = new ArrayList<>();

        private Optional<Boolean> splitBySource = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryInstruction other) {
            select(other.getSelect());
            groupBy(other.getGroupBy());
            splitBySource(other.getSplitBySource());
            return this;
        }

        @JsonSetter(value = "select", nulls = Nulls.SKIP)
        public Builder select(List<QueryInstructionSelectItem> select) {
            this.select.clear();
            this.select.addAll(select);
            return this;
        }

        public Builder addSelect(QueryInstructionSelectItem select) {
            this.select.add(select);
            return this;
        }

        public Builder addAllSelect(List<QueryInstructionSelectItem> select) {
            this.select.addAll(select);
            return this;
        }

        @JsonSetter(value = "group_by", nulls = Nulls.SKIP)
        public Builder groupBy(List<QueryInstructionGroupByItem> groupBy) {
            this.groupBy.clear();
            this.groupBy.addAll(groupBy);
            return this;
        }

        public Builder addGroupBy(QueryInstructionGroupByItem groupBy) {
            this.groupBy.add(groupBy);
            return this;
        }

        public Builder addAllGroupBy(List<QueryInstructionGroupByItem> groupBy) {
            this.groupBy.addAll(groupBy);
            return this;
        }

        @JsonSetter(value = "split_by_source", nulls = Nulls.SKIP)
        public Builder splitBySource(Optional<Boolean> splitBySource) {
            this.splitBySource = splitBySource;
            return this;
        }

        public Builder splitBySource(Boolean splitBySource) {
            this.splitBySource = Optional.of(splitBySource);
            return this;
        }

        public QueryInstruction build() {
            return new QueryInstruction(select, groupBy, splitBySource, additionalProperties);
        }
    }
}
