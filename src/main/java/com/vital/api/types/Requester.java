/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Requester.Builder.class)
public final class Requester {
    private final String reference;

    private final Optional<String> display;

    private final Map<String, Object> additionalProperties;

    private Requester(String reference, Optional<String> display, Map<String, Object> additionalProperties) {
        this.reference = reference;
        this.display = display;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("reference")
    public String getReference() {
        return reference;
    }

    @JsonProperty("display")
    public Optional<String> getDisplay() {
        return display;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Requester && equalTo((Requester) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Requester other) {
        return reference.equals(other.reference) && display.equals(other.display);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.reference, this.display);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ReferenceStage builder() {
        return new Builder();
    }

    public interface ReferenceStage {
        _FinalStage reference(String reference);

        Builder from(Requester other);
    }

    public interface _FinalStage {
        Requester build();

        _FinalStage display(Optional<String> display);

        _FinalStage display(String display);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ReferenceStage, _FinalStage {
        private String reference;

        private Optional<String> display = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(Requester other) {
            reference(other.getReference());
            display(other.getDisplay());
            return this;
        }

        @Override
        @JsonSetter("reference")
        public _FinalStage reference(String reference) {
            this.reference = reference;
            return this;
        }

        @Override
        public _FinalStage display(String display) {
            this.display = Optional.of(display);
            return this;
        }

        @Override
        @JsonSetter(value = "display", nulls = Nulls.SKIP)
        public _FinalStage display(Optional<String> display) {
            this.display = display;
            return this;
        }

        @Override
        public Requester build() {
            return new Requester(reference, display, additionalProperties);
        }
    }
}
