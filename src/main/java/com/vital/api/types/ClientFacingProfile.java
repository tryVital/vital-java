/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingProfile.Builder.class)
public final class ClientFacingProfile {
    private final String id;

    private final String userId;

    private final Optional<Integer> height;

    private final Optional<String> birthDate;

    private final Optional<Boolean> wheelchairUse;

    private final Optional<Gender> gender;

    private final Optional<Sex> sex;

    private final ClientFacingSource source;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private ClientFacingProfile(
            String id,
            String userId,
            Optional<Integer> height,
            Optional<String> birthDate,
            Optional<Boolean> wheelchairUse,
            Optional<Gender> gender,
            Optional<Sex> sex,
            ClientFacingSource source,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.userId = userId;
        this.height = height;
        this.birthDate = birthDate;
        this.wheelchairUse = wheelchairUse;
        this.gender = gender;
        this.sex = sex;
        this.source = source;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.
     */
    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("height")
    public Optional<Integer> getHeight() {
        return height;
    }

    @JsonProperty("birth_date")
    public Optional<String> getBirthDate() {
        return birthDate;
    }

    @JsonProperty("wheelchair_use")
    public Optional<Boolean> getWheelchairUse() {
        return wheelchairUse;
    }

    @JsonProperty("gender")
    public Optional<Gender> getGender() {
        return gender;
    }

    @JsonProperty("sex")
    public Optional<Sex> getSex() {
        return sex;
    }

    @JsonProperty("source")
    public ClientFacingSource getSource() {
        return source;
    }

    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updated_at")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingProfile && equalTo((ClientFacingProfile) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingProfile other) {
        return id.equals(other.id)
                && userId.equals(other.userId)
                && height.equals(other.height)
                && birthDate.equals(other.birthDate)
                && wheelchairUse.equals(other.wheelchairUse)
                && gender.equals(other.gender)
                && sex.equals(other.sex)
                && source.equals(other.source)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.userId,
                this.height,
                this.birthDate,
                this.wheelchairUse,
                this.gender,
                this.sex,
                this.source,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        UserIdStage id(String id);

        Builder from(ClientFacingProfile other);
    }

    public interface UserIdStage {
        SourceStage userId(String userId);
    }

    public interface SourceStage {
        CreatedAtStage source(ClientFacingSource source);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        ClientFacingProfile build();

        _FinalStage height(Optional<Integer> height);

        _FinalStage height(Integer height);

        _FinalStage birthDate(Optional<String> birthDate);

        _FinalStage birthDate(String birthDate);

        _FinalStage wheelchairUse(Optional<Boolean> wheelchairUse);

        _FinalStage wheelchairUse(Boolean wheelchairUse);

        _FinalStage gender(Optional<Gender> gender);

        _FinalStage gender(Gender gender);

        _FinalStage sex(Optional<Sex> sex);

        _FinalStage sex(Sex sex);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, UserIdStage, SourceStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String id;

        private String userId;

        private ClientFacingSource source;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<Sex> sex = Optional.empty();

        private Optional<Gender> gender = Optional.empty();

        private Optional<Boolean> wheelchairUse = Optional.empty();

        private Optional<String> birthDate = Optional.empty();

        private Optional<Integer> height = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingProfile other) {
            id(other.getId());
            userId(other.getUserId());
            height(other.getHeight());
            birthDate(other.getBirthDate());
            wheelchairUse(other.getWheelchairUse());
            gender(other.getGender());
            sex(other.getSex());
            source(other.getSource());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public UserIdStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * <p>User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("user_id")
        public SourceStage userId(String userId) {
            this.userId = userId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("source")
        public CreatedAtStage source(ClientFacingSource source) {
            this.source = source;
            return this;
        }

        @java.lang.Override
        @JsonSetter("created_at")
        public UpdatedAtStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("updated_at")
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage sex(Sex sex) {
            this.sex = Optional.of(sex);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sex", nulls = Nulls.SKIP)
        public _FinalStage sex(Optional<Sex> sex) {
            this.sex = sex;
            return this;
        }

        @java.lang.Override
        public _FinalStage gender(Gender gender) {
            this.gender = Optional.of(gender);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "gender", nulls = Nulls.SKIP)
        public _FinalStage gender(Optional<Gender> gender) {
            this.gender = gender;
            return this;
        }

        @java.lang.Override
        public _FinalStage wheelchairUse(Boolean wheelchairUse) {
            this.wheelchairUse = Optional.of(wheelchairUse);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "wheelchair_use", nulls = Nulls.SKIP)
        public _FinalStage wheelchairUse(Optional<Boolean> wheelchairUse) {
            this.wheelchairUse = wheelchairUse;
            return this;
        }

        @java.lang.Override
        public _FinalStage birthDate(String birthDate) {
            this.birthDate = Optional.of(birthDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "birth_date", nulls = Nulls.SKIP)
        public _FinalStage birthDate(Optional<String> birthDate) {
            this.birthDate = birthDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage height(Integer height) {
            this.height = Optional.of(height);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "height", nulls = Nulls.SKIP)
        public _FinalStage height(Optional<Integer> height) {
            this.height = height;
            return this;
        }

        @java.lang.Override
        public ClientFacingProfile build() {
            return new ClientFacingProfile(
                    id,
                    userId,
                    height,
                    birthDate,
                    wheelchairUse,
                    gender,
                    sex,
                    source,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
