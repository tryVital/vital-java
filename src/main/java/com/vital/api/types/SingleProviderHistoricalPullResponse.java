/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SingleProviderHistoricalPullResponse.Builder.class)
public final class SingleProviderHistoricalPullResponse {
    private final Map<String, SingleHistoricalPullStatistics> pulled;

    private final List<ClientFacingResource> notPulled;

    private final Map<String, Object> additionalProperties;

    private SingleProviderHistoricalPullResponse(
            Map<String, SingleHistoricalPullStatistics> pulled,
            List<ClientFacingResource> notPulled,
            Map<String, Object> additionalProperties) {
        this.pulled = pulled;
        this.notPulled = notPulled;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("pulled")
    public Map<String, SingleHistoricalPullStatistics> getPulled() {
        return pulled;
    }

    @JsonProperty("not_pulled")
    public List<ClientFacingResource> getNotPulled() {
        return notPulled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SingleProviderHistoricalPullResponse
                && equalTo((SingleProviderHistoricalPullResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SingleProviderHistoricalPullResponse other) {
        return pulled.equals(other.pulled) && notPulled.equals(other.notPulled);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pulled, this.notPulled);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, SingleHistoricalPullStatistics> pulled = new LinkedHashMap<>();

        private List<ClientFacingResource> notPulled = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SingleProviderHistoricalPullResponse other) {
            pulled(other.getPulled());
            notPulled(other.getNotPulled());
            return this;
        }

        @JsonSetter(value = "pulled", nulls = Nulls.SKIP)
        public Builder pulled(Map<String, SingleHistoricalPullStatistics> pulled) {
            this.pulled.clear();
            this.pulled.putAll(pulled);
            return this;
        }

        public Builder putAllPulled(Map<String, SingleHistoricalPullStatistics> pulled) {
            this.pulled.putAll(pulled);
            return this;
        }

        public Builder pulled(String key, SingleHistoricalPullStatistics value) {
            this.pulled.put(key, value);
            return this;
        }

        @JsonSetter(value = "not_pulled", nulls = Nulls.SKIP)
        public Builder notPulled(List<ClientFacingResource> notPulled) {
            this.notPulled.clear();
            this.notPulled.addAll(notPulled);
            return this;
        }

        public Builder addNotPulled(ClientFacingResource notPulled) {
            this.notPulled.add(notPulled);
            return this;
        }

        public Builder addAllNotPulled(List<ClientFacingResource> notPulled) {
            this.notPulled.addAll(notPulled);
            return this;
        }

        public SingleProviderHistoricalPullResponse build() {
            return new SingleProviderHistoricalPullResponse(pulled, notPulled, additionalProperties);
        }
    }
}
