/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = PayorItem.Builder.class)
public final class PayorItem {
    private final String reference;

    private final Map<String, Object> additionalProperties;

    private PayorItem(String reference, Map<String, Object> additionalProperties) {
        this.reference = reference;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("reference")
    public String getReference() {
        return reference;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayorItem && equalTo((PayorItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayorItem other) {
        return reference.equals(other.reference);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.reference);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ReferenceStage builder() {
        return new Builder();
    }

    public interface ReferenceStage {
        _FinalStage reference(String reference);

        Builder from(PayorItem other);
    }

    public interface _FinalStage {
        PayorItem build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ReferenceStage, _FinalStage {
        private String reference;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(PayorItem other) {
            reference(other.getReference());
            return this;
        }

        @Override
        @JsonSetter("reference")
        public _FinalStage reference(String reference) {
            this.reference = reference;
            return this;
        }

        @Override
        public PayorItem build() {
            return new PayorItem(reference, additionalProperties);
        }
    }
}
