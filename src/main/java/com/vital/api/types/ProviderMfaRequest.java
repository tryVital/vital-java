/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ProviderMfaRequest.Builder.class)
public final class ProviderMfaRequest {
    private final ProviderMfaRequestMethod method;

    private final String hint;

    private final Map<String, Object> additionalProperties;

    private ProviderMfaRequest(ProviderMfaRequestMethod method, String hint, Map<String, Object> additionalProperties) {
        this.method = method;
        this.hint = hint;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The MFA method requested by the password provider to complete authentication. ℹ️ This enum is non-exhaustive.
     */
    @JsonProperty("method")
    public ProviderMfaRequestMethod getMethod() {
        return method;
    }

    /**
     * @return The MFA hint provided by the password provider, e.g., the redacted phone number.
     */
    @JsonProperty("hint")
    public String getHint() {
        return hint;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProviderMfaRequest && equalTo((ProviderMfaRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProviderMfaRequest other) {
        return method.equals(other.method) && hint.equals(other.hint);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.method, this.hint);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MethodStage builder() {
        return new Builder();
    }

    public interface MethodStage {
        HintStage method(ProviderMfaRequestMethod method);

        Builder from(ProviderMfaRequest other);
    }

    public interface HintStage {
        _FinalStage hint(String hint);
    }

    public interface _FinalStage {
        ProviderMfaRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MethodStage, HintStage, _FinalStage {
        private ProviderMfaRequestMethod method;

        private String hint;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProviderMfaRequest other) {
            method(other.getMethod());
            hint(other.getHint());
            return this;
        }

        /**
         * <p>The MFA method requested by the password provider to complete authentication. ℹ️ This enum is non-exhaustive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("method")
        public HintStage method(ProviderMfaRequestMethod method) {
            this.method = method;
            return this;
        }

        /**
         * <p>The MFA hint provided by the password provider, e.g., the redacted phone number.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("hint")
        public _FinalStage hint(String hint) {
            this.hint = hint;
            return this;
        }

        @java.lang.Override
        public ProviderMfaRequest build() {
            return new ProviderMfaRequest(method, hint, additionalProperties);
        }
    }
}
