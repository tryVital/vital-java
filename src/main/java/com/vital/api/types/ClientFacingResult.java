/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientFacingResult.Builder.class)
public final class ClientFacingResult {
    private final int id;

    private final String name;

    private final String slug;

    private final Optional<Integer> labId;

    private final Optional<String> providerId;

    private final boolean required;

    private final Optional<ClientFacingLoinc> loinc;

    private final Map<String, Object> additionalProperties;

    private ClientFacingResult(
            int id,
            String name,
            String slug,
            Optional<Integer> labId,
            Optional<String> providerId,
            boolean required,
            Optional<ClientFacingLoinc> loinc,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.slug = slug;
        this.labId = labId;
        this.providerId = providerId;
        this.required = required;
        this.loinc = loinc;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public int getId() {
        return id;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("slug")
    public String getSlug() {
        return slug;
    }

    @JsonProperty("lab_id")
    public Optional<Integer> getLabId() {
        return labId;
    }

    @JsonProperty("provider_id")
    public Optional<String> getProviderId() {
        return providerId;
    }

    @JsonProperty("required")
    public boolean getRequired() {
        return required;
    }

    @JsonProperty("loinc")
    public Optional<ClientFacingLoinc> getLoinc() {
        return loinc;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientFacingResult && equalTo((ClientFacingResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientFacingResult other) {
        return id == other.id
                && name.equals(other.name)
                && slug.equals(other.slug)
                && labId.equals(other.labId)
                && providerId.equals(other.providerId)
                && required == other.required
                && loinc.equals(other.loinc);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.name, this.slug, this.labId, this.providerId, this.required, this.loinc);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        NameStage id(int id);

        Builder from(ClientFacingResult other);
    }

    public interface NameStage {
        SlugStage name(String name);
    }

    public interface SlugStage {
        RequiredStage slug(String slug);
    }

    public interface RequiredStage {
        _FinalStage required(boolean required);
    }

    public interface _FinalStage {
        ClientFacingResult build();

        _FinalStage labId(Optional<Integer> labId);

        _FinalStage labId(Integer labId);

        _FinalStage providerId(Optional<String> providerId);

        _FinalStage providerId(String providerId);

        _FinalStage loinc(Optional<ClientFacingLoinc> loinc);

        _FinalStage loinc(ClientFacingLoinc loinc);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, NameStage, SlugStage, RequiredStage, _FinalStage {
        private int id;

        private String name;

        private String slug;

        private boolean required;

        private Optional<ClientFacingLoinc> loinc = Optional.empty();

        private Optional<String> providerId = Optional.empty();

        private Optional<Integer> labId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClientFacingResult other) {
            id(other.getId());
            name(other.getName());
            slug(other.getSlug());
            labId(other.getLabId());
            providerId(other.getProviderId());
            required(other.getRequired());
            loinc(other.getLoinc());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(int id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public SlugStage name(String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("slug")
        public RequiredStage slug(String slug) {
            this.slug = slug;
            return this;
        }

        @java.lang.Override
        @JsonSetter("required")
        public _FinalStage required(boolean required) {
            this.required = required;
            return this;
        }

        @java.lang.Override
        public _FinalStage loinc(ClientFacingLoinc loinc) {
            this.loinc = Optional.of(loinc);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "loinc", nulls = Nulls.SKIP)
        public _FinalStage loinc(Optional<ClientFacingLoinc> loinc) {
            this.loinc = loinc;
            return this;
        }

        @java.lang.Override
        public _FinalStage providerId(String providerId) {
            this.providerId = Optional.of(providerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "provider_id", nulls = Nulls.SKIP)
        public _FinalStage providerId(Optional<String> providerId) {
            this.providerId = providerId;
            return this;
        }

        @java.lang.Override
        public _FinalStage labId(Integer labId) {
            this.labId = Optional.of(labId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lab_id", nulls = Nulls.SKIP)
        public _FinalStage labId(Optional<Integer> labId) {
            this.labId = labId;
            return this;
        }

        @java.lang.Override
        public ClientFacingResult build() {
            return new ClientFacingResult(id, name, slug, labId, providerId, required, loinc, additionalProperties);
        }
    }
}
