/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClientUserIdConflict.Builder.class)
public final class ClientUserIdConflict {
    private final String errorType;

    private final String errorMessage;

    private final String userId;

    private final OffsetDateTime createdOn;

    private final Map<String, Object> additionalProperties;

    private ClientUserIdConflict(
            String errorType,
            String errorMessage,
            String userId,
            OffsetDateTime createdOn,
            Map<String, Object> additionalProperties) {
        this.errorType = errorType;
        this.errorMessage = errorMessage;
        this.userId = userId;
        this.createdOn = createdOn;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("error_type")
    public String getErrorType() {
        return errorType;
    }

    @JsonProperty("error_message")
    public String getErrorMessage() {
        return errorMessage;
    }

    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("created_on")
    public OffsetDateTime getCreatedOn() {
        return createdOn;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientUserIdConflict && equalTo((ClientUserIdConflict) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientUserIdConflict other) {
        return errorType.equals(other.errorType)
                && errorMessage.equals(other.errorMessage)
                && userId.equals(other.userId)
                && createdOn.equals(other.createdOn);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.errorType, this.errorMessage, this.userId, this.createdOn);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ErrorTypeStage builder() {
        return new Builder();
    }

    public interface ErrorTypeStage {
        ErrorMessageStage errorType(String errorType);

        Builder from(ClientUserIdConflict other);
    }

    public interface ErrorMessageStage {
        UserIdStage errorMessage(String errorMessage);
    }

    public interface UserIdStage {
        CreatedOnStage userId(String userId);
    }

    public interface CreatedOnStage {
        _FinalStage createdOn(OffsetDateTime createdOn);
    }

    public interface _FinalStage {
        ClientUserIdConflict build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ErrorTypeStage, ErrorMessageStage, UserIdStage, CreatedOnStage, _FinalStage {
        private String errorType;

        private String errorMessage;

        private String userId;

        private OffsetDateTime createdOn;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(ClientUserIdConflict other) {
            errorType(other.getErrorType());
            errorMessage(other.getErrorMessage());
            userId(other.getUserId());
            createdOn(other.getCreatedOn());
            return this;
        }

        @Override
        @JsonSetter("error_type")
        public ErrorMessageStage errorType(String errorType) {
            this.errorType = errorType;
            return this;
        }

        @Override
        @JsonSetter("error_message")
        public UserIdStage errorMessage(String errorMessage) {
            this.errorMessage = errorMessage;
            return this;
        }

        @Override
        @JsonSetter("user_id")
        public CreatedOnStage userId(String userId) {
            this.userId = userId;
            return this;
        }

        @Override
        @JsonSetter("created_on")
        public _FinalStage createdOn(OffsetDateTime createdOn) {
            this.createdOn = createdOn;
            return this;
        }

        @Override
        public ClientUserIdConflict build() {
            return new ClientUserIdConflict(errorType, errorMessage, userId, createdOn, additionalProperties);
        }
    }
}
