/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UtcTimestampWithTimezoneOffset.Builder.class)
public final class UtcTimestampWithTimezoneOffset {
    private final OffsetDateTime timestamp;

    private final int timezoneOffset;

    private final Map<String, Object> additionalProperties;

    private UtcTimestampWithTimezoneOffset(
            OffsetDateTime timestamp, int timezoneOffset, Map<String, Object> additionalProperties) {
        this.timestamp = timestamp;
        this.timezoneOffset = timezoneOffset;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("timestamp")
    public OffsetDateTime getTimestamp() {
        return timestamp;
    }

    @JsonProperty("timezone_offset")
    public int getTimezoneOffset() {
        return timezoneOffset;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UtcTimestampWithTimezoneOffset && equalTo((UtcTimestampWithTimezoneOffset) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UtcTimestampWithTimezoneOffset other) {
        return timestamp.equals(other.timestamp) && timezoneOffset == other.timezoneOffset;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.timestamp, this.timezoneOffset);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TimestampStage builder() {
        return new Builder();
    }

    public interface TimestampStage {
        TimezoneOffsetStage timestamp(@NotNull OffsetDateTime timestamp);

        Builder from(UtcTimestampWithTimezoneOffset other);
    }

    public interface TimezoneOffsetStage {
        _FinalStage timezoneOffset(int timezoneOffset);
    }

    public interface _FinalStage {
        UtcTimestampWithTimezoneOffset build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TimestampStage, TimezoneOffsetStage, _FinalStage {
        private OffsetDateTime timestamp;

        private int timezoneOffset;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UtcTimestampWithTimezoneOffset other) {
            timestamp(other.getTimestamp());
            timezoneOffset(other.getTimezoneOffset());
            return this;
        }

        @java.lang.Override
        @JsonSetter("timestamp")
        public TimezoneOffsetStage timestamp(@NotNull OffsetDateTime timestamp) {
            this.timestamp = Objects.requireNonNull(timestamp, "timestamp must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("timezone_offset")
        public _FinalStage timezoneOffset(int timezoneOffset) {
            this.timezoneOffset = timezoneOffset;
            return this;
        }

        @java.lang.Override
        public UtcTimestampWithTimezoneOffset build() {
            return new UtcTimestampWithTimezoneOffset(timestamp, timezoneOffset, additionalProperties);
        }
    }
}
