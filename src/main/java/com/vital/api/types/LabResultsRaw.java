/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LabResultsRaw.Builder.class)
public final class LabResultsRaw {
    private final LabResultsMetadata metadata;

    private final LabResultsRawResults results;

    private final Optional<List<MissingBiomarkerResult>> missingResults;

    private final Optional<Map<String, Optional<SampleData>>> sampleInformation;

    private final Map<String, Object> additionalProperties;

    private LabResultsRaw(
            LabResultsMetadata metadata,
            LabResultsRawResults results,
            Optional<List<MissingBiomarkerResult>> missingResults,
            Optional<Map<String, Optional<SampleData>>> sampleInformation,
            Map<String, Object> additionalProperties) {
        this.metadata = metadata;
        this.results = results;
        this.missingResults = missingResults;
        this.sampleInformation = sampleInformation;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("metadata")
    public LabResultsMetadata getMetadata() {
        return metadata;
    }

    @JsonProperty("results")
    public LabResultsRawResults getResults() {
        return results;
    }

    @JsonProperty("missing_results")
    public Optional<List<MissingBiomarkerResult>> getMissingResults() {
        return missingResults;
    }

    @JsonProperty("sample_information")
    public Optional<Map<String, Optional<SampleData>>> getSampleInformation() {
        return sampleInformation;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabResultsRaw && equalTo((LabResultsRaw) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabResultsRaw other) {
        return metadata.equals(other.metadata)
                && results.equals(other.results)
                && missingResults.equals(other.missingResults)
                && sampleInformation.equals(other.sampleInformation);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.metadata, this.results, this.missingResults, this.sampleInformation);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MetadataStage builder() {
        return new Builder();
    }

    public interface MetadataStage {
        ResultsStage metadata(@NotNull LabResultsMetadata metadata);

        Builder from(LabResultsRaw other);
    }

    public interface ResultsStage {
        _FinalStage results(@NotNull LabResultsRawResults results);
    }

    public interface _FinalStage {
        LabResultsRaw build();

        _FinalStage missingResults(Optional<List<MissingBiomarkerResult>> missingResults);

        _FinalStage missingResults(List<MissingBiomarkerResult> missingResults);

        _FinalStage sampleInformation(Optional<Map<String, Optional<SampleData>>> sampleInformation);

        _FinalStage sampleInformation(Map<String, Optional<SampleData>> sampleInformation);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MetadataStage, ResultsStage, _FinalStage {
        private LabResultsMetadata metadata;

        private LabResultsRawResults results;

        private Optional<Map<String, Optional<SampleData>>> sampleInformation = Optional.empty();

        private Optional<List<MissingBiomarkerResult>> missingResults = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LabResultsRaw other) {
            metadata(other.getMetadata());
            results(other.getResults());
            missingResults(other.getMissingResults());
            sampleInformation(other.getSampleInformation());
            return this;
        }

        @java.lang.Override
        @JsonSetter("metadata")
        public ResultsStage metadata(@NotNull LabResultsMetadata metadata) {
            this.metadata = Objects.requireNonNull(metadata, "metadata must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("results")
        public _FinalStage results(@NotNull LabResultsRawResults results) {
            this.results = Objects.requireNonNull(results, "results must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage sampleInformation(Map<String, Optional<SampleData>> sampleInformation) {
            this.sampleInformation = Optional.ofNullable(sampleInformation);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sample_information", nulls = Nulls.SKIP)
        public _FinalStage sampleInformation(Optional<Map<String, Optional<SampleData>>> sampleInformation) {
            this.sampleInformation = sampleInformation;
            return this;
        }

        @java.lang.Override
        public _FinalStage missingResults(List<MissingBiomarkerResult> missingResults) {
            this.missingResults = Optional.ofNullable(missingResults);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "missing_results", nulls = Nulls.SKIP)
        public _FinalStage missingResults(Optional<List<MissingBiomarkerResult>> missingResults) {
            this.missingResults = missingResults;
            return this;
        }

        @java.lang.Override
        public LabResultsRaw build() {
            return new LabResultsRaw(metadata, results, missingResults, sampleInformation, additionalProperties);
        }
    }
}
