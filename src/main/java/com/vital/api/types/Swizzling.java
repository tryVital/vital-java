/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Swizzling.Builder.class)
public final class Swizzling {
    private final SwizzlingBinGranularity binGranularity;

    private final Optional<Integer> binCount;

    private final Period gatherEvery;

    private final Map<String, Object> additionalProperties;

    private Swizzling(
            SwizzlingBinGranularity binGranularity,
            Optional<Integer> binCount,
            Period gatherEvery,
            Map<String, Object> additionalProperties) {
        this.binGranularity = binGranularity;
        this.binCount = binCount;
        this.gatherEvery = gatherEvery;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("bin_granularity")
    public SwizzlingBinGranularity getBinGranularity() {
        return binGranularity;
    }

    @JsonProperty("bin_count")
    public Optional<Integer> getBinCount() {
        return binCount;
    }

    @JsonProperty("gather_every")
    public Period getGatherEvery() {
        return gatherEvery;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Swizzling && equalTo((Swizzling) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Swizzling other) {
        return binGranularity.equals(other.binGranularity)
                && binCount.equals(other.binCount)
                && gatherEvery.equals(other.gatherEvery);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.binGranularity, this.binCount, this.gatherEvery);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BinGranularityStage builder() {
        return new Builder();
    }

    public interface BinGranularityStage {
        GatherEveryStage binGranularity(SwizzlingBinGranularity binGranularity);

        Builder from(Swizzling other);
    }

    public interface GatherEveryStage {
        _FinalStage gatherEvery(Period gatherEvery);
    }

    public interface _FinalStage {
        Swizzling build();

        _FinalStage binCount(Optional<Integer> binCount);

        _FinalStage binCount(Integer binCount);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BinGranularityStage, GatherEveryStage, _FinalStage {
        private SwizzlingBinGranularity binGranularity;

        private Period gatherEvery;

        private Optional<Integer> binCount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Swizzling other) {
            binGranularity(other.getBinGranularity());
            binCount(other.getBinCount());
            gatherEvery(other.getGatherEvery());
            return this;
        }

        @java.lang.Override
        @JsonSetter("bin_granularity")
        public GatherEveryStage binGranularity(SwizzlingBinGranularity binGranularity) {
            this.binGranularity = binGranularity;
            return this;
        }

        @java.lang.Override
        @JsonSetter("gather_every")
        public _FinalStage gatherEvery(Period gatherEvery) {
            this.gatherEvery = gatherEvery;
            return this;
        }

        @java.lang.Override
        public _FinalStage binCount(Integer binCount) {
            this.binCount = Optional.of(binCount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "bin_count", nulls = Nulls.SKIP)
        public _FinalStage binCount(Optional<Integer> binCount) {
            this.binCount = binCount;
            return this;
        }

        @java.lang.Override
        public Swizzling build() {
            return new Swizzling(binGranularity, binCount, gatherEvery, additionalProperties);
        }
    }
}
