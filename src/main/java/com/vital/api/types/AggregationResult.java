/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AggregationResult.Builder.class)
public final class AggregationResult {
    private final Map<String, List<Object>> table;

    private final Map<String, Object> additionalProperties;

    private AggregationResult(Map<String, List<Object>> table, Map<String, Object> additionalProperties) {
        this.table = table;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The result table of the query, organized in a column oriented format.
     */
    @JsonProperty("table")
    public Map<String, List<Object>> getTable() {
        return table;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AggregationResult && equalTo((AggregationResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AggregationResult other) {
        return table.equals(other.table);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.table);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, List<Object>> table = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AggregationResult other) {
            table(other.getTable());
            return this;
        }

        /**
         * <p>The result table of the query, organized in a column oriented format.</p>
         */
        @JsonSetter(value = "table", nulls = Nulls.SKIP)
        public Builder table(Map<String, List<Object>> table) {
            this.table.clear();
            this.table.putAll(table);
            return this;
        }

        public Builder putAllTable(Map<String, List<Object>> table) {
            if (table != null) {
                this.table.putAll(table);
            }
            return this;
        }

        public Builder table(String key, List<Object> value) {
            this.table.put(key, value);
            return this;
        }

        public AggregationResult build() {
            return new AggregationResult(table, additionalProperties);
        }
    }
}
