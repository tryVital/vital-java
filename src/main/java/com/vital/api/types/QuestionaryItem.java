/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = QuestionaryItem.Builder.class)
public final class QuestionaryItem {
    private final String linkId;

    private final String text;

    private final List<AnswerItem> answer;

    private final Map<String, Object> additionalProperties;

    private QuestionaryItem(
            String linkId, String text, List<AnswerItem> answer, Map<String, Object> additionalProperties) {
        this.linkId = linkId;
        this.text = text;
        this.answer = answer;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("linkId")
    public String getLinkId() {
        return linkId;
    }

    @JsonProperty("text")
    public String getText() {
        return text;
    }

    @JsonProperty("answer")
    public List<AnswerItem> getAnswer() {
        return answer;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QuestionaryItem && equalTo((QuestionaryItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QuestionaryItem other) {
        return linkId.equals(other.linkId) && text.equals(other.text) && answer.equals(other.answer);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.linkId, this.text, this.answer);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LinkIdStage builder() {
        return new Builder();
    }

    public interface LinkIdStage {
        TextStage linkId(String linkId);

        Builder from(QuestionaryItem other);
    }

    public interface TextStage {
        _FinalStage text(String text);
    }

    public interface _FinalStage {
        QuestionaryItem build();

        _FinalStage answer(List<AnswerItem> answer);

        _FinalStage addAnswer(AnswerItem answer);

        _FinalStage addAllAnswer(List<AnswerItem> answer);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LinkIdStage, TextStage, _FinalStage {
        private String linkId;

        private String text;

        private List<AnswerItem> answer = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(QuestionaryItem other) {
            linkId(other.getLinkId());
            text(other.getText());
            answer(other.getAnswer());
            return this;
        }

        @Override
        @JsonSetter("linkId")
        public TextStage linkId(String linkId) {
            this.linkId = linkId;
            return this;
        }

        @Override
        @JsonSetter("text")
        public _FinalStage text(String text) {
            this.text = text;
            return this;
        }

        @Override
        public _FinalStage addAllAnswer(List<AnswerItem> answer) {
            this.answer.addAll(answer);
            return this;
        }

        @Override
        public _FinalStage addAnswer(AnswerItem answer) {
            this.answer.add(answer);
            return this;
        }

        @Override
        @JsonSetter(value = "answer", nulls = Nulls.SKIP)
        public _FinalStage answer(List<AnswerItem> answer) {
            this.answer.clear();
            this.answer.addAll(answer);
            return this;
        }

        @Override
        public QuestionaryItem build() {
            return new QuestionaryItem(linkId, text, answer, additionalProperties);
        }
    }
}
