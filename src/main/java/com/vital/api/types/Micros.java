/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Micros.Builder.class)
public final class Micros {
    private final Optional<Map<String, Optional<Double>>> minerals;

    private final Optional<Map<String, Optional<Double>>> traceElements;

    private final Optional<Map<String, Optional<Double>>> vitamins;

    private final Map<String, Object> additionalProperties;

    private Micros(
            Optional<Map<String, Optional<Double>>> minerals,
            Optional<Map<String, Optional<Double>>> traceElements,
            Optional<Map<String, Optional<Double>>> vitamins,
            Map<String, Object> additionalProperties) {
        this.minerals = minerals;
        this.traceElements = traceElements;
        this.vitamins = vitamins;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("minerals")
    public Optional<Map<String, Optional<Double>>> getMinerals() {
        return minerals;
    }

    @JsonProperty("trace_elements")
    public Optional<Map<String, Optional<Double>>> getTraceElements() {
        return traceElements;
    }

    @JsonProperty("vitamins")
    public Optional<Map<String, Optional<Double>>> getVitamins() {
        return vitamins;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Micros && equalTo((Micros) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Micros other) {
        return minerals.equals(other.minerals)
                && traceElements.equals(other.traceElements)
                && vitamins.equals(other.vitamins);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.minerals, this.traceElements, this.vitamins);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Optional<Double>>> minerals = Optional.empty();

        private Optional<Map<String, Optional<Double>>> traceElements = Optional.empty();

        private Optional<Map<String, Optional<Double>>> vitamins = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Micros other) {
            minerals(other.getMinerals());
            traceElements(other.getTraceElements());
            vitamins(other.getVitamins());
            return this;
        }

        @JsonSetter(value = "minerals", nulls = Nulls.SKIP)
        public Builder minerals(Optional<Map<String, Optional<Double>>> minerals) {
            this.minerals = minerals;
            return this;
        }

        public Builder minerals(Map<String, Optional<Double>> minerals) {
            this.minerals = Optional.of(minerals);
            return this;
        }

        @JsonSetter(value = "trace_elements", nulls = Nulls.SKIP)
        public Builder traceElements(Optional<Map<String, Optional<Double>>> traceElements) {
            this.traceElements = traceElements;
            return this;
        }

        public Builder traceElements(Map<String, Optional<Double>> traceElements) {
            this.traceElements = Optional.of(traceElements);
            return this;
        }

        @JsonSetter(value = "vitamins", nulls = Nulls.SKIP)
        public Builder vitamins(Optional<Map<String, Optional<Double>>> vitamins) {
            this.vitamins = vitamins;
            return this;
        }

        public Builder vitamins(Map<String, Optional<Double>> vitamins) {
            this.vitamins = Optional.of(vitamins);
            return this;
        }

        public Micros build() {
            return new Micros(minerals, traceElements, vitamins, additionalProperties);
        }
    }
}
