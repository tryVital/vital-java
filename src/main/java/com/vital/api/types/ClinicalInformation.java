/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClinicalInformation.Builder.class)
public final class ClinicalInformation {
    private final Optional<Boolean> fasting;

    private final Optional<String> notes;

    private final Optional<String> information;

    private final Optional<String> totalVolume;

    private final Map<String, Object> additionalProperties;

    private ClinicalInformation(
            Optional<Boolean> fasting,
            Optional<String> notes,
            Optional<String> information,
            Optional<String> totalVolume,
            Map<String, Object> additionalProperties) {
        this.fasting = fasting;
        this.notes = notes;
        this.information = information;
        this.totalVolume = totalVolume;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("fasting")
    public Optional<Boolean> getFasting() {
        return fasting;
    }

    @JsonProperty("notes")
    public Optional<String> getNotes() {
        return notes;
    }

    @JsonProperty("information")
    public Optional<String> getInformation() {
        return information;
    }

    @JsonProperty("total_volume")
    public Optional<String> getTotalVolume() {
        return totalVolume;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClinicalInformation && equalTo((ClinicalInformation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClinicalInformation other) {
        return fasting.equals(other.fasting)
                && notes.equals(other.notes)
                && information.equals(other.information)
                && totalVolume.equals(other.totalVolume);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.fasting, this.notes, this.information, this.totalVolume);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> fasting = Optional.empty();

        private Optional<String> notes = Optional.empty();

        private Optional<String> information = Optional.empty();

        private Optional<String> totalVolume = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClinicalInformation other) {
            fasting(other.getFasting());
            notes(other.getNotes());
            information(other.getInformation());
            totalVolume(other.getTotalVolume());
            return this;
        }

        @JsonSetter(value = "fasting", nulls = Nulls.SKIP)
        public Builder fasting(Optional<Boolean> fasting) {
            this.fasting = fasting;
            return this;
        }

        public Builder fasting(Boolean fasting) {
            this.fasting = Optional.of(fasting);
            return this;
        }

        @JsonSetter(value = "notes", nulls = Nulls.SKIP)
        public Builder notes(Optional<String> notes) {
            this.notes = notes;
            return this;
        }

        public Builder notes(String notes) {
            this.notes = Optional.of(notes);
            return this;
        }

        @JsonSetter(value = "information", nulls = Nulls.SKIP)
        public Builder information(Optional<String> information) {
            this.information = information;
            return this;
        }

        public Builder information(String information) {
            this.information = Optional.of(information);
            return this;
        }

        @JsonSetter(value = "total_volume", nulls = Nulls.SKIP)
        public Builder totalVolume(Optional<String> totalVolume) {
            this.totalVolume = totalVolume;
            return this;
        }

        public Builder totalVolume(String totalVolume) {
            this.totalVolume = Optional.of(totalVolume);
            return this;
        }

        public ClinicalInformation build() {
            return new ClinicalInformation(fasting, notes, information, totalVolume, additionalProperties);
        }
    }
}
