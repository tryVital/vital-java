/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DatePartExpr.Builder.class)
public final class DatePartExpr {
    private final DatePartExprArg arg;

    private final DatePartExprDatePart datePart;

    private final Map<String, Object> additionalProperties;

    private DatePartExpr(DatePartExprArg arg, DatePartExprDatePart datePart, Map<String, Object> additionalProperties) {
        this.arg = arg;
        this.datePart = datePart;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("arg")
    public DatePartExprArg getArg() {
        return arg;
    }

    @JsonProperty("date_part")
    public DatePartExprDatePart getDatePart() {
        return datePart;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DatePartExpr && equalTo((DatePartExpr) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DatePartExpr other) {
        return arg.equals(other.arg) && datePart.equals(other.datePart);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.arg, this.datePart);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ArgStage builder() {
        return new Builder();
    }

    public interface ArgStage {
        DatePartStage arg(DatePartExprArg arg);

        Builder from(DatePartExpr other);
    }

    public interface DatePartStage {
        _FinalStage datePart(DatePartExprDatePart datePart);
    }

    public interface _FinalStage {
        DatePartExpr build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ArgStage, DatePartStage, _FinalStage {
        private DatePartExprArg arg;

        private DatePartExprDatePart datePart;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DatePartExpr other) {
            arg(other.getArg());
            datePart(other.getDatePart());
            return this;
        }

        @java.lang.Override
        @JsonSetter("arg")
        public DatePartStage arg(DatePartExprArg arg) {
            this.arg = arg;
            return this;
        }

        @java.lang.Override
        @JsonSetter("date_part")
        public _FinalStage datePart(DatePartExprDatePart datePart) {
            this.datePart = datePart;
            return this;
        }

        @java.lang.Override
        public DatePartExpr build() {
            return new DatePartExpr(arg, datePart, additionalProperties);
        }
    }
}
