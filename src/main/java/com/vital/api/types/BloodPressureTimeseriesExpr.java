/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BloodPressureTimeseriesExpr.Builder.class)
public final class BloodPressureTimeseriesExpr {
    private final BloodPressureTimeseriesExprField field;

    private final Map<String, Object> additionalProperties;

    private BloodPressureTimeseriesExpr(
            BloodPressureTimeseriesExprField field, Map<String, Object> additionalProperties) {
        this.field = field;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("timeseries")
    public String getTimeseries() {
        return "blood_pressure";
    }

    /**
     * @return ℹ️ This enum is non-exhaustive.
     */
    @JsonProperty("field")
    public BloodPressureTimeseriesExprField getField() {
        return field;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BloodPressureTimeseriesExpr && equalTo((BloodPressureTimeseriesExpr) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BloodPressureTimeseriesExpr other) {
        return field.equals(other.field);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.field);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FieldStage builder() {
        return new Builder();
    }

    public interface FieldStage {
        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         */
        _FinalStage field(@NotNull BloodPressureTimeseriesExprField field);

        Builder from(BloodPressureTimeseriesExpr other);
    }

    public interface _FinalStage {
        BloodPressureTimeseriesExpr build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FieldStage, _FinalStage {
        private BloodPressureTimeseriesExprField field;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BloodPressureTimeseriesExpr other) {
            field(other.getField());
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("field")
        public _FinalStage field(@NotNull BloodPressureTimeseriesExprField field) {
            this.field = Objects.requireNonNull(field, "field must not be null");
            return this;
        }

        @java.lang.Override
        public BloodPressureTimeseriesExpr build() {
            return new BloodPressureTimeseriesExpr(field, additionalProperties);
        }
    }
}
