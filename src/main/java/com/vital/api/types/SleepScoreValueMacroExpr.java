/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SleepScoreValueMacroExpr.Builder.class)
public final class SleepScoreValueMacroExpr {
    private final Optional<String> version;

    private final Map<String, Object> additionalProperties;

    private SleepScoreValueMacroExpr(Optional<String> version, Map<String, Object> additionalProperties) {
        this.version = version;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("value_macro")
    public String getValueMacro() {
        return "sleep_score";
    }

    @JsonProperty("version")
    public Optional<String> getVersion() {
        return version;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SleepScoreValueMacroExpr && equalTo((SleepScoreValueMacroExpr) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SleepScoreValueMacroExpr other) {
        return version.equals(other.version);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.version);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> version = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SleepScoreValueMacroExpr other) {
            version(other.getVersion());
            return this;
        }

        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<String> version) {
            this.version = version;
            return this;
        }

        public Builder version(String version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        public SleepScoreValueMacroExpr build() {
            return new SleepScoreValueMacroExpr(version, additionalProperties);
        }
    }
}
