/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Question.Builder.class)
public final class Question {
    private final int id;

    private final boolean required;

    private final String code;

    private final String value;

    private final QuestionType type;

    private final int sequence;

    private final List<Answer> answers;

    private final Optional<String> constraint;

    private final Map<String, Object> additionalProperties;

    private Question(
            int id,
            boolean required,
            String code,
            String value,
            QuestionType type,
            int sequence,
            List<Answer> answers,
            Optional<String> constraint,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.required = required;
        this.code = code;
        this.value = value;
        this.type = type;
        this.sequence = sequence;
        this.answers = answers;
        this.constraint = constraint;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public int getId() {
        return id;
    }

    @JsonProperty("required")
    public boolean getRequired() {
        return required;
    }

    @JsonProperty("code")
    public String getCode() {
        return code;
    }

    @JsonProperty("value")
    public String getValue() {
        return value;
    }

    @JsonProperty("type")
    public QuestionType getType() {
        return type;
    }

    @JsonProperty("sequence")
    public int getSequence() {
        return sequence;
    }

    @JsonProperty("answers")
    public List<Answer> getAnswers() {
        return answers;
    }

    @JsonProperty("constraint")
    public Optional<String> getConstraint() {
        return constraint;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Question && equalTo((Question) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Question other) {
        return id == other.id
                && required == other.required
                && code.equals(other.code)
                && value.equals(other.value)
                && type.equals(other.type)
                && sequence == other.sequence
                && answers.equals(other.answers)
                && constraint.equals(other.constraint);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.required, this.code, this.value, this.type, this.sequence, this.answers, this.constraint);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        RequiredStage id(int id);

        Builder from(Question other);
    }

    public interface RequiredStage {
        CodeStage required(boolean required);
    }

    public interface CodeStage {
        ValueStage code(String code);
    }

    public interface ValueStage {
        TypeStage value(String value);
    }

    public interface TypeStage {
        SequenceStage type(QuestionType type);
    }

    public interface SequenceStage {
        _FinalStage sequence(int sequence);
    }

    public interface _FinalStage {
        Question build();

        _FinalStage answers(List<Answer> answers);

        _FinalStage addAnswers(Answer answers);

        _FinalStage addAllAnswers(List<Answer> answers);

        _FinalStage constraint(Optional<String> constraint);

        _FinalStage constraint(String constraint);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, RequiredStage, CodeStage, ValueStage, TypeStage, SequenceStage, _FinalStage {
        private int id;

        private boolean required;

        private String code;

        private String value;

        private QuestionType type;

        private int sequence;

        private Optional<String> constraint = Optional.empty();

        private List<Answer> answers = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Question other) {
            id(other.getId());
            required(other.getRequired());
            code(other.getCode());
            value(other.getValue());
            type(other.getType());
            sequence(other.getSequence());
            answers(other.getAnswers());
            constraint(other.getConstraint());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public RequiredStage id(int id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("required")
        public CodeStage required(boolean required) {
            this.required = required;
            return this;
        }

        @java.lang.Override
        @JsonSetter("code")
        public ValueStage code(String code) {
            this.code = code;
            return this;
        }

        @java.lang.Override
        @JsonSetter("value")
        public TypeStage value(String value) {
            this.value = value;
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public SequenceStage type(QuestionType type) {
            this.type = type;
            return this;
        }

        @java.lang.Override
        @JsonSetter("sequence")
        public _FinalStage sequence(int sequence) {
            this.sequence = sequence;
            return this;
        }

        @java.lang.Override
        public _FinalStage constraint(String constraint) {
            this.constraint = Optional.of(constraint);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "constraint", nulls = Nulls.SKIP)
        public _FinalStage constraint(Optional<String> constraint) {
            this.constraint = constraint;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllAnswers(List<Answer> answers) {
            this.answers.addAll(answers);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAnswers(Answer answers) {
            this.answers.add(answers);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "answers", nulls = Nulls.SKIP)
        public _FinalStage answers(List<Answer> answers) {
            this.answers.clear();
            this.answers.addAll(answers);
            return this;
        }

        @java.lang.Override
        public Question build() {
            return new Question(id, required, code, value, type, sequence, answers, constraint, additionalProperties);
        }
    }
}
