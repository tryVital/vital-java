/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ActivitySelector.Builder.class)
public final class ActivitySelector {
    private final ActivitySelectorActivity activity;

    private final Map<String, Object> additionalProperties;

    private ActivitySelector(ActivitySelectorActivity activity, Map<String, Object> additionalProperties) {
        this.activity = activity;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("activity")
    public ActivitySelectorActivity getActivity() {
        return activity;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ActivitySelector && equalTo((ActivitySelector) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ActivitySelector other) {
        return activity.equals(other.activity);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.activity);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ActivityStage builder() {
        return new Builder();
    }

    public interface ActivityStage {
        _FinalStage activity(ActivitySelectorActivity activity);

        Builder from(ActivitySelector other);
    }

    public interface _FinalStage {
        ActivitySelector build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ActivityStage, _FinalStage {
        private ActivitySelectorActivity activity;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ActivitySelector other) {
            activity(other.getActivity());
            return this;
        }

        @java.lang.Override
        @JsonSetter("activity")
        public _FinalStage activity(ActivitySelectorActivity activity) {
            this.activity = activity;
            return this;
        }

        @java.lang.Override
        public ActivitySelector build() {
            return new ActivitySelector(activity, additionalProperties);
        }
    }
}
