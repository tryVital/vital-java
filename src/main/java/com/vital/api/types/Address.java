/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Address.Builder.class)
public final class Address {
    private final String firstLine;

    private final Optional<String> secondLine;

    private final String country;

    private final String zip;

    private final String city;

    private final String state;

    private final Map<String, Object> additionalProperties;

    private Address(
            String firstLine,
            Optional<String> secondLine,
            String country,
            String zip,
            String city,
            String state,
            Map<String, Object> additionalProperties) {
        this.firstLine = firstLine;
        this.secondLine = secondLine;
        this.country = country;
        this.zip = zip;
        this.city = city;
        this.state = state;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("first_line")
    public String getFirstLine() {
        return firstLine;
    }

    @JsonProperty("second_line")
    public Optional<String> getSecondLine() {
        return secondLine;
    }

    @JsonProperty("country")
    public String getCountry() {
        return country;
    }

    @JsonProperty("zip")
    public String getZip() {
        return zip;
    }

    @JsonProperty("city")
    public String getCity() {
        return city;
    }

    @JsonProperty("state")
    public String getState() {
        return state;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Address && equalTo((Address) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Address other) {
        return firstLine.equals(other.firstLine)
                && secondLine.equals(other.secondLine)
                && country.equals(other.country)
                && zip.equals(other.zip)
                && city.equals(other.city)
                && state.equals(other.state);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.firstLine, this.secondLine, this.country, this.zip, this.city, this.state);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FirstLineStage builder() {
        return new Builder();
    }

    public interface FirstLineStage {
        CountryStage firstLine(@NotNull String firstLine);

        Builder from(Address other);
    }

    public interface CountryStage {
        ZipStage country(@NotNull String country);
    }

    public interface ZipStage {
        CityStage zip(@NotNull String zip);
    }

    public interface CityStage {
        StateStage city(@NotNull String city);
    }

    public interface StateStage {
        _FinalStage state(@NotNull String state);
    }

    public interface _FinalStage {
        Address build();

        _FinalStage secondLine(Optional<String> secondLine);

        _FinalStage secondLine(String secondLine);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements FirstLineStage, CountryStage, ZipStage, CityStage, StateStage, _FinalStage {
        private String firstLine;

        private String country;

        private String zip;

        private String city;

        private String state;

        private Optional<String> secondLine = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Address other) {
            firstLine(other.getFirstLine());
            secondLine(other.getSecondLine());
            country(other.getCountry());
            zip(other.getZip());
            city(other.getCity());
            state(other.getState());
            return this;
        }

        @java.lang.Override
        @JsonSetter("first_line")
        public CountryStage firstLine(@NotNull String firstLine) {
            this.firstLine = Objects.requireNonNull(firstLine, "firstLine must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("country")
        public ZipStage country(@NotNull String country) {
            this.country = Objects.requireNonNull(country, "country must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("zip")
        public CityStage zip(@NotNull String zip) {
            this.zip = Objects.requireNonNull(zip, "zip must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("city")
        public StateStage city(@NotNull String city) {
            this.city = Objects.requireNonNull(city, "city must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("state")
        public _FinalStage state(@NotNull String state) {
            this.state = Objects.requireNonNull(state, "state must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage secondLine(String secondLine) {
            this.secondLine = Optional.ofNullable(secondLine);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "second_line", nulls = Nulls.SKIP)
        public _FinalStage secondLine(Optional<String> secondLine) {
            this.secondLine = secondLine;
            return this;
        }

        @java.lang.Override
        public Address build() {
            return new Address(firstLine, secondLine, country, zip, city, state, additionalProperties);
        }
    }
}
