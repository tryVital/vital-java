/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AddOnOrder.Builder.class)
public final class AddOnOrder {
    private final Optional<List<Integer>> markerIds;

    private final Optional<List<String>> providerIds;

    private final Map<String, Object> additionalProperties;

    private AddOnOrder(
            Optional<List<Integer>> markerIds,
            Optional<List<String>> providerIds,
            Map<String, Object> additionalProperties) {
        this.markerIds = markerIds;
        this.providerIds = providerIds;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("marker_ids")
    public Optional<List<Integer>> getMarkerIds() {
        return markerIds;
    }

    @JsonProperty("provider_ids")
    public Optional<List<String>> getProviderIds() {
        return providerIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AddOnOrder && equalTo((AddOnOrder) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AddOnOrder other) {
        return markerIds.equals(other.markerIds) && providerIds.equals(other.providerIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.markerIds, this.providerIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Integer>> markerIds = Optional.empty();

        private Optional<List<String>> providerIds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AddOnOrder other) {
            markerIds(other.getMarkerIds());
            providerIds(other.getProviderIds());
            return this;
        }

        @JsonSetter(value = "marker_ids", nulls = Nulls.SKIP)
        public Builder markerIds(Optional<List<Integer>> markerIds) {
            this.markerIds = markerIds;
            return this;
        }

        public Builder markerIds(List<Integer> markerIds) {
            this.markerIds = Optional.ofNullable(markerIds);
            return this;
        }

        @JsonSetter(value = "provider_ids", nulls = Nulls.SKIP)
        public Builder providerIds(Optional<List<String>> providerIds) {
            this.providerIds = providerIds;
            return this;
        }

        public Builder providerIds(List<String> providerIds) {
            this.providerIds = Optional.ofNullable(providerIds);
            return this;
        }

        public AddOnOrder build() {
            return new AddOnOrder(markerIds, providerIds, additionalProperties);
        }
    }
}
