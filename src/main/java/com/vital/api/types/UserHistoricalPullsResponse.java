/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UserHistoricalPullsResponse.Builder.class)
public final class UserHistoricalPullsResponse {
    private final List<SingleUserHistoricalPullResponse> data;

    private final Optional<String> next;

    private final Map<String, Object> additionalProperties;

    private UserHistoricalPullsResponse(
            List<SingleUserHistoricalPullResponse> data,
            Optional<String> next,
            Map<String, Object> additionalProperties) {
        this.data = data;
        this.next = next;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("data")
    public List<SingleUserHistoricalPullResponse> getData() {
        return data;
    }

    @JsonProperty("next")
    public Optional<String> getNext() {
        return next;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserHistoricalPullsResponse && equalTo((UserHistoricalPullsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserHistoricalPullsResponse other) {
        return data.equals(other.data) && next.equals(other.next);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.data, this.next);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<SingleUserHistoricalPullResponse> data = new ArrayList<>();

        private Optional<String> next = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UserHistoricalPullsResponse other) {
            data(other.getData());
            next(other.getNext());
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(List<SingleUserHistoricalPullResponse> data) {
            this.data.clear();
            this.data.addAll(data);
            return this;
        }

        public Builder addData(SingleUserHistoricalPullResponse data) {
            this.data.add(data);
            return this;
        }

        public Builder addAllData(List<SingleUserHistoricalPullResponse> data) {
            this.data.addAll(data);
            return this;
        }

        @JsonSetter(value = "next", nulls = Nulls.SKIP)
        public Builder next(Optional<String> next) {
            this.next = next;
            return this;
        }

        public Builder next(String next) {
            this.next = Optional.of(next);
            return this;
        }

        public UserHistoricalPullsResponse build() {
            return new UserHistoricalPullsResponse(data, next, additionalProperties);
        }
    }
}
