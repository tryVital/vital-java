/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = IndexColumnExpr.Builder.class)
public final class IndexColumnExpr {
    private final IndexColumnExprIndex index;

    private final Map<String, Object> additionalProperties;

    private IndexColumnExpr(IndexColumnExprIndex index, Map<String, Object> additionalProperties) {
        this.index = index;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return ℹ️ This enum is non-exhaustive.
     */
    @JsonProperty("index")
    public IndexColumnExprIndex getIndex() {
        return index;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IndexColumnExpr && equalTo((IndexColumnExpr) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IndexColumnExpr other) {
        return index.equals(other.index);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.index);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IndexStage builder() {
        return new Builder();
    }

    public interface IndexStage {
        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         */
        _FinalStage index(@NotNull IndexColumnExprIndex index);

        Builder from(IndexColumnExpr other);
    }

    public interface _FinalStage {
        IndexColumnExpr build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IndexStage, _FinalStage {
        private IndexColumnExprIndex index;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(IndexColumnExpr other) {
            index(other.getIndex());
            return this;
        }

        /**
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * <p>ℹ️ This enum is non-exhaustive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("index")
        public _FinalStage index(@NotNull IndexColumnExprIndex index) {
            this.index = Objects.requireNonNull(index, "index must not be null");
            return this;
        }

        @java.lang.Override
        public IndexColumnExpr build() {
            return new IndexColumnExpr(index, additionalProperties);
        }
    }
}
