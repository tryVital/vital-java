/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PerformingLaboratory.Builder.class)
public final class PerformingLaboratory {
    private final String name;

    private final Optional<String> phoneNumber;

    private final Optional<String> medicalDirector;

    private final Optional<Address> address;

    private final Map<String, Object> additionalProperties;

    private PerformingLaboratory(
            String name,
            Optional<String> phoneNumber,
            Optional<String> medicalDirector,
            Optional<Address> address,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.medicalDirector = medicalDirector;
        this.address = address;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("phone_number")
    public Optional<String> getPhoneNumber() {
        return phoneNumber;
    }

    @JsonProperty("medical_director")
    public Optional<String> getMedicalDirector() {
        return medicalDirector;
    }

    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PerformingLaboratory && equalTo((PerformingLaboratory) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PerformingLaboratory other) {
        return name.equals(other.name)
                && phoneNumber.equals(other.phoneNumber)
                && medicalDirector.equals(other.medicalDirector)
                && address.equals(other.address);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.phoneNumber, this.medicalDirector, this.address);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);

        Builder from(PerformingLaboratory other);
    }

    public interface _FinalStage {
        PerformingLaboratory build();

        _FinalStage phoneNumber(Optional<String> phoneNumber);

        _FinalStage phoneNumber(String phoneNumber);

        _FinalStage medicalDirector(Optional<String> medicalDirector);

        _FinalStage medicalDirector(String medicalDirector);

        _FinalStage address(Optional<Address> address);

        _FinalStage address(Address address);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<Address> address = Optional.empty();

        private Optional<String> medicalDirector = Optional.empty();

        private Optional<String> phoneNumber = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PerformingLaboratory other) {
            name(other.getName());
            phoneNumber(other.getPhoneNumber());
            medicalDirector(other.getMedicalDirector());
            address(other.getAddress());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public _FinalStage address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        @java.lang.Override
        public _FinalStage medicalDirector(String medicalDirector) {
            this.medicalDirector = Optional.ofNullable(medicalDirector);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "medical_director", nulls = Nulls.SKIP)
        public _FinalStage medicalDirector(Optional<String> medicalDirector) {
            this.medicalDirector = medicalDirector;
            return this;
        }

        @java.lang.Override
        public _FinalStage phoneNumber(String phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public _FinalStage phoneNumber(Optional<String> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        @java.lang.Override
        public PerformingLaboratory build() {
            return new PerformingLaboratory(name, phoneNumber, medicalDirector, address, additionalProperties);
        }
    }
}
