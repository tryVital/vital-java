/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.insurance;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.vital.api.core.ApiError;
import com.vital.api.core.ClientOptions;
import com.vital.api.core.MediaTypes;
import com.vital.api.core.ObjectMappers;
import com.vital.api.core.QueryStringMapper;
import com.vital.api.core.RequestOptions;
import com.vital.api.core.VitalException;
import com.vital.api.core.VitalHttpResponse;
import com.vital.api.errors.UnprocessableEntityError;
import com.vital.api.resources.insurance.requests.InsuranceSearchDiagnosisRequest;
import com.vital.api.resources.insurance.requests.InsuranceSearchGetPayorInfoRequest;
import com.vital.api.resources.insurance.requests.PayorSearchRequest;
import com.vital.api.types.ClientFacingDiagnosisInformation;
import com.vital.api.types.ClientFacingPayorSearchResponse;
import com.vital.api.types.ClientFacingPayorSearchResponseDeprecated;
import com.vital.api.types.HttpValidationError;
import java.io.IOException;
import java.util.List;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawInsuranceClient {
    protected final ClientOptions clientOptions;

    public RawInsuranceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public VitalHttpResponse<List<ClientFacingPayorSearchResponse>> searchGetPayorInfo() {
        return searchGetPayorInfo(InsuranceSearchGetPayorInfoRequest.builder().build());
    }

    public VitalHttpResponse<List<ClientFacingPayorSearchResponse>> searchGetPayorInfo(
            InsuranceSearchGetPayorInfoRequest request) {
        return searchGetPayorInfo(request, null);
    }

    public VitalHttpResponse<List<ClientFacingPayorSearchResponse>> searchGetPayorInfo(
            InsuranceSearchGetPayorInfoRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v3/insurance/search/payor");
        if (request.getInsuranceName().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "insurance_name", request.getInsuranceName().get(), false);
        }
        if (request.getProvider().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "provider", request.getProvider().get(), false);
        }
        if (request.getProviderPayorId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "provider_payor_id", request.getProviderPayorId().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new VitalHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), new TypeReference<List<ClientFacingPayorSearchResponse>>() {}),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class),
                            response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VitalException("Network error executing HTTP request", e);
        }
    }

    public VitalHttpResponse<List<ClientFacingPayorSearchResponseDeprecated>> searchPayorInfo() {
        return searchPayorInfo(PayorSearchRequest.builder().build());
    }

    public VitalHttpResponse<List<ClientFacingPayorSearchResponseDeprecated>> searchPayorInfo(
            PayorSearchRequest request) {
        return searchPayorInfo(request, null);
    }

    public VitalHttpResponse<List<ClientFacingPayorSearchResponseDeprecated>> searchPayorInfo(
            PayorSearchRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v3/insurance/search/payor")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new VitalException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new VitalHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(),
                                new TypeReference<List<ClientFacingPayorSearchResponseDeprecated>>() {}),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class),
                            response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VitalException("Network error executing HTTP request", e);
        }
    }

    public VitalHttpResponse<List<ClientFacingDiagnosisInformation>> searchDiagnosis(
            InsuranceSearchDiagnosisRequest request) {
        return searchDiagnosis(request, null);
    }

    public VitalHttpResponse<List<ClientFacingDiagnosisInformation>> searchDiagnosis(
            InsuranceSearchDiagnosisRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v3/insurance/search/diagnosis");
        QueryStringMapper.addQueryParameter(httpUrl, "diagnosis_query", request.getDiagnosisQuery(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new VitalHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), new TypeReference<List<ClientFacingDiagnosisInformation>>() {}),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class),
                            response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VitalException("Network error executing HTTP request", e);
        }
    }
}
