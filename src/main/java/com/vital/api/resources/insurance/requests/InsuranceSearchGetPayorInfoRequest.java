/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.insurance.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.types.PayorCodeExternalProvider;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = InsuranceSearchGetPayorInfoRequest.Builder.class)
public final class InsuranceSearchGetPayorInfoRequest {
    private final Optional<String> insuranceName;

    private final Optional<PayorCodeExternalProvider> provider;

    private final Optional<String> providerPayorId;

    private final Map<String, Object> additionalProperties;

    private InsuranceSearchGetPayorInfoRequest(
            Optional<String> insuranceName,
            Optional<PayorCodeExternalProvider> provider,
            Optional<String> providerPayorId,
            Map<String, Object> additionalProperties) {
        this.insuranceName = insuranceName;
        this.provider = provider;
        this.providerPayorId = providerPayorId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("insurance_name")
    public Optional<String> getInsuranceName() {
        return insuranceName;
    }

    @JsonProperty("provider")
    public Optional<PayorCodeExternalProvider> getProvider() {
        return provider;
    }

    @JsonProperty("provider_payor_id")
    public Optional<String> getProviderPayorId() {
        return providerPayorId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InsuranceSearchGetPayorInfoRequest
                && equalTo((InsuranceSearchGetPayorInfoRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InsuranceSearchGetPayorInfoRequest other) {
        return insuranceName.equals(other.insuranceName)
                && provider.equals(other.provider)
                && providerPayorId.equals(other.providerPayorId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.insuranceName, this.provider, this.providerPayorId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> insuranceName = Optional.empty();

        private Optional<PayorCodeExternalProvider> provider = Optional.empty();

        private Optional<String> providerPayorId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InsuranceSearchGetPayorInfoRequest other) {
            insuranceName(other.getInsuranceName());
            provider(other.getProvider());
            providerPayorId(other.getProviderPayorId());
            return this;
        }

        @JsonSetter(value = "insurance_name", nulls = Nulls.SKIP)
        public Builder insuranceName(Optional<String> insuranceName) {
            this.insuranceName = insuranceName;
            return this;
        }

        public Builder insuranceName(String insuranceName) {
            this.insuranceName = Optional.of(insuranceName);
            return this;
        }

        @JsonSetter(value = "provider", nulls = Nulls.SKIP)
        public Builder provider(Optional<PayorCodeExternalProvider> provider) {
            this.provider = provider;
            return this;
        }

        public Builder provider(PayorCodeExternalProvider provider) {
            this.provider = Optional.of(provider);
            return this;
        }

        @JsonSetter(value = "provider_payor_id", nulls = Nulls.SKIP)
        public Builder providerPayorId(Optional<String> providerPayorId) {
            this.providerPayorId = providerPayorId;
            return this;
        }

        public Builder providerPayorId(String providerPayorId) {
            this.providerPayorId = Optional.of(providerPayorId);
            return this;
        }

        public InsuranceSearchGetPayorInfoRequest build() {
            return new InsuranceSearchGetPayorInfoRequest(
                    insuranceName, provider, providerPayorId, additionalProperties);
        }
    }
}
