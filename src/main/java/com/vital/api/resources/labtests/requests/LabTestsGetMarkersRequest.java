/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LabTestsGetMarkersRequest.Builder.class)
public final class LabTestsGetMarkersRequest {
    private final Optional<List<Integer>> labId;

    private final Optional<String> name;

    private final Optional<Boolean> aLaCarteEnabled;

    private final Optional<String> labAccountId;

    private final Optional<Integer> page;

    private final Optional<Integer> size;

    private final Map<String, Object> additionalProperties;

    private LabTestsGetMarkersRequest(
            Optional<List<Integer>> labId,
            Optional<String> name,
            Optional<Boolean> aLaCarteEnabled,
            Optional<String> labAccountId,
            Optional<Integer> page,
            Optional<Integer> size,
            Map<String, Object> additionalProperties) {
        this.labId = labId;
        this.name = name;
        this.aLaCarteEnabled = aLaCarteEnabled;
        this.labAccountId = labAccountId;
        this.page = page;
        this.size = size;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The identifier Vital assigned to a lab partner.
     */
    @JsonProperty("lab_id")
    public Optional<List<Integer>> getLabId() {
        return labId;
    }

    /**
     * @return The name or test code of an individual biomarker or a panel.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("a_la_carte_enabled")
    public Optional<Boolean> getALaCarteEnabled() {
        return aLaCarteEnabled;
    }

    /**
     * @return The lab account ID. This lab account is used to determine the availability of markers and lab tests.
     */
    @JsonProperty("lab_account_id")
    public Optional<String> getLabAccountId() {
        return labAccountId;
    }

    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    @JsonProperty("size")
    public Optional<Integer> getSize() {
        return size;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabTestsGetMarkersRequest && equalTo((LabTestsGetMarkersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabTestsGetMarkersRequest other) {
        return labId.equals(other.labId)
                && name.equals(other.name)
                && aLaCarteEnabled.equals(other.aLaCarteEnabled)
                && labAccountId.equals(other.labAccountId)
                && page.equals(other.page)
                && size.equals(other.size);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.labId, this.name, this.aLaCarteEnabled, this.labAccountId, this.page, this.size);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Integer>> labId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Boolean> aLaCarteEnabled = Optional.empty();

        private Optional<String> labAccountId = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> size = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LabTestsGetMarkersRequest other) {
            labId(other.getLabId());
            name(other.getName());
            aLaCarteEnabled(other.getALaCarteEnabled());
            labAccountId(other.getLabAccountId());
            page(other.getPage());
            size(other.getSize());
            return this;
        }

        /**
         * <p>The identifier Vital assigned to a lab partner.</p>
         */
        @JsonSetter(value = "lab_id", nulls = Nulls.SKIP)
        public Builder labId(Optional<List<Integer>> labId) {
            this.labId = labId;
            return this;
        }

        public Builder labId(List<Integer> labId) {
            this.labId = Optional.ofNullable(labId);
            return this;
        }

        public Builder labId(Integer labId) {
            this.labId = Optional.of(Collections.singletonList(labId));
            return this;
        }

        /**
         * <p>The name or test code of an individual biomarker or a panel.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "a_la_carte_enabled", nulls = Nulls.SKIP)
        public Builder aLaCarteEnabled(Optional<Boolean> aLaCarteEnabled) {
            this.aLaCarteEnabled = aLaCarteEnabled;
            return this;
        }

        public Builder aLaCarteEnabled(Boolean aLaCarteEnabled) {
            this.aLaCarteEnabled = Optional.ofNullable(aLaCarteEnabled);
            return this;
        }

        /**
         * <p>The lab account ID. This lab account is used to determine the availability of markers and lab tests.</p>
         */
        @JsonSetter(value = "lab_account_id", nulls = Nulls.SKIP)
        public Builder labAccountId(Optional<String> labAccountId) {
            this.labAccountId = labAccountId;
            return this;
        }

        public Builder labAccountId(String labAccountId) {
            this.labAccountId = Optional.ofNullable(labAccountId);
            return this;
        }

        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @JsonSetter(value = "size", nulls = Nulls.SKIP)
        public Builder size(Optional<Integer> size) {
            this.size = size;
            return this;
        }

        public Builder size(Integer size) {
            this.size = Optional.ofNullable(size);
            return this;
        }

        public LabTestsGetMarkersRequest build() {
            return new LabTestsGetMarkersRequest(
                    labId, name, aLaCarteEnabled, labAccountId, page, size, additionalProperties);
        }
    }
}
