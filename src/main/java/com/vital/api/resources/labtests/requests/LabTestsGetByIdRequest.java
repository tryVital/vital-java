/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LabTestsGetByIdRequest.Builder.class)
public final class LabTestsGetByIdRequest {
    private final Optional<String> labAccountId;

    private final Map<String, Object> additionalProperties;

    private LabTestsGetByIdRequest(Optional<String> labAccountId, Map<String, Object> additionalProperties) {
        this.labAccountId = labAccountId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The lab account ID. This lab account is used to determine the availability of markers and lab tests.
     */
    @JsonProperty("lab_account_id")
    public Optional<String> getLabAccountId() {
        return labAccountId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabTestsGetByIdRequest && equalTo((LabTestsGetByIdRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabTestsGetByIdRequest other) {
        return labAccountId.equals(other.labAccountId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.labAccountId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> labAccountId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LabTestsGetByIdRequest other) {
            labAccountId(other.getLabAccountId());
            return this;
        }

        /**
         * <p>The lab account ID. This lab account is used to determine the availability of markers and lab tests.</p>
         */
        @JsonSetter(value = "lab_account_id", nulls = Nulls.SKIP)
        public Builder labAccountId(Optional<String> labAccountId) {
            this.labAccountId = labAccountId;
            return this;
        }

        public Builder labAccountId(String labAccountId) {
            this.labAccountId = Optional.ofNullable(labAccountId);
            return this;
        }

        public LabTestsGetByIdRequest build() {
            return new LabTestsGetByIdRequest(labAccountId, additionalProperties);
        }
    }
}
