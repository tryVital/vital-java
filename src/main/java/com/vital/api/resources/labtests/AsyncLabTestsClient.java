/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests;

import com.vital.api.core.ClientOptions;
import com.vital.api.core.RequestOptions;
import com.vital.api.resources.labtests.requests.ApiApiV1EndpointsVitalApiLabTestingOrdersHelpersAppointmentCancelRequest;
import com.vital.api.resources.labtests.requests.CreateLabTestRequest;
import com.vital.api.resources.labtests.requests.CreateOrderRequestCompatible;
import com.vital.api.resources.labtests.requests.ImportOrderBody;
import com.vital.api.resources.labtests.requests.LabTestsGetAreaInfoRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetByIdRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetLabelsPdfRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetMarkersByLabAndProviderIdRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetMarkersForLabTestRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetMarkersForOrderSetRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetMarkersRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetOrderPscInfoRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetOrdersRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetPaginatedRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetPhlebotomyAppointmentAvailabilityRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetPscAppointmentAvailabilityRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetPscInfoRequest;
import com.vital.api.resources.labtests.requests.LabTestsGetRequest;
import com.vital.api.resources.labtests.requests.LabTestsSimulateOrderProcessRequest;
import com.vital.api.resources.labtests.requests.RequestAppointmentRequest;
import com.vital.api.resources.labtests.requests.UpdateLabTestRequest;
import com.vital.api.resources.labtests.requests.VitalCoreClientsLabTestGetlabsSchemaAppointmentCancelRequest;
import com.vital.api.types.AppointmentAvailabilitySlots;
import com.vital.api.types.AppointmentBookingRequest;
import com.vital.api.types.AppointmentRescheduleRequest;
import com.vital.api.types.AreaInfo;
import com.vital.api.types.ClientFacingAppointment;
import com.vital.api.types.ClientFacingAppointmentCancellationReason;
import com.vital.api.types.ClientFacingLab;
import com.vital.api.types.ClientFacingLabTest;
import com.vital.api.types.ClientFacingMarker;
import com.vital.api.types.ClientFacingOrder;
import com.vital.api.types.GetMarkersResponse;
import com.vital.api.types.GetOrdersResponse;
import com.vital.api.types.LabResultsMetadata;
import com.vital.api.types.LabResultsRaw;
import com.vital.api.types.LabTestResourcesResponse;
import com.vital.api.types.PostOrderResponse;
import com.vital.api.types.PscInfo;
import java.io.InputStream;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncLabTestsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawLabTestsClient rawClient;

    public AsyncLabTestsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawLabTestsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawLabTestsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * GET all the lab tests the team has access to.
     */
    public CompletableFuture<List<ClientFacingLabTest>> get() {
        return this.rawClient.get().thenApply(response -> response.body());
    }

    /**
     * GET all the lab tests the team has access to.
     */
    public CompletableFuture<List<ClientFacingLabTest>> get(LabTestsGetRequest request) {
        return this.rawClient.get(request).thenApply(response -> response.body());
    }

    /**
     * GET all the lab tests the team has access to.
     */
    public CompletableFuture<List<ClientFacingLabTest>> get(LabTestsGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingLabTest> create(CreateLabTestRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingLabTest> create(CreateLabTestRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * GET all the lab tests the team has access to.
     */
    public CompletableFuture<ClientFacingLabTest> getById(String labTestId) {
        return this.rawClient.getById(labTestId).thenApply(response -> response.body());
    }

    /**
     * GET all the lab tests the team has access to.
     */
    public CompletableFuture<ClientFacingLabTest> getById(String labTestId, LabTestsGetByIdRequest request) {
        return this.rawClient.getById(labTestId, request).thenApply(response -> response.body());
    }

    /**
     * GET all the lab tests the team has access to.
     */
    public CompletableFuture<ClientFacingLabTest> getById(
            String labTestId, LabTestsGetByIdRequest request, RequestOptions requestOptions) {
        return this.rawClient.getById(labTestId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingLabTest> updateLabTest(String labTestId) {
        return this.rawClient.updateLabTest(labTestId).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingLabTest> updateLabTest(String labTestId, UpdateLabTestRequest request) {
        return this.rawClient.updateLabTest(labTestId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingLabTest> updateLabTest(
            String labTestId, UpdateLabTestRequest request, RequestOptions requestOptions) {
        return this.rawClient.updateLabTest(labTestId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * GET all the markers for the given lab.
     */
    public CompletableFuture<GetMarkersResponse> getMarkers() {
        return this.rawClient.getMarkers().thenApply(response -> response.body());
    }

    /**
     * GET all the markers for the given lab.
     */
    public CompletableFuture<GetMarkersResponse> getMarkers(LabTestsGetMarkersRequest request) {
        return this.rawClient.getMarkers(request).thenApply(response -> response.body());
    }

    /**
     * GET all the markers for the given lab.
     */
    public CompletableFuture<GetMarkersResponse> getMarkers(
            LabTestsGetMarkersRequest request, RequestOptions requestOptions) {
        return this.rawClient.getMarkers(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<GetMarkersResponse> getMarkersForOrderSet(LabTestsGetMarkersForOrderSetRequest request) {
        return this.rawClient.getMarkersForOrderSet(request).thenApply(response -> response.body());
    }

    public CompletableFuture<GetMarkersResponse> getMarkersForOrderSet(
            LabTestsGetMarkersForOrderSetRequest request, RequestOptions requestOptions) {
        return this.rawClient.getMarkersForOrderSet(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<GetMarkersResponse> getMarkersForLabTest(String labTestId) {
        return this.rawClient.getMarkersForLabTest(labTestId).thenApply(response -> response.body());
    }

    public CompletableFuture<GetMarkersResponse> getMarkersForLabTest(
            String labTestId, LabTestsGetMarkersForLabTestRequest request) {
        return this.rawClient.getMarkersForLabTest(labTestId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<GetMarkersResponse> getMarkersForLabTest(
            String labTestId, LabTestsGetMarkersForLabTestRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .getMarkersForLabTest(labTestId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * GET a specific marker for the given lab and provider_id
     */
    public CompletableFuture<ClientFacingMarker> getMarkersByLabAndProviderId(String providerId, int labId) {
        return this.rawClient.getMarkersByLabAndProviderId(providerId, labId).thenApply(response -> response.body());
    }

    /**
     * GET a specific marker for the given lab and provider_id
     */
    public CompletableFuture<ClientFacingMarker> getMarkersByLabAndProviderId(
            String providerId, int labId, LabTestsGetMarkersByLabAndProviderIdRequest request) {
        return this.rawClient
                .getMarkersByLabAndProviderId(providerId, labId, request)
                .thenApply(response -> response.body());
    }

    /**
     * GET a specific marker for the given lab and provider_id
     */
    public CompletableFuture<ClientFacingMarker> getMarkersByLabAndProviderId(
            String providerId,
            int labId,
            LabTestsGetMarkersByLabAndProviderIdRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .getMarkersByLabAndProviderId(providerId, labId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * GET all the labs.
     */
    public CompletableFuture<List<ClientFacingLab>> getLabs() {
        return this.rawClient.getLabs().thenApply(response -> response.body());
    }

    /**
     * GET all the labs.
     */
    public CompletableFuture<List<ClientFacingLab>> getLabs(RequestOptions requestOptions) {
        return this.rawClient.getLabs(requestOptions).thenApply(response -> response.body());
    }

    /**
     * GET lab tests the team has access to as a paginated list.
     */
    public CompletableFuture<LabTestResourcesResponse> getPaginated() {
        return this.rawClient.getPaginated().thenApply(response -> response.body());
    }

    /**
     * GET lab tests the team has access to as a paginated list.
     */
    public CompletableFuture<LabTestResourcesResponse> getPaginated(LabTestsGetPaginatedRequest request) {
        return this.rawClient.getPaginated(request).thenApply(response -> response.body());
    }

    /**
     * GET lab tests the team has access to as a paginated list.
     */
    public CompletableFuture<LabTestResourcesResponse> getPaginated(
            LabTestsGetPaginatedRequest request, RequestOptions requestOptions) {
        return this.rawClient.getPaginated(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<InputStream> getLabTestCollectionInstructionPdf(String labTestId) {
        return this.rawClient.getLabTestCollectionInstructionPdf(labTestId).thenApply(response -> response.body());
    }

    public CompletableFuture<InputStream> getLabTestCollectionInstructionPdf(
            String labTestId, RequestOptions requestOptions) {
        return this.rawClient
                .getLabTestCollectionInstructionPdf(labTestId, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * GET many orders with filters.
     */
    public CompletableFuture<GetOrdersResponse> getOrders() {
        return this.rawClient.getOrders().thenApply(response -> response.body());
    }

    /**
     * GET many orders with filters.
     */
    public CompletableFuture<GetOrdersResponse> getOrders(LabTestsGetOrdersRequest request) {
        return this.rawClient.getOrders(request).thenApply(response -> response.body());
    }

    /**
     * GET many orders with filters.
     */
    public CompletableFuture<GetOrdersResponse> getOrders(
            LabTestsGetOrdersRequest request, RequestOptions requestOptions) {
        return this.rawClient.getOrders(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Return the available time slots to book an appointment with a phlebotomist
     * for the given address and order.
     */
    public CompletableFuture<AppointmentAvailabilitySlots> getPhlebotomyAppointmentAvailability(
            LabTestsGetPhlebotomyAppointmentAvailabilityRequest request) {
        return this.rawClient.getPhlebotomyAppointmentAvailability(request).thenApply(response -> response.body());
    }

    /**
     * Return the available time slots to book an appointment with a phlebotomist
     * for the given address and order.
     */
    public CompletableFuture<AppointmentAvailabilitySlots> getPhlebotomyAppointmentAvailability(
            LabTestsGetPhlebotomyAppointmentAvailabilityRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .getPhlebotomyAppointmentAvailability(request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Book an at-home phlebotomy appointment.
     */
    public CompletableFuture<ClientFacingAppointment> bookPhlebotomyAppointment(
            String orderId, AppointmentBookingRequest request) {
        return this.rawClient.bookPhlebotomyAppointment(orderId, request).thenApply(response -> response.body());
    }

    /**
     * Book an at-home phlebotomy appointment.
     */
    public CompletableFuture<ClientFacingAppointment> bookPhlebotomyAppointment(
            String orderId, AppointmentBookingRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .bookPhlebotomyAppointment(orderId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Request an at-home phlebotomy appointment.
     */
    public CompletableFuture<ClientFacingAppointment> requestPhlebotomyAppointment(
            String orderId, RequestAppointmentRequest request) {
        return this.rawClient.requestPhlebotomyAppointment(orderId, request).thenApply(response -> response.body());
    }

    /**
     * Request an at-home phlebotomy appointment.
     */
    public CompletableFuture<ClientFacingAppointment> requestPhlebotomyAppointment(
            String orderId, RequestAppointmentRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .requestPhlebotomyAppointment(orderId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Reschedule a previously booked at-home phlebotomy appointment.
     */
    public CompletableFuture<ClientFacingAppointment> reschedulePhlebotomyAppointment(
            String orderId, AppointmentRescheduleRequest request) {
        return this.rawClient.reschedulePhlebotomyAppointment(orderId, request).thenApply(response -> response.body());
    }

    /**
     * Reschedule a previously booked at-home phlebotomy appointment.
     */
    public CompletableFuture<ClientFacingAppointment> reschedulePhlebotomyAppointment(
            String orderId, AppointmentRescheduleRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .reschedulePhlebotomyAppointment(orderId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Cancel a previously booked at-home phlebotomy appointment.
     */
    public CompletableFuture<ClientFacingAppointment> cancelPhlebotomyAppointment(
            String orderId, ApiApiV1EndpointsVitalApiLabTestingOrdersHelpersAppointmentCancelRequest request) {
        return this.rawClient.cancelPhlebotomyAppointment(orderId, request).thenApply(response -> response.body());
    }

    /**
     * Cancel a previously booked at-home phlebotomy appointment.
     */
    public CompletableFuture<ClientFacingAppointment> cancelPhlebotomyAppointment(
            String orderId,
            ApiApiV1EndpointsVitalApiLabTestingOrdersHelpersAppointmentCancelRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .cancelPhlebotomyAppointment(orderId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Get the list of reasons for cancelling an at-home phlebotomy appointment.
     */
    public CompletableFuture<List<ClientFacingAppointmentCancellationReason>>
            getPhlebotomyAppointmentCancellationReason() {
        return this.rawClient.getPhlebotomyAppointmentCancellationReason().thenApply(response -> response.body());
    }

    /**
     * Get the list of reasons for cancelling an at-home phlebotomy appointment.
     */
    public CompletableFuture<List<ClientFacingAppointmentCancellationReason>>
            getPhlebotomyAppointmentCancellationReason(RequestOptions requestOptions) {
        return this.rawClient
                .getPhlebotomyAppointmentCancellationReason(requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Get the appointment associated with an order.
     */
    public CompletableFuture<ClientFacingAppointment> getPhlebotomyAppointment(String orderId) {
        return this.rawClient.getPhlebotomyAppointment(orderId).thenApply(response -> response.body());
    }

    /**
     * Get the appointment associated with an order.
     */
    public CompletableFuture<ClientFacingAppointment> getPhlebotomyAppointment(
            String orderId, RequestOptions requestOptions) {
        return this.rawClient.getPhlebotomyAppointment(orderId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * GET information about an area with respect to lab-testing.
     * <p>Information returned:</p>
     * <ul>
     * <li>Whether a given zip code is served by our Phlebotomy network.</li>
     * <li>List of Lab locations in the area.</li>
     * </ul>
     */
    public CompletableFuture<AreaInfo> getAreaInfo(LabTestsGetAreaInfoRequest request) {
        return this.rawClient.getAreaInfo(request).thenApply(response -> response.body());
    }

    /**
     * GET information about an area with respect to lab-testing.
     * <p>Information returned:</p>
     * <ul>
     * <li>Whether a given zip code is served by our Phlebotomy network.</li>
     * <li>List of Lab locations in the area.</li>
     * </ul>
     */
    public CompletableFuture<AreaInfo> getAreaInfo(LabTestsGetAreaInfoRequest request, RequestOptions requestOptions) {
        return this.rawClient.getAreaInfo(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<PscInfo> getPscInfo(LabTestsGetPscInfoRequest request) {
        return this.rawClient.getPscInfo(request).thenApply(response -> response.body());
    }

    public CompletableFuture<PscInfo> getPscInfo(LabTestsGetPscInfoRequest request, RequestOptions requestOptions) {
        return this.rawClient.getPscInfo(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<PscInfo> getOrderPscInfo(String orderId) {
        return this.rawClient.getOrderPscInfo(orderId).thenApply(response -> response.body());
    }

    public CompletableFuture<PscInfo> getOrderPscInfo(String orderId, LabTestsGetOrderPscInfoRequest request) {
        return this.rawClient.getOrderPscInfo(orderId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<PscInfo> getOrderPscInfo(
            String orderId, LabTestsGetOrderPscInfoRequest request, RequestOptions requestOptions) {
        return this.rawClient.getOrderPscInfo(orderId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This endpoint returns the lab results for the order.
     */
    public CompletableFuture<InputStream> getResultPdf(String orderId) {
        return this.rawClient.getResultPdf(orderId).thenApply(response -> response.body());
    }

    /**
     * This endpoint returns the lab results for the order.
     */
    public CompletableFuture<InputStream> getResultPdf(String orderId, RequestOptions requestOptions) {
        return this.rawClient.getResultPdf(orderId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Return metadata related to order results, such as lab metadata,
     * provider and sample dates.
     */
    public CompletableFuture<LabResultsMetadata> getResultMetadata(String orderId) {
        return this.rawClient.getResultMetadata(orderId).thenApply(response -> response.body());
    }

    /**
     * Return metadata related to order results, such as lab metadata,
     * provider and sample dates.
     */
    public CompletableFuture<LabResultsMetadata> getResultMetadata(String orderId, RequestOptions requestOptions) {
        return this.rawClient.getResultMetadata(orderId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Return both metadata and raw json test data
     */
    public CompletableFuture<LabResultsRaw> getResultRaw(String orderId) {
        return this.rawClient.getResultRaw(orderId).thenApply(response -> response.body());
    }

    /**
     * Return both metadata and raw json test data
     */
    public CompletableFuture<LabResultsRaw> getResultRaw(String orderId, RequestOptions requestOptions) {
        return this.rawClient.getResultRaw(orderId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This endpoint returns the printed labels for the order.
     */
    public CompletableFuture<InputStream> getLabelsPdf(String orderId, LabTestsGetLabelsPdfRequest request) {
        return this.rawClient.getLabelsPdf(orderId, request).thenApply(response -> response.body());
    }

    /**
     * This endpoint returns the printed labels for the order.
     */
    public CompletableFuture<InputStream> getLabelsPdf(
            String orderId, LabTestsGetLabelsPdfRequest request, RequestOptions requestOptions) {
        return this.rawClient.getLabelsPdf(orderId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<AppointmentAvailabilitySlots> getPscAppointmentAvailability(
            LabTestsGetPscAppointmentAvailabilityRequest request) {
        return this.rawClient.getPscAppointmentAvailability(request).thenApply(response -> response.body());
    }

    public CompletableFuture<AppointmentAvailabilitySlots> getPscAppointmentAvailability(
            LabTestsGetPscAppointmentAvailabilityRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .getPscAppointmentAvailability(request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingAppointment> bookPscAppointment(
            String orderId, AppointmentBookingRequest request) {
        return this.rawClient.bookPscAppointment(orderId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingAppointment> bookPscAppointment(
            String orderId, AppointmentBookingRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .bookPscAppointment(orderId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingAppointment> reschedulePscAppointment(
            String orderId, AppointmentRescheduleRequest request) {
        return this.rawClient.reschedulePscAppointment(orderId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingAppointment> reschedulePscAppointment(
            String orderId, AppointmentRescheduleRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .reschedulePscAppointment(orderId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingAppointment> cancelPscAppointment(
            String orderId, VitalCoreClientsLabTestGetlabsSchemaAppointmentCancelRequest request) {
        return this.rawClient.cancelPscAppointment(orderId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingAppointment> cancelPscAppointment(
            String orderId,
            VitalCoreClientsLabTestGetlabsSchemaAppointmentCancelRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .cancelPscAppointment(orderId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<List<ClientFacingAppointmentCancellationReason>> getPscAppointmentCancellationReason() {
        return this.rawClient.getPscAppointmentCancellationReason().thenApply(response -> response.body());
    }

    public CompletableFuture<List<ClientFacingAppointmentCancellationReason>> getPscAppointmentCancellationReason(
            RequestOptions requestOptions) {
        return this.rawClient
                .getPscAppointmentCancellationReason(requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Get the appointment associated with an order.
     */
    public CompletableFuture<ClientFacingAppointment> getPscAppointment(String orderId) {
        return this.rawClient.getPscAppointment(orderId).thenApply(response -> response.body());
    }

    /**
     * Get the appointment associated with an order.
     */
    public CompletableFuture<ClientFacingAppointment> getPscAppointment(String orderId, RequestOptions requestOptions) {
        return this.rawClient.getPscAppointment(orderId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * GET collection instructions for an order
     */
    public CompletableFuture<InputStream> getOrderCollectionInstructionPdf(String orderId) {
        return this.rawClient.getOrderCollectionInstructionPdf(orderId).thenApply(response -> response.body());
    }

    /**
     * GET collection instructions for an order
     */
    public CompletableFuture<InputStream> getOrderCollectionInstructionPdf(
            String orderId, RequestOptions requestOptions) {
        return this.rawClient
                .getOrderCollectionInstructionPdf(orderId, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * GET requisition pdf for an order
     */
    public CompletableFuture<InputStream> getOrderRequistionPdf(String orderId) {
        return this.rawClient.getOrderRequistionPdf(orderId).thenApply(response -> response.body());
    }

    /**
     * GET requisition pdf for an order
     */
    public CompletableFuture<InputStream> getOrderRequistionPdf(String orderId, RequestOptions requestOptions) {
        return this.rawClient.getOrderRequistionPdf(orderId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * GET ABN pdf for an order
     */
    public CompletableFuture<InputStream> getOrderAbnPdf(String orderId) {
        return this.rawClient.getOrderAbnPdf(orderId).thenApply(response -> response.body());
    }

    /**
     * GET ABN pdf for an order
     */
    public CompletableFuture<InputStream> getOrderAbnPdf(String orderId, RequestOptions requestOptions) {
        return this.rawClient.getOrderAbnPdf(orderId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * GET individual order by ID.
     */
    public CompletableFuture<ClientFacingOrder> getOrder(String orderId) {
        return this.rawClient.getOrder(orderId).thenApply(response -> response.body());
    }

    /**
     * GET individual order by ID.
     */
    public CompletableFuture<ClientFacingOrder> getOrder(String orderId, RequestOptions requestOptions) {
        return this.rawClient.getOrder(orderId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<PostOrderResponse> createOrder(CreateOrderRequestCompatible request) {
        return this.rawClient.createOrder(request).thenApply(response -> response.body());
    }

    public CompletableFuture<PostOrderResponse> createOrder(
            CreateOrderRequestCompatible request, RequestOptions requestOptions) {
        return this.rawClient.createOrder(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<PostOrderResponse> importOrder(ImportOrderBody request) {
        return this.rawClient.importOrder(request).thenApply(response -> response.body());
    }

    public CompletableFuture<PostOrderResponse> importOrder(ImportOrderBody request, RequestOptions requestOptions) {
        return this.rawClient.importOrder(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * POST cancel order
     */
    public CompletableFuture<PostOrderResponse> cancelOrder(String orderId) {
        return this.rawClient.cancelOrder(orderId).thenApply(response -> response.body());
    }

    /**
     * POST cancel order
     */
    public CompletableFuture<PostOrderResponse> cancelOrder(String orderId, RequestOptions requestOptions) {
        return this.rawClient.cancelOrder(orderId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get available test kits.
     */
    public CompletableFuture<Object> simulateOrderProcess(String orderId) {
        return this.rawClient.simulateOrderProcess(orderId).thenApply(response -> response.body());
    }

    /**
     * Get available test kits.
     */
    public CompletableFuture<Object> simulateOrderProcess(String orderId, LabTestsSimulateOrderProcessRequest request) {
        return this.rawClient.simulateOrderProcess(orderId, request).thenApply(response -> response.body());
    }

    /**
     * Get available test kits.
     */
    public CompletableFuture<Object> simulateOrderProcess(
            String orderId, LabTestsSimulateOrderProcessRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .simulateOrderProcess(orderId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * PATCH update on site collection order when draw is completed
     */
    public CompletableFuture<PostOrderResponse> updateOnSiteCollectionOrderDrawCompleted(String orderId) {
        return this.rawClient.updateOnSiteCollectionOrderDrawCompleted(orderId).thenApply(response -> response.body());
    }

    /**
     * PATCH update on site collection order when draw is completed
     */
    public CompletableFuture<PostOrderResponse> updateOnSiteCollectionOrderDrawCompleted(
            String orderId, RequestOptions requestOptions) {
        return this.rawClient
                .updateOnSiteCollectionOrderDrawCompleted(orderId, requestOptions)
                .thenApply(response -> response.body());
    }
}
