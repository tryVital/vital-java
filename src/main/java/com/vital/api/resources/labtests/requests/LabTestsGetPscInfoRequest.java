/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.types.AllowedRadius;
import com.vital.api.types.LabLocationCapability;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LabTestsGetPscInfoRequest.Builder.class)
public final class LabTestsGetPscInfoRequest {
    private final Optional<List<LabLocationCapability>> capabilities;

    private final String zipCode;

    private final int labId;

    private final Optional<AllowedRadius> radius;

    private final Map<String, Object> additionalProperties;

    private LabTestsGetPscInfoRequest(
            Optional<List<LabLocationCapability>> capabilities,
            String zipCode,
            int labId,
            Optional<AllowedRadius> radius,
            Map<String, Object> additionalProperties) {
        this.capabilities = capabilities;
        this.zipCode = zipCode;
        this.labId = labId;
        this.radius = radius;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filter for only locations with certain capabilities
     */
    @JsonProperty("capabilities")
    public Optional<List<LabLocationCapability>> getCapabilities() {
        return capabilities;
    }

    /**
     * @return Zip code of the area to check
     */
    @JsonProperty("zip_code")
    public String getZipCode() {
        return zipCode;
    }

    /**
     * @return Lab ID to check for PSCs
     */
    @JsonProperty("lab_id")
    public int getLabId() {
        return labId;
    }

    /**
     * @return Radius in which to search in miles. Note that we limit to 30 PSCs.
     */
    @JsonProperty("radius")
    public Optional<AllowedRadius> getRadius() {
        return radius;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabTestsGetPscInfoRequest && equalTo((LabTestsGetPscInfoRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabTestsGetPscInfoRequest other) {
        return capabilities.equals(other.capabilities)
                && zipCode.equals(other.zipCode)
                && labId == other.labId
                && radius.equals(other.radius);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.capabilities, this.zipCode, this.labId, this.radius);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ZipCodeStage builder() {
        return new Builder();
    }

    public interface ZipCodeStage {
        /**
         * <p>Zip code of the area to check</p>
         */
        LabIdStage zipCode(@NotNull String zipCode);

        Builder from(LabTestsGetPscInfoRequest other);
    }

    public interface LabIdStage {
        /**
         * <p>Lab ID to check for PSCs</p>
         */
        _FinalStage labId(int labId);
    }

    public interface _FinalStage {
        LabTestsGetPscInfoRequest build();

        /**
         * <p>Filter for only locations with certain capabilities</p>
         */
        _FinalStage capabilities(Optional<List<LabLocationCapability>> capabilities);

        _FinalStage capabilities(List<LabLocationCapability> capabilities);

        _FinalStage capabilities(LabLocationCapability capabilities);

        /**
         * <p>Radius in which to search in miles. Note that we limit to 30 PSCs.</p>
         */
        _FinalStage radius(Optional<AllowedRadius> radius);

        _FinalStage radius(AllowedRadius radius);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ZipCodeStage, LabIdStage, _FinalStage {
        private String zipCode;

        private int labId;

        private Optional<AllowedRadius> radius = Optional.empty();

        private Optional<List<LabLocationCapability>> capabilities = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LabTestsGetPscInfoRequest other) {
            capabilities(other.getCapabilities());
            zipCode(other.getZipCode());
            labId(other.getLabId());
            radius(other.getRadius());
            return this;
        }

        /**
         * <p>Zip code of the area to check</p>
         * <p>Zip code of the area to check</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("zip_code")
        public LabIdStage zipCode(@NotNull String zipCode) {
            this.zipCode = Objects.requireNonNull(zipCode, "zipCode must not be null");
            return this;
        }

        /**
         * <p>Lab ID to check for PSCs</p>
         * <p>Lab ID to check for PSCs</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("lab_id")
        public _FinalStage labId(int labId) {
            this.labId = labId;
            return this;
        }

        /**
         * <p>Radius in which to search in miles. Note that we limit to 30 PSCs.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage radius(AllowedRadius radius) {
            this.radius = Optional.ofNullable(radius);
            return this;
        }

        /**
         * <p>Radius in which to search in miles. Note that we limit to 30 PSCs.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "radius", nulls = Nulls.SKIP)
        public _FinalStage radius(Optional<AllowedRadius> radius) {
            this.radius = radius;
            return this;
        }

        @java.lang.Override
        public _FinalStage capabilities(LabLocationCapability capabilities) {
            this.capabilities = Optional.of(Collections.singletonList(capabilities));
            return this;
        }

        /**
         * <p>Filter for only locations with certain capabilities</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage capabilities(List<LabLocationCapability> capabilities) {
            this.capabilities = Optional.ofNullable(capabilities);
            return this;
        }

        /**
         * <p>Filter for only locations with certain capabilities</p>
         */
        @java.lang.Override
        @JsonSetter(value = "capabilities", nulls = Nulls.SKIP)
        public _FinalStage capabilities(Optional<List<LabLocationCapability>> capabilities) {
            this.capabilities = capabilities;
            return this;
        }

        @java.lang.Override
        public LabTestsGetPscInfoRequest build() {
            return new LabTestsGetPscInfoRequest(capabilities, zipCode, labId, radius, additionalProperties);
        }
    }
}
