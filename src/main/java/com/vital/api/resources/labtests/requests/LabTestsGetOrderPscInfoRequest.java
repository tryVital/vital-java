/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.types.AllowedRadius;
import com.vital.api.types.LabLocationCapability;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LabTestsGetOrderPscInfoRequest.Builder.class)
public final class LabTestsGetOrderPscInfoRequest {
    private final Optional<List<LabLocationCapability>> capabilities;

    private final Optional<AllowedRadius> radius;

    private final Map<String, Object> additionalProperties;

    private LabTestsGetOrderPscInfoRequest(
            Optional<List<LabLocationCapability>> capabilities,
            Optional<AllowedRadius> radius,
            Map<String, Object> additionalProperties) {
        this.capabilities = capabilities;
        this.radius = radius;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filter for only locations with certain capabilities
     */
    @JsonProperty("capabilities")
    public Optional<List<LabLocationCapability>> getCapabilities() {
        return capabilities;
    }

    /**
     * @return Radius in which to search in miles
     */
    @JsonProperty("radius")
    public Optional<AllowedRadius> getRadius() {
        return radius;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabTestsGetOrderPscInfoRequest && equalTo((LabTestsGetOrderPscInfoRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabTestsGetOrderPscInfoRequest other) {
        return capabilities.equals(other.capabilities) && radius.equals(other.radius);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.capabilities, this.radius);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<LabLocationCapability>> capabilities = Optional.empty();

        private Optional<AllowedRadius> radius = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LabTestsGetOrderPscInfoRequest other) {
            capabilities(other.getCapabilities());
            radius(other.getRadius());
            return this;
        }

        /**
         * <p>Filter for only locations with certain capabilities</p>
         */
        @JsonSetter(value = "capabilities", nulls = Nulls.SKIP)
        public Builder capabilities(Optional<List<LabLocationCapability>> capabilities) {
            this.capabilities = capabilities;
            return this;
        }

        public Builder capabilities(List<LabLocationCapability> capabilities) {
            this.capabilities = Optional.ofNullable(capabilities);
            return this;
        }

        public Builder capabilities(LabLocationCapability capabilities) {
            this.capabilities = Optional.of(Collections.singletonList(capabilities));
            return this;
        }

        /**
         * <p>Radius in which to search in miles</p>
         */
        @JsonSetter(value = "radius", nulls = Nulls.SKIP)
        public Builder radius(Optional<AllowedRadius> radius) {
            this.radius = radius;
            return this;
        }

        public Builder radius(AllowedRadius radius) {
            this.radius = Optional.ofNullable(radius);
            return this;
        }

        public LabTestsGetOrderPscInfoRequest build() {
            return new LabTestsGetOrderPscInfoRequest(capabilities, radius, additionalProperties);
        }
    }
}
