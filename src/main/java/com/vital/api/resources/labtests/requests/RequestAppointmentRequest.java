/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.types.AppointmentProvider;
import com.vital.api.types.UsAddress;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestAppointmentRequest.Builder.class)
public final class RequestAppointmentRequest {
    private final UsAddress address;

    private final AppointmentProvider provider;

    private final Map<String, Object> additionalProperties;

    private RequestAppointmentRequest(
            UsAddress address, AppointmentProvider provider, Map<String, Object> additionalProperties) {
        this.address = address;
        this.provider = provider;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return At-home phlebotomy appointment address.
     */
    @JsonProperty("address")
    public UsAddress getAddress() {
        return address;
    }

    @JsonProperty("provider")
    public AppointmentProvider getProvider() {
        return provider;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestAppointmentRequest && equalTo((RequestAppointmentRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestAppointmentRequest other) {
        return address.equals(other.address) && provider.equals(other.provider);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.address, this.provider);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AddressStage builder() {
        return new Builder();
    }

    public interface AddressStage {
        /**
         * <p>At-home phlebotomy appointment address.</p>
         */
        ProviderStage address(@NotNull UsAddress address);

        Builder from(RequestAppointmentRequest other);
    }

    public interface ProviderStage {
        _FinalStage provider(@NotNull AppointmentProvider provider);
    }

    public interface _FinalStage {
        RequestAppointmentRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AddressStage, ProviderStage, _FinalStage {
        private UsAddress address;

        private AppointmentProvider provider;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RequestAppointmentRequest other) {
            address(other.getAddress());
            provider(other.getProvider());
            return this;
        }

        /**
         * <p>At-home phlebotomy appointment address.</p>
         * <p>At-home phlebotomy appointment address.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("address")
        public ProviderStage address(@NotNull UsAddress address) {
            this.address = Objects.requireNonNull(address, "address must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("provider")
        public _FinalStage provider(@NotNull AppointmentProvider provider) {
            this.provider = Objects.requireNonNull(provider, "provider must not be null");
            return this;
        }

        @java.lang.Override
        public RequestAppointmentRequest build() {
            return new RequestAppointmentRequest(address, provider, additionalProperties);
        }
    }
}
