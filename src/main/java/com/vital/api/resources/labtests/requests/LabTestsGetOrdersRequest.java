/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.resources.labtests.types.LabTestsGetOrdersRequestOrderDirection;
import com.vital.api.resources.labtests.types.LabTestsGetOrdersRequestOrderKey;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = LabTestsGetOrdersRequest.Builder.class)
public final class LabTestsGetOrdersRequest {
    private final Optional<String> searchInput;

    private final Optional<OffsetDateTime> startDate;

    private final Optional<OffsetDateTime> endDate;

    private final Optional<OffsetDateTime> updatedStartDate;

    private final Optional<OffsetDateTime> updatedEndDate;

    private final Optional<LabTestsGetOrdersRequestOrderKey> orderKey;

    private final Optional<LabTestsGetOrdersRequestOrderDirection> orderDirection;

    private final Optional<String> userId;

    private final Optional<String> patientName;

    private final Optional<String> shippingRecipientName;

    private final Optional<String> orderIds;

    private final Optional<Integer> page;

    private final Optional<Integer> size;

    private final Map<String, Object> additionalProperties;

    private LabTestsGetOrdersRequest(
            Optional<String> searchInput,
            Optional<OffsetDateTime> startDate,
            Optional<OffsetDateTime> endDate,
            Optional<OffsetDateTime> updatedStartDate,
            Optional<OffsetDateTime> updatedEndDate,
            Optional<LabTestsGetOrdersRequestOrderKey> orderKey,
            Optional<LabTestsGetOrdersRequestOrderDirection> orderDirection,
            Optional<String> userId,
            Optional<String> patientName,
            Optional<String> shippingRecipientName,
            Optional<String> orderIds,
            Optional<Integer> page,
            Optional<Integer> size,
            Map<String, Object> additionalProperties) {
        this.searchInput = searchInput;
        this.startDate = startDate;
        this.endDate = endDate;
        this.updatedStartDate = updatedStartDate;
        this.updatedEndDate = updatedEndDate;
        this.orderKey = orderKey;
        this.orderDirection = orderDirection;
        this.userId = userId;
        this.patientName = patientName;
        this.shippingRecipientName = shippingRecipientName;
        this.orderIds = orderIds;
        this.page = page;
        this.size = size;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Search by order id, user id, patient name, shipping dob, or shipping recipient name.
     */
    @JsonProperty("search_input")
    public Optional<String> getSearchInput() {
        return searchInput;
    }

    /**
     * @return Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
     */
    @JsonProperty("start_date")
    public Optional<OffsetDateTime> getStartDate() {
        return startDate;
    }

    /**
     * @return Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
     */
    @JsonProperty("end_date")
    public Optional<OffsetDateTime> getEndDate() {
        return endDate;
    }

    /**
     * @return Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
     */
    @JsonProperty("updated_start_date")
    public Optional<OffsetDateTime> getUpdatedStartDate() {
        return updatedStartDate;
    }

    /**
     * @return Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
     */
    @JsonProperty("updated_end_date")
    public Optional<OffsetDateTime> getUpdatedEndDate() {
        return updatedEndDate;
    }

    @JsonProperty("order_key")
    public Optional<LabTestsGetOrdersRequestOrderKey> getOrderKey() {
        return orderKey;
    }

    @JsonProperty("order_direction")
    public Optional<LabTestsGetOrdersRequestOrderDirection> getOrderDirection() {
        return orderDirection;
    }

    /**
     * @return Filter by user ID.
     */
    @JsonProperty("user_id")
    public Optional<String> getUserId() {
        return userId;
    }

    /**
     * @return Filter by patient name.
     */
    @JsonProperty("patient_name")
    public Optional<String> getPatientName() {
        return patientName;
    }

    /**
     * @return Filter by shipping recipient name.
     */
    @JsonProperty("shipping_recipient_name")
    public Optional<String> getShippingRecipientName() {
        return shippingRecipientName;
    }

    /**
     * @return Filter by order ids.
     */
    @JsonProperty("order_ids")
    public Optional<String> getOrderIds() {
        return orderIds;
    }

    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    @JsonProperty("size")
    public Optional<Integer> getSize() {
        return size;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabTestsGetOrdersRequest && equalTo((LabTestsGetOrdersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabTestsGetOrdersRequest other) {
        return searchInput.equals(other.searchInput)
                && startDate.equals(other.startDate)
                && endDate.equals(other.endDate)
                && updatedStartDate.equals(other.updatedStartDate)
                && updatedEndDate.equals(other.updatedEndDate)
                && orderKey.equals(other.orderKey)
                && orderDirection.equals(other.orderDirection)
                && userId.equals(other.userId)
                && patientName.equals(other.patientName)
                && shippingRecipientName.equals(other.shippingRecipientName)
                && orderIds.equals(other.orderIds)
                && page.equals(other.page)
                && size.equals(other.size);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.searchInput,
                this.startDate,
                this.endDate,
                this.updatedStartDate,
                this.updatedEndDate,
                this.orderKey,
                this.orderDirection,
                this.userId,
                this.patientName,
                this.shippingRecipientName,
                this.orderIds,
                this.page,
                this.size);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> searchInput = Optional.empty();

        private Optional<OffsetDateTime> startDate = Optional.empty();

        private Optional<OffsetDateTime> endDate = Optional.empty();

        private Optional<OffsetDateTime> updatedStartDate = Optional.empty();

        private Optional<OffsetDateTime> updatedEndDate = Optional.empty();

        private Optional<LabTestsGetOrdersRequestOrderKey> orderKey = Optional.empty();

        private Optional<LabTestsGetOrdersRequestOrderDirection> orderDirection = Optional.empty();

        private Optional<String> userId = Optional.empty();

        private Optional<String> patientName = Optional.empty();

        private Optional<String> shippingRecipientName = Optional.empty();

        private Optional<String> orderIds = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> size = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LabTestsGetOrdersRequest other) {
            searchInput(other.getSearchInput());
            startDate(other.getStartDate());
            endDate(other.getEndDate());
            updatedStartDate(other.getUpdatedStartDate());
            updatedEndDate(other.getUpdatedEndDate());
            orderKey(other.getOrderKey());
            orderDirection(other.getOrderDirection());
            userId(other.getUserId());
            patientName(other.getPatientName());
            shippingRecipientName(other.getShippingRecipientName());
            orderIds(other.getOrderIds());
            page(other.getPage());
            size(other.getSize());
            return this;
        }

        @JsonSetter(value = "search_input", nulls = Nulls.SKIP)
        public Builder searchInput(Optional<String> searchInput) {
            this.searchInput = searchInput;
            return this;
        }

        public Builder searchInput(String searchInput) {
            this.searchInput = Optional.of(searchInput);
            return this;
        }

        @JsonSetter(value = "start_date", nulls = Nulls.SKIP)
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            this.startDate = Optional.of(startDate);
            return this;
        }

        @JsonSetter(value = "end_date", nulls = Nulls.SKIP)
        public Builder endDate(Optional<OffsetDateTime> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(OffsetDateTime endDate) {
            this.endDate = Optional.of(endDate);
            return this;
        }

        @JsonSetter(value = "updated_start_date", nulls = Nulls.SKIP)
        public Builder updatedStartDate(Optional<OffsetDateTime> updatedStartDate) {
            this.updatedStartDate = updatedStartDate;
            return this;
        }

        public Builder updatedStartDate(OffsetDateTime updatedStartDate) {
            this.updatedStartDate = Optional.of(updatedStartDate);
            return this;
        }

        @JsonSetter(value = "updated_end_date", nulls = Nulls.SKIP)
        public Builder updatedEndDate(Optional<OffsetDateTime> updatedEndDate) {
            this.updatedEndDate = updatedEndDate;
            return this;
        }

        public Builder updatedEndDate(OffsetDateTime updatedEndDate) {
            this.updatedEndDate = Optional.of(updatedEndDate);
            return this;
        }

        @JsonSetter(value = "order_key", nulls = Nulls.SKIP)
        public Builder orderKey(Optional<LabTestsGetOrdersRequestOrderKey> orderKey) {
            this.orderKey = orderKey;
            return this;
        }

        public Builder orderKey(LabTestsGetOrdersRequestOrderKey orderKey) {
            this.orderKey = Optional.of(orderKey);
            return this;
        }

        @JsonSetter(value = "order_direction", nulls = Nulls.SKIP)
        public Builder orderDirection(Optional<LabTestsGetOrdersRequestOrderDirection> orderDirection) {
            this.orderDirection = orderDirection;
            return this;
        }

        public Builder orderDirection(LabTestsGetOrdersRequestOrderDirection orderDirection) {
            this.orderDirection = Optional.of(orderDirection);
            return this;
        }

        @JsonSetter(value = "user_id", nulls = Nulls.SKIP)
        public Builder userId(Optional<String> userId) {
            this.userId = userId;
            return this;
        }

        public Builder userId(String userId) {
            this.userId = Optional.of(userId);
            return this;
        }

        @JsonSetter(value = "patient_name", nulls = Nulls.SKIP)
        public Builder patientName(Optional<String> patientName) {
            this.patientName = patientName;
            return this;
        }

        public Builder patientName(String patientName) {
            this.patientName = Optional.of(patientName);
            return this;
        }

        @JsonSetter(value = "shipping_recipient_name", nulls = Nulls.SKIP)
        public Builder shippingRecipientName(Optional<String> shippingRecipientName) {
            this.shippingRecipientName = shippingRecipientName;
            return this;
        }

        public Builder shippingRecipientName(String shippingRecipientName) {
            this.shippingRecipientName = Optional.of(shippingRecipientName);
            return this;
        }

        @JsonSetter(value = "order_ids", nulls = Nulls.SKIP)
        public Builder orderIds(Optional<String> orderIds) {
            this.orderIds = orderIds;
            return this;
        }

        public Builder orderIds(String orderIds) {
            this.orderIds = Optional.of(orderIds);
            return this;
        }

        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.of(page);
            return this;
        }

        @JsonSetter(value = "size", nulls = Nulls.SKIP)
        public Builder size(Optional<Integer> size) {
            this.size = size;
            return this;
        }

        public Builder size(Integer size) {
            this.size = Optional.of(size);
            return this;
        }

        public LabTestsGetOrdersRequest build() {
            return new LabTestsGetOrdersRequest(
                    searchInput,
                    startDate,
                    endDate,
                    updatedStartDate,
                    updatedEndDate,
                    orderKey,
                    orderDirection,
                    userId,
                    patientName,
                    shippingRecipientName,
                    orderIds,
                    page,
                    size,
                    additionalProperties);
        }
    }
}
