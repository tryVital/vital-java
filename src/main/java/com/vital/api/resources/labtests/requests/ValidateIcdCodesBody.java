/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ValidateIcdCodesBody.Builder.class)
public final class ValidateIcdCodesBody {
    private final List<String> codes;

    private final Map<String, Object> additionalProperties;

    private ValidateIcdCodesBody(List<String> codes, Map<String, Object> additionalProperties) {
        this.codes = codes;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("codes")
    public List<String> getCodes() {
        return codes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ValidateIcdCodesBody && equalTo((ValidateIcdCodesBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ValidateIcdCodesBody other) {
        return codes.equals(other.codes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.codes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> codes = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ValidateIcdCodesBody other) {
            codes(other.getCodes());
            return this;
        }

        @JsonSetter(value = "codes", nulls = Nulls.SKIP)
        public Builder codes(List<String> codes) {
            this.codes.clear();
            this.codes.addAll(codes);
            return this;
        }

        public Builder addCodes(String codes) {
            this.codes.add(codes);
            return this;
        }

        public Builder addAllCodes(List<String> codes) {
            if (codes != null) {
                this.codes.addAll(codes);
            }
            return this;
        }

        public ValidateIcdCodesBody build() {
            return new ValidateIcdCodesBody(codes, additionalProperties);
        }
    }
}
