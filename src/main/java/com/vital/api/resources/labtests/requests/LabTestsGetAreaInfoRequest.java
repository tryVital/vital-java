/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.types.AllowedRadius;
import com.vital.api.types.ClientFacingLabs;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LabTestsGetAreaInfoRequest.Builder.class)
public final class LabTestsGetAreaInfoRequest {
    private final Optional<List<ClientFacingLabs>> labs;

    private final String zipCode;

    private final Optional<AllowedRadius> radius;

    private final Optional<ClientFacingLabs> lab;

    private final Optional<String> labAccountId;

    private final Map<String, Object> additionalProperties;

    private LabTestsGetAreaInfoRequest(
            Optional<List<ClientFacingLabs>> labs,
            String zipCode,
            Optional<AllowedRadius> radius,
            Optional<ClientFacingLabs> lab,
            Optional<String> labAccountId,
            Map<String, Object> additionalProperties) {
        this.labs = labs;
        this.zipCode = zipCode;
        this.radius = radius;
        this.lab = lab;
        this.labAccountId = labAccountId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return List of labs to check for PSCs
     */
    @JsonProperty("labs")
    public Optional<List<ClientFacingLabs>> getLabs() {
        return labs;
    }

    /**
     * @return Zip code of the area to check
     */
    @JsonProperty("zip_code")
    public String getZipCode() {
        return zipCode;
    }

    /**
     * @return Radius in which to search in miles
     */
    @JsonProperty("radius")
    public Optional<AllowedRadius> getRadius() {
        return radius;
    }

    /**
     * @return Lab to check for PSCs
     */
    @JsonProperty("lab")
    public Optional<ClientFacingLabs> getLab() {
        return lab;
    }

    /**
     * @return Lab Account ID to use for availability checks
     */
    @JsonProperty("lab_account_id")
    public Optional<String> getLabAccountId() {
        return labAccountId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabTestsGetAreaInfoRequest && equalTo((LabTestsGetAreaInfoRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabTestsGetAreaInfoRequest other) {
        return labs.equals(other.labs)
                && zipCode.equals(other.zipCode)
                && radius.equals(other.radius)
                && lab.equals(other.lab)
                && labAccountId.equals(other.labAccountId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.labs, this.zipCode, this.radius, this.lab, this.labAccountId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ZipCodeStage builder() {
        return new Builder();
    }

    public interface ZipCodeStage {
        /**
         * <p>Zip code of the area to check</p>
         */
        _FinalStage zipCode(@NotNull String zipCode);

        Builder from(LabTestsGetAreaInfoRequest other);
    }

    public interface _FinalStage {
        LabTestsGetAreaInfoRequest build();

        /**
         * <p>List of labs to check for PSCs</p>
         */
        _FinalStage labs(Optional<List<ClientFacingLabs>> labs);

        _FinalStage labs(List<ClientFacingLabs> labs);

        _FinalStage labs(ClientFacingLabs labs);

        /**
         * <p>Radius in which to search in miles</p>
         */
        _FinalStage radius(Optional<AllowedRadius> radius);

        _FinalStage radius(AllowedRadius radius);

        /**
         * <p>Lab to check for PSCs</p>
         */
        _FinalStage lab(Optional<ClientFacingLabs> lab);

        _FinalStage lab(ClientFacingLabs lab);

        /**
         * <p>Lab Account ID to use for availability checks</p>
         */
        _FinalStage labAccountId(Optional<String> labAccountId);

        _FinalStage labAccountId(String labAccountId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ZipCodeStage, _FinalStage {
        private String zipCode;

        private Optional<String> labAccountId = Optional.empty();

        private Optional<ClientFacingLabs> lab = Optional.empty();

        private Optional<AllowedRadius> radius = Optional.empty();

        private Optional<List<ClientFacingLabs>> labs = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LabTestsGetAreaInfoRequest other) {
            labs(other.getLabs());
            zipCode(other.getZipCode());
            radius(other.getRadius());
            lab(other.getLab());
            labAccountId(other.getLabAccountId());
            return this;
        }

        /**
         * <p>Zip code of the area to check</p>
         * <p>Zip code of the area to check</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("zip_code")
        public _FinalStage zipCode(@NotNull String zipCode) {
            this.zipCode = Objects.requireNonNull(zipCode, "zipCode must not be null");
            return this;
        }

        /**
         * <p>Lab Account ID to use for availability checks</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage labAccountId(String labAccountId) {
            this.labAccountId = Optional.ofNullable(labAccountId);
            return this;
        }

        /**
         * <p>Lab Account ID to use for availability checks</p>
         */
        @java.lang.Override
        @JsonSetter(value = "lab_account_id", nulls = Nulls.SKIP)
        public _FinalStage labAccountId(Optional<String> labAccountId) {
            this.labAccountId = labAccountId;
            return this;
        }

        /**
         * <p>Lab to check for PSCs</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lab(ClientFacingLabs lab) {
            this.lab = Optional.ofNullable(lab);
            return this;
        }

        /**
         * <p>Lab to check for PSCs</p>
         */
        @java.lang.Override
        @JsonSetter(value = "lab", nulls = Nulls.SKIP)
        public _FinalStage lab(Optional<ClientFacingLabs> lab) {
            this.lab = lab;
            return this;
        }

        /**
         * <p>Radius in which to search in miles</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage radius(AllowedRadius radius) {
            this.radius = Optional.ofNullable(radius);
            return this;
        }

        /**
         * <p>Radius in which to search in miles</p>
         */
        @java.lang.Override
        @JsonSetter(value = "radius", nulls = Nulls.SKIP)
        public _FinalStage radius(Optional<AllowedRadius> radius) {
            this.radius = radius;
            return this;
        }

        @java.lang.Override
        public _FinalStage labs(ClientFacingLabs labs) {
            this.labs = Optional.of(Collections.singletonList(labs));
            return this;
        }

        /**
         * <p>List of labs to check for PSCs</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage labs(List<ClientFacingLabs> labs) {
            this.labs = Optional.ofNullable(labs);
            return this;
        }

        /**
         * <p>List of labs to check for PSCs</p>
         */
        @java.lang.Override
        @JsonSetter(value = "labs", nulls = Nulls.SKIP)
        public _FinalStage labs(Optional<List<ClientFacingLabs>> labs) {
            this.labs = labs;
            return this;
        }

        @java.lang.Override
        public LabTestsGetAreaInfoRequest build() {
            return new LabTestsGetAreaInfoRequest(labs, zipCode, radius, lab, labAccountId, additionalProperties);
        }
    }
}
