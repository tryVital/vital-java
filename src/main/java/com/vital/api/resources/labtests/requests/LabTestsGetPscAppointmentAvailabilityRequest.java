/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.types.AllowedRadius;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LabTestsGetPscAppointmentAvailabilityRequest.Builder.class)
public final class LabTestsGetPscAppointmentAvailabilityRequest {
    private final Optional<List<String>> siteCodes;

    private final String lab;

    private final Optional<String> startDate;

    private final Optional<String> zipCode;

    private final Optional<AllowedRadius> radius;

    private final Map<String, Object> additionalProperties;

    private LabTestsGetPscAppointmentAvailabilityRequest(
            Optional<List<String>> siteCodes,
            String lab,
            Optional<String> startDate,
            Optional<String> zipCode,
            Optional<AllowedRadius> radius,
            Map<String, Object> additionalProperties) {
        this.siteCodes = siteCodes;
        this.lab = lab;
        this.startDate = startDate;
        this.zipCode = zipCode;
        this.radius = radius;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return List of site codes to fetch availability for
     */
    @JsonProperty("site_codes")
    public Optional<List<String>> getSiteCodes() {
        return siteCodes;
    }

    /**
     * @return Lab to check for availability
     */
    @JsonProperty("lab")
    public String getLab() {
        return lab;
    }

    /**
     * @return Start date for appointment availability
     */
    @JsonProperty("start_date")
    public Optional<String> getStartDate() {
        return startDate;
    }

    /**
     * @return Zip code of the area to check
     */
    @JsonProperty("zip_code")
    public Optional<String> getZipCode() {
        return zipCode;
    }

    /**
     * @return Radius in which to search. (meters)
     */
    @JsonProperty("radius")
    public Optional<AllowedRadius> getRadius() {
        return radius;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabTestsGetPscAppointmentAvailabilityRequest
                && equalTo((LabTestsGetPscAppointmentAvailabilityRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabTestsGetPscAppointmentAvailabilityRequest other) {
        return siteCodes.equals(other.siteCodes)
                && lab.equals(other.lab)
                && startDate.equals(other.startDate)
                && zipCode.equals(other.zipCode)
                && radius.equals(other.radius);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.siteCodes, this.lab, this.startDate, this.zipCode, this.radius);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LabStage builder() {
        return new Builder();
    }

    public interface LabStage {
        /**
         * <p>Lab to check for availability</p>
         */
        _FinalStage lab(@NotNull String lab);

        Builder from(LabTestsGetPscAppointmentAvailabilityRequest other);
    }

    public interface _FinalStage {
        LabTestsGetPscAppointmentAvailabilityRequest build();

        /**
         * <p>List of site codes to fetch availability for</p>
         */
        _FinalStage siteCodes(Optional<List<String>> siteCodes);

        _FinalStage siteCodes(List<String> siteCodes);

        _FinalStage siteCodes(String siteCodes);

        /**
         * <p>Start date for appointment availability</p>
         */
        _FinalStage startDate(Optional<String> startDate);

        _FinalStage startDate(String startDate);

        /**
         * <p>Zip code of the area to check</p>
         */
        _FinalStage zipCode(Optional<String> zipCode);

        _FinalStage zipCode(String zipCode);

        /**
         * <p>Radius in which to search. (meters)</p>
         */
        _FinalStage radius(Optional<AllowedRadius> radius);

        _FinalStage radius(AllowedRadius radius);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LabStage, _FinalStage {
        private String lab;

        private Optional<AllowedRadius> radius = Optional.empty();

        private Optional<String> zipCode = Optional.empty();

        private Optional<String> startDate = Optional.empty();

        private Optional<List<String>> siteCodes = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LabTestsGetPscAppointmentAvailabilityRequest other) {
            siteCodes(other.getSiteCodes());
            lab(other.getLab());
            startDate(other.getStartDate());
            zipCode(other.getZipCode());
            radius(other.getRadius());
            return this;
        }

        /**
         * <p>Lab to check for availability</p>
         * <p>Lab to check for availability</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("lab")
        public _FinalStage lab(@NotNull String lab) {
            this.lab = Objects.requireNonNull(lab, "lab must not be null");
            return this;
        }

        /**
         * <p>Radius in which to search. (meters)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage radius(AllowedRadius radius) {
            this.radius = Optional.ofNullable(radius);
            return this;
        }

        /**
         * <p>Radius in which to search. (meters)</p>
         */
        @java.lang.Override
        @JsonSetter(value = "radius", nulls = Nulls.SKIP)
        public _FinalStage radius(Optional<AllowedRadius> radius) {
            this.radius = radius;
            return this;
        }

        /**
         * <p>Zip code of the area to check</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage zipCode(String zipCode) {
            this.zipCode = Optional.ofNullable(zipCode);
            return this;
        }

        /**
         * <p>Zip code of the area to check</p>
         */
        @java.lang.Override
        @JsonSetter(value = "zip_code", nulls = Nulls.SKIP)
        public _FinalStage zipCode(Optional<String> zipCode) {
            this.zipCode = zipCode;
            return this;
        }

        /**
         * <p>Start date for appointment availability</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage startDate(String startDate) {
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * <p>Start date for appointment availability</p>
         */
        @java.lang.Override
        @JsonSetter(value = "start_date", nulls = Nulls.SKIP)
        public _FinalStage startDate(Optional<String> startDate) {
            this.startDate = startDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage siteCodes(String siteCodes) {
            this.siteCodes = Optional.of(Collections.singletonList(siteCodes));
            return this;
        }

        /**
         * <p>List of site codes to fetch availability for</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage siteCodes(List<String> siteCodes) {
            this.siteCodes = Optional.ofNullable(siteCodes);
            return this;
        }

        /**
         * <p>List of site codes to fetch availability for</p>
         */
        @java.lang.Override
        @JsonSetter(value = "site_codes", nulls = Nulls.SKIP)
        public _FinalStage siteCodes(Optional<List<String>> siteCodes) {
            this.siteCodes = siteCodes;
            return this;
        }

        @java.lang.Override
        public LabTestsGetPscAppointmentAvailabilityRequest build() {
            return new LabTestsGetPscAppointmentAvailabilityRequest(
                    siteCodes, lab, startDate, zipCode, radius, additionalProperties);
        }
    }
}
