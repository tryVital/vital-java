/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.types.Billing;
import com.vital.api.types.LabTestCollectionMethod;
import com.vital.api.types.OrderSetRequest;
import com.vital.api.types.PatientAddress;
import com.vital.api.types.PatientDetailsWithValidation;
import com.vital.api.types.PhysicianCreateRequest;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ImportOrderBody.Builder.class)
public final class ImportOrderBody {
    private final String userId;

    private final Billing billingType;

    private final OrderSetRequest orderSet;

    private final LabTestCollectionMethod collectionMethod;

    private final Optional<PhysicianCreateRequest> physician;

    private final PatientDetailsWithValidation patientDetails;

    private final PatientAddress patientAddress;

    private final String sampleId;

    private final Map<String, Object> additionalProperties;

    private ImportOrderBody(
            String userId,
            Billing billingType,
            OrderSetRequest orderSet,
            LabTestCollectionMethod collectionMethod,
            Optional<PhysicianCreateRequest> physician,
            PatientDetailsWithValidation patientDetails,
            PatientAddress patientAddress,
            String sampleId,
            Map<String, Object> additionalProperties) {
        this.userId = userId;
        this.billingType = billingType;
        this.orderSet = orderSet;
        this.collectionMethod = collectionMethod;
        this.physician = physician;
        this.patientDetails = patientDetails;
        this.patientAddress = patientAddress;
        this.sampleId = sampleId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("billing_type")
    public Billing getBillingType() {
        return billingType;
    }

    @JsonProperty("order_set")
    public OrderSetRequest getOrderSet() {
        return orderSet;
    }

    @JsonProperty("collection_method")
    public LabTestCollectionMethod getCollectionMethod() {
        return collectionMethod;
    }

    @JsonProperty("physician")
    public Optional<PhysicianCreateRequest> getPhysician() {
        return physician;
    }

    @JsonProperty("patient_details")
    public PatientDetailsWithValidation getPatientDetails() {
        return patientDetails;
    }

    @JsonProperty("patient_address")
    public PatientAddress getPatientAddress() {
        return patientAddress;
    }

    @JsonProperty("sample_id")
    public String getSampleId() {
        return sampleId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ImportOrderBody && equalTo((ImportOrderBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ImportOrderBody other) {
        return userId.equals(other.userId)
                && billingType.equals(other.billingType)
                && orderSet.equals(other.orderSet)
                && collectionMethod.equals(other.collectionMethod)
                && physician.equals(other.physician)
                && patientDetails.equals(other.patientDetails)
                && patientAddress.equals(other.patientAddress)
                && sampleId.equals(other.sampleId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.userId,
                this.billingType,
                this.orderSet,
                this.collectionMethod,
                this.physician,
                this.patientDetails,
                this.patientAddress,
                this.sampleId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        BillingTypeStage userId(@NotNull String userId);

        Builder from(ImportOrderBody other);
    }

    public interface BillingTypeStage {
        OrderSetStage billingType(@NotNull Billing billingType);
    }

    public interface OrderSetStage {
        CollectionMethodStage orderSet(@NotNull OrderSetRequest orderSet);
    }

    public interface CollectionMethodStage {
        PatientDetailsStage collectionMethod(@NotNull LabTestCollectionMethod collectionMethod);
    }

    public interface PatientDetailsStage {
        PatientAddressStage patientDetails(@NotNull PatientDetailsWithValidation patientDetails);
    }

    public interface PatientAddressStage {
        SampleIdStage patientAddress(@NotNull PatientAddress patientAddress);
    }

    public interface SampleIdStage {
        _FinalStage sampleId(@NotNull String sampleId);
    }

    public interface _FinalStage {
        ImportOrderBody build();

        _FinalStage physician(Optional<PhysicianCreateRequest> physician);

        _FinalStage physician(PhysicianCreateRequest physician);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements UserIdStage,
                    BillingTypeStage,
                    OrderSetStage,
                    CollectionMethodStage,
                    PatientDetailsStage,
                    PatientAddressStage,
                    SampleIdStage,
                    _FinalStage {
        private String userId;

        private Billing billingType;

        private OrderSetRequest orderSet;

        private LabTestCollectionMethod collectionMethod;

        private PatientDetailsWithValidation patientDetails;

        private PatientAddress patientAddress;

        private String sampleId;

        private Optional<PhysicianCreateRequest> physician = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ImportOrderBody other) {
            userId(other.getUserId());
            billingType(other.getBillingType());
            orderSet(other.getOrderSet());
            collectionMethod(other.getCollectionMethod());
            physician(other.getPhysician());
            patientDetails(other.getPatientDetails());
            patientAddress(other.getPatientAddress());
            sampleId(other.getSampleId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("user_id")
        public BillingTypeStage userId(@NotNull String userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("billing_type")
        public OrderSetStage billingType(@NotNull Billing billingType) {
            this.billingType = Objects.requireNonNull(billingType, "billingType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("order_set")
        public CollectionMethodStage orderSet(@NotNull OrderSetRequest orderSet) {
            this.orderSet = Objects.requireNonNull(orderSet, "orderSet must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("collection_method")
        public PatientDetailsStage collectionMethod(@NotNull LabTestCollectionMethod collectionMethod) {
            this.collectionMethod = Objects.requireNonNull(collectionMethod, "collectionMethod must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("patient_details")
        public PatientAddressStage patientDetails(@NotNull PatientDetailsWithValidation patientDetails) {
            this.patientDetails = Objects.requireNonNull(patientDetails, "patientDetails must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("patient_address")
        public SampleIdStage patientAddress(@NotNull PatientAddress patientAddress) {
            this.patientAddress = Objects.requireNonNull(patientAddress, "patientAddress must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("sample_id")
        public _FinalStage sampleId(@NotNull String sampleId) {
            this.sampleId = Objects.requireNonNull(sampleId, "sampleId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage physician(PhysicianCreateRequest physician) {
            this.physician = Optional.ofNullable(physician);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "physician", nulls = Nulls.SKIP)
        public _FinalStage physician(Optional<PhysicianCreateRequest> physician) {
            this.physician = physician;
            return this;
        }

        @java.lang.Override
        public ImportOrderBody build() {
            return new ImportOrderBody(
                    userId,
                    billingType,
                    orderSet,
                    collectionMethod,
                    physician,
                    patientDetails,
                    patientAddress,
                    sampleId,
                    additionalProperties);
        }
    }
}
