/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.labtests.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.types.LabTestCollectionMethod;
import com.vital.api.types.LabTestGenerationMethodFilter;
import com.vital.api.types.LabTestStatus;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = LabTestsGetRequest.Builder.class)
public final class LabTestsGetRequest {
    private final Optional<LabTestGenerationMethodFilter> generationMethod;

    private final Optional<String> labSlug;

    private final Optional<LabTestCollectionMethod> collectionMethod;

    private final Optional<LabTestStatus> status;

    private final Map<String, Object> additionalProperties;

    private LabTestsGetRequest(
            Optional<LabTestGenerationMethodFilter> generationMethod,
            Optional<String> labSlug,
            Optional<LabTestCollectionMethod> collectionMethod,
            Optional<LabTestStatus> status,
            Map<String, Object> additionalProperties) {
        this.generationMethod = generationMethod;
        this.labSlug = labSlug;
        this.collectionMethod = collectionMethod;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filter on whether auto-generated lab tests created by Vital, manually created lab tests, or all lab tests should be returned.
     */
    @JsonProperty("generation_method")
    public Optional<LabTestGenerationMethodFilter> getGenerationMethod() {
        return generationMethod;
    }

    /**
     * @return Filter by the slug of the lab for these lab tests.
     */
    @JsonProperty("lab_slug")
    public Optional<String> getLabSlug() {
        return labSlug;
    }

    /**
     * @return Filter by the collection method for these lab tests.
     */
    @JsonProperty("collection_method")
    public Optional<LabTestCollectionMethod> getCollectionMethod() {
        return collectionMethod;
    }

    /**
     * @return Filter by the status of these lab tests.
     */
    @JsonProperty("status")
    public Optional<LabTestStatus> getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabTestsGetRequest && equalTo((LabTestsGetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabTestsGetRequest other) {
        return generationMethod.equals(other.generationMethod)
                && labSlug.equals(other.labSlug)
                && collectionMethod.equals(other.collectionMethod)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.generationMethod, this.labSlug, this.collectionMethod, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<LabTestGenerationMethodFilter> generationMethod = Optional.empty();

        private Optional<String> labSlug = Optional.empty();

        private Optional<LabTestCollectionMethod> collectionMethod = Optional.empty();

        private Optional<LabTestStatus> status = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LabTestsGetRequest other) {
            generationMethod(other.getGenerationMethod());
            labSlug(other.getLabSlug());
            collectionMethod(other.getCollectionMethod());
            status(other.getStatus());
            return this;
        }

        @JsonSetter(value = "generation_method", nulls = Nulls.SKIP)
        public Builder generationMethod(Optional<LabTestGenerationMethodFilter> generationMethod) {
            this.generationMethod = generationMethod;
            return this;
        }

        public Builder generationMethod(LabTestGenerationMethodFilter generationMethod) {
            this.generationMethod = Optional.of(generationMethod);
            return this;
        }

        @JsonSetter(value = "lab_slug", nulls = Nulls.SKIP)
        public Builder labSlug(Optional<String> labSlug) {
            this.labSlug = labSlug;
            return this;
        }

        public Builder labSlug(String labSlug) {
            this.labSlug = Optional.of(labSlug);
            return this;
        }

        @JsonSetter(value = "collection_method", nulls = Nulls.SKIP)
        public Builder collectionMethod(Optional<LabTestCollectionMethod> collectionMethod) {
            this.collectionMethod = collectionMethod;
            return this;
        }

        public Builder collectionMethod(LabTestCollectionMethod collectionMethod) {
            this.collectionMethod = Optional.of(collectionMethod);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<LabTestStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(LabTestStatus status) {
            this.status = Optional.of(status);
            return this;
        }

        public LabTestsGetRequest build() {
            return new LabTestsGetRequest(generationMethod, labSlug, collectionMethod, status, additionalProperties);
        }
    }
}
