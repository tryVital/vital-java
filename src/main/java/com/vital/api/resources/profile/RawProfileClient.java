/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.profile;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.vital.api.core.ApiError;
import com.vital.api.core.ClientOptions;
import com.vital.api.core.ObjectMappers;
import com.vital.api.core.QueryStringMapper;
import com.vital.api.core.RequestOptions;
import com.vital.api.core.VitalException;
import com.vital.api.core.VitalHttpResponse;
import com.vital.api.errors.UnprocessableEntityError;
import com.vital.api.resources.profile.requests.ProfileGetRawRequest;
import com.vital.api.resources.profile.requests.ProfileGetRequest;
import com.vital.api.types.ClientFacingProfile;
import com.vital.api.types.HttpValidationError;
import com.vital.api.types.RawProfile;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawProfileClient {
    protected final ClientOptions clientOptions;

    public RawProfileClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Get profile for user_id
     */
    public VitalHttpResponse<ClientFacingProfile> get(String userId) {
        return get(userId, ProfileGetRequest.builder().build());
    }

    /**
     * Get profile for user_id
     */
    public VitalHttpResponse<ClientFacingProfile> get(String userId, ProfileGetRequest request) {
        return get(userId, request, null);
    }

    /**
     * Get profile for user_id
     */
    public VitalHttpResponse<ClientFacingProfile> get(
            String userId, ProfileGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/summary/profile")
                .addPathSegment(userId);
        if (request.getProvider().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "provider", request.getProvider().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new VitalHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ClientFacingProfile.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class),
                            response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VitalException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get raw profile for user_id
     */
    public VitalHttpResponse<RawProfile> getRaw(String userId) {
        return getRaw(userId, ProfileGetRawRequest.builder().build());
    }

    /**
     * Get raw profile for user_id
     */
    public VitalHttpResponse<RawProfile> getRaw(String userId, ProfileGetRawRequest request) {
        return getRaw(userId, request, null);
    }

    /**
     * Get raw profile for user_id
     */
    public VitalHttpResponse<RawProfile> getRaw(
            String userId, ProfileGetRawRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/summary/profile")
                .addPathSegment(userId)
                .addPathSegments("raw");
        if (request.getProvider().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "provider", request.getProvider().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new VitalHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), RawProfile.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class),
                            response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VitalException("Network error executing HTTP request", e);
        }
    }
}
