/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.providers.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ProvidersGetAllRequest.Builder.class)
public final class ProvidersGetAllRequest {
    private final Optional<String> sourceType;

    private final Map<String, Object> additionalProperties;

    private ProvidersGetAllRequest(Optional<String> sourceType, Map<String, Object> additionalProperties) {
        this.sourceType = sourceType;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("source_type")
    public Optional<String> getSourceType() {
        return sourceType;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProvidersGetAllRequest && equalTo((ProvidersGetAllRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProvidersGetAllRequest other) {
        return sourceType.equals(other.sourceType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.sourceType);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> sourceType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ProvidersGetAllRequest other) {
            sourceType(other.getSourceType());
            return this;
        }

        @JsonSetter(value = "source_type", nulls = Nulls.SKIP)
        public Builder sourceType(Optional<String> sourceType) {
            this.sourceType = sourceType;
            return this;
        }

        public Builder sourceType(String sourceType) {
            this.sourceType = Optional.of(sourceType);
            return this;
        }

        public ProvidersGetAllRequest build() {
            return new ProvidersGetAllRequest(sourceType, additionalProperties);
        }
    }
}
