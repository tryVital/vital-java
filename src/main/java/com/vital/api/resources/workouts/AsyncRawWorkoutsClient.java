/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.workouts;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.vital.api.core.ApiError;
import com.vital.api.core.ClientOptions;
import com.vital.api.core.ObjectMappers;
import com.vital.api.core.QueryStringMapper;
import com.vital.api.core.RequestOptions;
import com.vital.api.core.VitalException;
import com.vital.api.core.VitalHttpResponse;
import com.vital.api.errors.UnprocessableEntityError;
import com.vital.api.resources.workouts.requests.WorkoutsGetRawRequest;
import com.vital.api.resources.workouts.requests.WorkoutsGetRequest;
import com.vital.api.types.ClientFacingStream;
import com.vital.api.types.ClientWorkoutResponse;
import com.vital.api.types.HttpValidationError;
import com.vital.api.types.RawWorkout;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawWorkoutsClient {
    protected final ClientOptions clientOptions;

    public AsyncRawWorkoutsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Get workout summary for user_id
     */
    public CompletableFuture<VitalHttpResponse<ClientWorkoutResponse>> get(String userId, WorkoutsGetRequest request) {
        return get(userId, request, null);
    }

    /**
     * Get workout summary for user_id
     */
    public CompletableFuture<VitalHttpResponse<ClientWorkoutResponse>> get(
            String userId, WorkoutsGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/summary/workouts")
                .addPathSegment(userId);
        if (request.getProvider().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "provider", request.getProvider().get(), false);
        }
        QueryStringMapper.addQueryParameter(httpUrl, "start_date", request.getStartDate(), false);
        if (request.getEndDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "end_date", request.getEndDate().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<VitalHttpResponse<ClientWorkoutResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new VitalHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ClientWorkoutResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        if (response.code() == 422) {
                            future.completeExceptionally(new UnprocessableEntityError(
                                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class),
                                    response));
                            return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new ApiError(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new VitalException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new VitalException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Get raw workout summary for user_id
     */
    public CompletableFuture<VitalHttpResponse<RawWorkout>> getRaw(String userId, WorkoutsGetRawRequest request) {
        return getRaw(userId, request, null);
    }

    /**
     * Get raw workout summary for user_id
     */
    public CompletableFuture<VitalHttpResponse<RawWorkout>> getRaw(
            String userId, WorkoutsGetRawRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/summary/workouts")
                .addPathSegment(userId)
                .addPathSegments("raw");
        if (request.getProvider().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "provider", request.getProvider().get(), false);
        }
        QueryStringMapper.addQueryParameter(httpUrl, "start_date", request.getStartDate(), false);
        if (request.getEndDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "end_date", request.getEndDate().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<VitalHttpResponse<RawWorkout>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new VitalHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), RawWorkout.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        if (response.code() == 422) {
                            future.completeExceptionally(new UnprocessableEntityError(
                                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class),
                                    response));
                            return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new ApiError(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new VitalException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new VitalException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<VitalHttpResponse<ClientFacingStream>> getByWorkoutId(String workoutId) {
        return getByWorkoutId(workoutId, null);
    }

    public CompletableFuture<VitalHttpResponse<ClientFacingStream>> getByWorkoutId(
            String workoutId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/timeseries/workouts")
                .addPathSegment(workoutId)
                .addPathSegments("stream")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<VitalHttpResponse<ClientFacingStream>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new VitalHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ClientFacingStream.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        if (response.code() == 422) {
                            future.completeExceptionally(new UnprocessableEntityError(
                                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class),
                                    response));
                            return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new ApiError(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new VitalException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new VitalException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
