/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.aggregate;

import com.vital.api.core.ClientOptions;
import com.vital.api.core.RequestOptions;
import com.vital.api.resources.aggregate.requests.AggregateGetTaskHistoryForContinuousQueryRequest;
import com.vital.api.resources.aggregate.requests.QueryBatch;
import com.vital.api.types.AggregationResponse;
import com.vital.api.types.AggregationResult;
import com.vital.api.types.ContinuousQueryTaskHistoryResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncAggregateClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawAggregateClient rawClient;

    public AsyncAggregateClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawAggregateClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawAggregateClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<AggregationResponse> queryOne(String userId, QueryBatch request) {
        return this.rawClient.queryOne(userId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<AggregationResponse> queryOne(
            String userId, QueryBatch request, RequestOptions requestOptions) {
        return this.rawClient.queryOne(userId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<AggregationResult> getResultTableForContinuousQuery(String userId, String queryIdOrSlug) {
        return this.rawClient
                .getResultTableForContinuousQuery(userId, queryIdOrSlug)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<AggregationResult> getResultTableForContinuousQuery(
            String userId, String queryIdOrSlug, RequestOptions requestOptions) {
        return this.rawClient
                .getResultTableForContinuousQuery(userId, queryIdOrSlug, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<ContinuousQueryTaskHistoryResponse> getTaskHistoryForContinuousQuery(
            String userId, String queryIdOrSlug) {
        return this.rawClient
                .getTaskHistoryForContinuousQuery(userId, queryIdOrSlug)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<ContinuousQueryTaskHistoryResponse> getTaskHistoryForContinuousQuery(
            String userId, String queryIdOrSlug, AggregateGetTaskHistoryForContinuousQueryRequest request) {
        return this.rawClient
                .getTaskHistoryForContinuousQuery(userId, queryIdOrSlug, request)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<ContinuousQueryTaskHistoryResponse> getTaskHistoryForContinuousQuery(
            String userId,
            String queryIdOrSlug,
            AggregateGetTaskHistoryForContinuousQueryRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .getTaskHistoryForContinuousQuery(userId, queryIdOrSlug, request, requestOptions)
                .thenApply(response -> response.body());
    }
}
