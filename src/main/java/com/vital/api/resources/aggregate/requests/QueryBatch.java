/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.aggregate.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.resources.aggregate.types.QueryBatchTimeframe;
import com.vital.api.types.Query;
import com.vital.api.types.QueryConfig;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = QueryBatch.Builder.class)
public final class QueryBatch {
    private final QueryBatchTimeframe timeframe;

    private final List<Query> queries;

    private final Optional<QueryConfig> config;

    private final Map<String, Object> additionalProperties;

    private QueryBatch(
            QueryBatchTimeframe timeframe,
            List<Query> queries,
            Optional<QueryConfig> config,
            Map<String, Object> additionalProperties) {
        this.timeframe = timeframe;
        this.queries = queries;
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("accept")
    public String getAccept() {
        return "*/*";
    }

    @JsonProperty("timeframe")
    public QueryBatchTimeframe getTimeframe() {
        return timeframe;
    }

    @JsonProperty("queries")
    public List<Query> getQueries() {
        return queries;
    }

    @JsonProperty("config")
    public Optional<QueryConfig> getConfig() {
        return config;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryBatch && equalTo((QueryBatch) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryBatch other) {
        return timeframe.equals(other.timeframe) && queries.equals(other.queries) && config.equals(other.config);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.timeframe, this.queries, this.config);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TimeframeStage builder() {
        return new Builder();
    }

    public interface TimeframeStage {
        _FinalStage timeframe(QueryBatchTimeframe timeframe);

        Builder from(QueryBatch other);
    }

    public interface _FinalStage {
        QueryBatch build();

        _FinalStage queries(List<Query> queries);

        _FinalStage addQueries(Query queries);

        _FinalStage addAllQueries(List<Query> queries);

        _FinalStage config(Optional<QueryConfig> config);

        _FinalStage config(QueryConfig config);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TimeframeStage, _FinalStage {
        private QueryBatchTimeframe timeframe;

        private Optional<QueryConfig> config = Optional.empty();

        private List<Query> queries = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(QueryBatch other) {
            timeframe(other.getTimeframe());
            queries(other.getQueries());
            config(other.getConfig());
            return this;
        }

        @java.lang.Override
        @JsonSetter("timeframe")
        public _FinalStage timeframe(QueryBatchTimeframe timeframe) {
            this.timeframe = timeframe;
            return this;
        }

        @java.lang.Override
        public _FinalStage config(QueryConfig config) {
            this.config = Optional.of(config);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public _FinalStage config(Optional<QueryConfig> config) {
            this.config = config;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllQueries(List<Query> queries) {
            this.queries.addAll(queries);
            return this;
        }

        @java.lang.Override
        public _FinalStage addQueries(Query queries) {
            this.queries.add(queries);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "queries", nulls = Nulls.SKIP)
        public _FinalStage queries(List<Query> queries) {
            this.queries.clear();
            this.queries.addAll(queries);
            return this;
        }

        @java.lang.Override
        public QueryBatch build() {
            return new QueryBatch(timeframe, queries, config, additionalProperties);
        }
    }
}
