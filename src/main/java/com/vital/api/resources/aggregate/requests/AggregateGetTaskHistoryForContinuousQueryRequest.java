/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.aggregate.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AggregateGetTaskHistoryForContinuousQueryRequest.Builder.class)
public final class AggregateGetTaskHistoryForContinuousQueryRequest {
    private final Optional<String> nextCursor;

    private final Optional<Integer> limit;

    private final Map<String, Object> additionalProperties;

    private AggregateGetTaskHistoryForContinuousQueryRequest(
            Optional<String> nextCursor, Optional<Integer> limit, Map<String, Object> additionalProperties) {
        this.nextCursor = nextCursor;
        this.limit = limit;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("next_cursor")
    public Optional<String> getNextCursor() {
        return nextCursor;
    }

    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AggregateGetTaskHistoryForContinuousQueryRequest
                && equalTo((AggregateGetTaskHistoryForContinuousQueryRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AggregateGetTaskHistoryForContinuousQueryRequest other) {
        return nextCursor.equals(other.nextCursor) && limit.equals(other.limit);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.nextCursor, this.limit);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> nextCursor = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AggregateGetTaskHistoryForContinuousQueryRequest other) {
            nextCursor(other.getNextCursor());
            limit(other.getLimit());
            return this;
        }

        @JsonSetter(value = "next_cursor", nulls = Nulls.SKIP)
        public Builder nextCursor(Optional<String> nextCursor) {
            this.nextCursor = nextCursor;
            return this;
        }

        public Builder nextCursor(String nextCursor) {
            this.nextCursor = Optional.of(nextCursor);
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.of(limit);
            return this;
        }

        public AggregateGetTaskHistoryForContinuousQueryRequest build() {
            return new AggregateGetTaskHistoryForContinuousQueryRequest(nextCursor, limit, additionalProperties);
        }
    }
}
