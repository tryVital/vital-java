/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.timeseries;

import com.vital.api.core.ApiError;
import com.vital.api.core.ClientOptions;
import com.vital.api.core.ObjectMappers;
import com.vital.api.core.RequestOptions;
import com.vital.api.types.ClientFacingSleepStream;
import com.vital.api.types.ClientFacingStream;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;

public class TimeseriesClient {
    protected final ClientOptions clientOptions;

    public TimeseriesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Get Sleep stream for a user_id
     */
    public ClientFacingSleepStream getUserSleepStream(String sleepId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/timeseries/sleep")
                .addPathSegment(sleepId)
                .addPathSegments("stream")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), ClientFacingSleepStream.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Get Sleep stream for a user_id
     */
    public ClientFacingSleepStream getUserSleepStream(String sleepId) {
        return getUserSleepStream(sleepId, null);
    }

    public ClientFacingStream getUserWorkouts(String workoutId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/timeseries/workouts")
                .addPathSegment(workoutId)
                .addPathSegments("stream")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), ClientFacingStream.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public ClientFacingStream getUserWorkouts(String workoutId) {
        return getUserWorkouts(workoutId, null);
    }
}
