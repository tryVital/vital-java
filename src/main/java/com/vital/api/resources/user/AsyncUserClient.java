/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.user;

import com.vital.api.core.ClientOptions;
import com.vital.api.core.RequestOptions;
import com.vital.api.resources.user.requests.CreateInsuranceRequest;
import com.vital.api.resources.user.requests.UserCreateBody;
import com.vital.api.resources.user.requests.UserGetAllRequest;
import com.vital.api.resources.user.requests.UserInfoCreateRequest;
import com.vital.api.resources.user.requests.UserPatchBody;
import com.vital.api.resources.user.requests.UserRefreshRequest;
import com.vital.api.resources.user.requests.UserUndoDeleteRequest;
import com.vital.api.types.ClientFacingDevice;
import com.vital.api.types.ClientFacingInsurance;
import com.vital.api.types.ClientFacingProviderWithStatus;
import com.vital.api.types.ClientFacingUser;
import com.vital.api.types.ClientFacingUserKey;
import com.vital.api.types.MetricsResult;
import com.vital.api.types.PaginatedUsersResponse;
import com.vital.api.types.Providers;
import com.vital.api.types.UserInfo;
import com.vital.api.types.UserRefreshSuccessResponse;
import com.vital.api.types.UserSignInTokenResponse;
import com.vital.api.types.UserSuccessResponse;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

public class AsyncUserClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawUserClient rawClient;

    public AsyncUserClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawUserClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawUserClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * GET All users for team.
     */
    public CompletableFuture<PaginatedUsersResponse> getAll() {
        return this.rawClient.getAll().thenApply(response -> response.body());
    }

    /**
     * GET All users for team.
     */
    public CompletableFuture<PaginatedUsersResponse> getAll(UserGetAllRequest request) {
        return this.rawClient.getAll(request).thenApply(response -> response.body());
    }

    /**
     * GET All users for team.
     */
    public CompletableFuture<PaginatedUsersResponse> getAll(UserGetAllRequest request, RequestOptions requestOptions) {
        return this.rawClient.getAll(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * POST Create a Vital user given a client_user_id and returns the user_id.
     */
    public CompletableFuture<ClientFacingUserKey> create(UserCreateBody request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * POST Create a Vital user given a client_user_id and returns the user_id.
     */
    public CompletableFuture<ClientFacingUserKey> create(UserCreateBody request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * GET metrics for team.
     */
    public CompletableFuture<MetricsResult> getTeamMetrics() {
        return this.rawClient.getTeamMetrics().thenApply(response -> response.body());
    }

    /**
     * GET metrics for team.
     */
    public CompletableFuture<MetricsResult> getTeamMetrics(RequestOptions requestOptions) {
        return this.rawClient.getTeamMetrics(requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<UserSignInTokenResponse> getUserSignInToken(String userId) {
        return this.rawClient.getUserSignInToken(userId).thenApply(response -> response.body());
    }

    public CompletableFuture<UserSignInTokenResponse> getUserSignInToken(String userId, RequestOptions requestOptions) {
        return this.rawClient.getUserSignInToken(userId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * GET Users connected providers
     */
    public CompletableFuture<Map<String, List<ClientFacingProviderWithStatus>>> getConnectedProviders(String userId) {
        return this.rawClient.getConnectedProviders(userId).thenApply(response -> response.body());
    }

    /**
     * GET Users connected providers
     */
    public CompletableFuture<Map<String, List<ClientFacingProviderWithStatus>>> getConnectedProviders(
            String userId, RequestOptions requestOptions) {
        return this.rawClient.getConnectedProviders(userId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * GET User details given the user_id.
     */
    public CompletableFuture<ClientFacingUser> get(String userId) {
        return this.rawClient.get(userId).thenApply(response -> response.body());
    }

    /**
     * GET User details given the user_id.
     */
    public CompletableFuture<ClientFacingUser> get(String userId, RequestOptions requestOptions) {
        return this.rawClient.get(userId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<UserSuccessResponse> delete(String userId) {
        return this.rawClient.delete(userId).thenApply(response -> response.body());
    }

    public CompletableFuture<UserSuccessResponse> delete(String userId, RequestOptions requestOptions) {
        return this.rawClient.delete(userId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> patch(String userId) {
        return this.rawClient.patch(userId).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> patch(String userId, UserPatchBody request) {
        return this.rawClient.patch(userId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> patch(String userId, UserPatchBody request, RequestOptions requestOptions) {
        return this.rawClient.patch(userId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<UserInfo> getLatestUserInfo(String userId) {
        return this.rawClient.getLatestUserInfo(userId).thenApply(response -> response.body());
    }

    public CompletableFuture<UserInfo> getLatestUserInfo(String userId, RequestOptions requestOptions) {
        return this.rawClient.getLatestUserInfo(userId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingInsurance> createInsurance(String userId, CreateInsuranceRequest request) {
        return this.rawClient.createInsurance(userId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingInsurance> createInsurance(
            String userId, CreateInsuranceRequest request, RequestOptions requestOptions) {
        return this.rawClient.createInsurance(userId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingInsurance> getLatestInsurance(String userId) {
        return this.rawClient.getLatestInsurance(userId).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingInsurance> getLatestInsurance(String userId, RequestOptions requestOptions) {
        return this.rawClient.getLatestInsurance(userId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<UserInfo> upsertUserInfo(String userId, UserInfoCreateRequest request) {
        return this.rawClient.upsertUserInfo(userId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<UserInfo> upsertUserInfo(
            String userId, UserInfoCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.upsertUserInfo(userId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * GET user_id from client_user_id.
     */
    public CompletableFuture<ClientFacingUser> getByClientUserId(String clientUserId) {
        return this.rawClient.getByClientUserId(clientUserId).thenApply(response -> response.body());
    }

    /**
     * GET user_id from client_user_id.
     */
    public CompletableFuture<ClientFacingUser> getByClientUserId(String clientUserId, RequestOptions requestOptions) {
        return this.rawClient.getByClientUserId(clientUserId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<UserSuccessResponse> deregisterProvider(String userId, Providers provider) {
        return this.rawClient.deregisterProvider(userId, provider).thenApply(response -> response.body());
    }

    public CompletableFuture<UserSuccessResponse> deregisterProvider(
            String userId, Providers provider, RequestOptions requestOptions) {
        return this.rawClient
                .deregisterProvider(userId, provider, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<UserSuccessResponse> undoDelete() {
        return this.rawClient.undoDelete().thenApply(response -> response.body());
    }

    public CompletableFuture<UserSuccessResponse> undoDelete(UserUndoDeleteRequest request) {
        return this.rawClient.undoDelete(request).thenApply(response -> response.body());
    }

    public CompletableFuture<UserSuccessResponse> undoDelete(
            UserUndoDeleteRequest request, RequestOptions requestOptions) {
        return this.rawClient.undoDelete(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Trigger a manual refresh for a specific user
     */
    public CompletableFuture<UserRefreshSuccessResponse> refresh(String userId) {
        return this.rawClient.refresh(userId).thenApply(response -> response.body());
    }

    /**
     * Trigger a manual refresh for a specific user
     */
    public CompletableFuture<UserRefreshSuccessResponse> refresh(String userId, UserRefreshRequest request) {
        return this.rawClient.refresh(userId, request).thenApply(response -> response.body());
    }

    /**
     * Trigger a manual refresh for a specific user
     */
    public CompletableFuture<UserRefreshSuccessResponse> refresh(
            String userId, UserRefreshRequest request, RequestOptions requestOptions) {
        return this.rawClient.refresh(userId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<List<ClientFacingDevice>> getDevices(String userId) {
        return this.rawClient.getDevices(userId).thenApply(response -> response.body());
    }

    public CompletableFuture<List<ClientFacingDevice>> getDevices(String userId, RequestOptions requestOptions) {
        return this.rawClient.getDevices(userId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingDevice> getDevice(String userId, String deviceId) {
        return this.rawClient.getDevice(userId, deviceId).thenApply(response -> response.body());
    }

    public CompletableFuture<ClientFacingDevice> getDevice(
            String userId, String deviceId, RequestOptions requestOptions) {
        return this.rawClient.getDevice(userId, deviceId, requestOptions).thenApply(response -> response.body());
    }
}
