/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.user.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UserPatchBody.Builder.class)
public final class UserPatchBody {
    private final Optional<String> fallbackTimeZone;

    private final Optional<String> fallbackBirthDate;

    private final Optional<String> ingestionStart;

    private final Optional<String> ingestionEnd;

    private final Optional<String> clientUserId;

    private final Map<String, Object> additionalProperties;

    private UserPatchBody(
            Optional<String> fallbackTimeZone,
            Optional<String> fallbackBirthDate,
            Optional<String> ingestionStart,
            Optional<String> ingestionEnd,
            Optional<String> clientUserId,
            Map<String, Object> additionalProperties) {
        this.fallbackTimeZone = fallbackTimeZone;
        this.fallbackBirthDate = fallbackBirthDate;
        this.ingestionStart = ingestionStart;
        this.ingestionEnd = ingestionEnd;
        this.clientUserId = clientUserId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Fallback time zone of the user, in the form of a valid IANA tzdatabase identifier (e.g., <code>Europe/London</code> or <code>America/Los_Angeles</code>).
     * Used when pulling data from sources that are completely time zone agnostic (e.g., all time is relative to UTC clock, without any time zone attributions on data points).
     */
    @JsonProperty("fallback_time_zone")
    public Optional<String> getFallbackTimeZone() {
        return fallbackTimeZone;
    }

    /**
     * @return Fallback date of birth of the user, in YYYY-mm-dd format. Used for calculating max heartrate for providers that don not provide users' age.
     */
    @JsonProperty("fallback_birth_date")
    public Optional<String> getFallbackBirthDate() {
        return fallbackBirthDate;
    }

    /**
     * @return Starting bound for user <a href="https://docs.tryvital.io/wearables/providers/data-ingestion-bounds">data ingestion bounds</a>.
     */
    @JsonProperty("ingestion_start")
    public Optional<String> getIngestionStart() {
        return ingestionStart;
    }

    /**
     * @return Ending bound for user <a href="https://docs.tryvital.io/wearables/providers/data-ingestion-bounds">data ingestion bounds</a>.
     */
    @JsonProperty("ingestion_end")
    public Optional<String> getIngestionEnd() {
        return ingestionEnd;
    }

    /**
     * @return A unique ID representing the end user. Typically this will be a user ID from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.
     */
    @JsonProperty("client_user_id")
    public Optional<String> getClientUserId() {
        return clientUserId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserPatchBody && equalTo((UserPatchBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserPatchBody other) {
        return fallbackTimeZone.equals(other.fallbackTimeZone)
                && fallbackBirthDate.equals(other.fallbackBirthDate)
                && ingestionStart.equals(other.ingestionStart)
                && ingestionEnd.equals(other.ingestionEnd)
                && clientUserId.equals(other.clientUserId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.fallbackTimeZone,
                this.fallbackBirthDate,
                this.ingestionStart,
                this.ingestionEnd,
                this.clientUserId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> fallbackTimeZone = Optional.empty();

        private Optional<String> fallbackBirthDate = Optional.empty();

        private Optional<String> ingestionStart = Optional.empty();

        private Optional<String> ingestionEnd = Optional.empty();

        private Optional<String> clientUserId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UserPatchBody other) {
            fallbackTimeZone(other.getFallbackTimeZone());
            fallbackBirthDate(other.getFallbackBirthDate());
            ingestionStart(other.getIngestionStart());
            ingestionEnd(other.getIngestionEnd());
            clientUserId(other.getClientUserId());
            return this;
        }

        /**
         * <p>Fallback time zone of the user, in the form of a valid IANA tzdatabase identifier (e.g., <code>Europe/London</code> or <code>America/Los_Angeles</code>).
         * Used when pulling data from sources that are completely time zone agnostic (e.g., all time is relative to UTC clock, without any time zone attributions on data points).</p>
         */
        @JsonSetter(value = "fallback_time_zone", nulls = Nulls.SKIP)
        public Builder fallbackTimeZone(Optional<String> fallbackTimeZone) {
            this.fallbackTimeZone = fallbackTimeZone;
            return this;
        }

        public Builder fallbackTimeZone(String fallbackTimeZone) {
            this.fallbackTimeZone = Optional.ofNullable(fallbackTimeZone);
            return this;
        }

        /**
         * <p>Fallback date of birth of the user, in YYYY-mm-dd format. Used for calculating max heartrate for providers that don not provide users' age.</p>
         */
        @JsonSetter(value = "fallback_birth_date", nulls = Nulls.SKIP)
        public Builder fallbackBirthDate(Optional<String> fallbackBirthDate) {
            this.fallbackBirthDate = fallbackBirthDate;
            return this;
        }

        public Builder fallbackBirthDate(String fallbackBirthDate) {
            this.fallbackBirthDate = Optional.ofNullable(fallbackBirthDate);
            return this;
        }

        /**
         * <p>Starting bound for user <a href="https://docs.tryvital.io/wearables/providers/data-ingestion-bounds">data ingestion bounds</a>.</p>
         */
        @JsonSetter(value = "ingestion_start", nulls = Nulls.SKIP)
        public Builder ingestionStart(Optional<String> ingestionStart) {
            this.ingestionStart = ingestionStart;
            return this;
        }

        public Builder ingestionStart(String ingestionStart) {
            this.ingestionStart = Optional.ofNullable(ingestionStart);
            return this;
        }

        /**
         * <p>Ending bound for user <a href="https://docs.tryvital.io/wearables/providers/data-ingestion-bounds">data ingestion bounds</a>.</p>
         */
        @JsonSetter(value = "ingestion_end", nulls = Nulls.SKIP)
        public Builder ingestionEnd(Optional<String> ingestionEnd) {
            this.ingestionEnd = ingestionEnd;
            return this;
        }

        public Builder ingestionEnd(String ingestionEnd) {
            this.ingestionEnd = Optional.ofNullable(ingestionEnd);
            return this;
        }

        /**
         * <p>A unique ID representing the end user. Typically this will be a user ID from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.</p>
         */
        @JsonSetter(value = "client_user_id", nulls = Nulls.SKIP)
        public Builder clientUserId(Optional<String> clientUserId) {
            this.clientUserId = clientUserId;
            return this;
        }

        public Builder clientUserId(String clientUserId) {
            this.clientUserId = Optional.ofNullable(clientUserId);
            return this;
        }

        public UserPatchBody build() {
            return new UserPatchBody(
                    fallbackTimeZone,
                    fallbackBirthDate,
                    ingestionStart,
                    ingestionEnd,
                    clientUserId,
                    additionalProperties);
        }
    }
}
