/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.user.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.types.ResponsibleRelationship;
import com.vital.api.types.VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CreateInsuranceRequest.Builder.class)
public final class CreateInsuranceRequest {
    private final String payorCode;

    private final String memberId;

    private final Optional<String> groupId;

    private final ResponsibleRelationship relationship;

    private final VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails insured;

    private final Optional<VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails> guarantor;

    private final Map<String, Object> additionalProperties;

    private CreateInsuranceRequest(
            String payorCode,
            String memberId,
            Optional<String> groupId,
            ResponsibleRelationship relationship,
            VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails insured,
            Optional<VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails> guarantor,
            Map<String, Object> additionalProperties) {
        this.payorCode = payorCode;
        this.memberId = memberId;
        this.groupId = groupId;
        this.relationship = relationship;
        this.insured = insured;
        this.guarantor = guarantor;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("payor_code")
    public String getPayorCode() {
        return payorCode;
    }

    @JsonProperty("member_id")
    public String getMemberId() {
        return memberId;
    }

    @JsonProperty("group_id")
    public Optional<String> getGroupId() {
        return groupId;
    }

    @JsonProperty("relationship")
    public ResponsibleRelationship getRelationship() {
        return relationship;
    }

    @JsonProperty("insured")
    public VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails getInsured() {
        return insured;
    }

    @JsonProperty("guarantor")
    public Optional<VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails> getGuarantor() {
        return guarantor;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateInsuranceRequest && equalTo((CreateInsuranceRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateInsuranceRequest other) {
        return payorCode.equals(other.payorCode)
                && memberId.equals(other.memberId)
                && groupId.equals(other.groupId)
                && relationship.equals(other.relationship)
                && insured.equals(other.insured)
                && guarantor.equals(other.guarantor);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.payorCode, this.memberId, this.groupId, this.relationship, this.insured, this.guarantor);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PayorCodeStage builder() {
        return new Builder();
    }

    public interface PayorCodeStage {
        MemberIdStage payorCode(String payorCode);

        Builder from(CreateInsuranceRequest other);
    }

    public interface MemberIdStage {
        RelationshipStage memberId(String memberId);
    }

    public interface RelationshipStage {
        InsuredStage relationship(ResponsibleRelationship relationship);
    }

    public interface InsuredStage {
        _FinalStage insured(VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails insured);
    }

    public interface _FinalStage {
        CreateInsuranceRequest build();

        _FinalStage groupId(Optional<String> groupId);

        _FinalStage groupId(String groupId);

        _FinalStage guarantor(Optional<VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails> guarantor);

        _FinalStage guarantor(VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails guarantor);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements PayorCodeStage, MemberIdStage, RelationshipStage, InsuredStage, _FinalStage {
        private String payorCode;

        private String memberId;

        private ResponsibleRelationship relationship;

        private VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails insured;

        private Optional<VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails> guarantor = Optional.empty();

        private Optional<String> groupId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(CreateInsuranceRequest other) {
            payorCode(other.getPayorCode());
            memberId(other.getMemberId());
            groupId(other.getGroupId());
            relationship(other.getRelationship());
            insured(other.getInsured());
            guarantor(other.getGuarantor());
            return this;
        }

        @Override
        @JsonSetter("payor_code")
        public MemberIdStage payorCode(String payorCode) {
            this.payorCode = payorCode;
            return this;
        }

        @Override
        @JsonSetter("member_id")
        public RelationshipStage memberId(String memberId) {
            this.memberId = memberId;
            return this;
        }

        @Override
        @JsonSetter("relationship")
        public InsuredStage relationship(ResponsibleRelationship relationship) {
            this.relationship = relationship;
            return this;
        }

        @Override
        @JsonSetter("insured")
        public _FinalStage insured(VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails insured) {
            this.insured = insured;
            return this;
        }

        @Override
        public _FinalStage guarantor(VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails guarantor) {
            this.guarantor = Optional.of(guarantor);
            return this;
        }

        @Override
        @JsonSetter(value = "guarantor", nulls = Nulls.SKIP)
        public _FinalStage guarantor(Optional<VitalCoreSchemasDbSchemasLabTestInsurancePersonDetails> guarantor) {
            this.guarantor = guarantor;
            return this;
        }

        @Override
        public _FinalStage groupId(String groupId) {
            this.groupId = Optional.of(groupId);
            return this;
        }

        @Override
        @JsonSetter(value = "group_id", nulls = Nulls.SKIP)
        public _FinalStage groupId(Optional<String> groupId) {
            this.groupId = groupId;
            return this;
        }

        @Override
        public CreateInsuranceRequest build() {
            return new CreateInsuranceRequest(
                    payorCode, memberId, groupId, relationship, insured, guarantor, additionalProperties);
        }
    }
}
