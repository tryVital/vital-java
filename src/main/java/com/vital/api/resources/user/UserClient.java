/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.user;

import com.vital.api.core.ClientOptions;
import com.vital.api.core.RequestOptions;
import com.vital.api.resources.user.requests.CreateInsuranceRequest;
import com.vital.api.resources.user.requests.CreateUserPortalUrlBody;
import com.vital.api.resources.user.requests.UserCreateBody;
import com.vital.api.resources.user.requests.UserGetAllRequest;
import com.vital.api.resources.user.requests.UserInfoCreateRequest;
import com.vital.api.resources.user.requests.UserPatchBody;
import com.vital.api.resources.user.requests.UserRefreshRequest;
import com.vital.api.resources.user.requests.UserUndoDeleteRequest;
import com.vital.api.types.ClientFacingDevice;
import com.vital.api.types.ClientFacingInsurance;
import com.vital.api.types.ClientFacingProviderWithStatus;
import com.vital.api.types.ClientFacingUser;
import com.vital.api.types.ClientFacingUserKey;
import com.vital.api.types.CreateUserPortalUrlResponse;
import com.vital.api.types.MetricsResult;
import com.vital.api.types.PaginatedUsersResponse;
import com.vital.api.types.Providers;
import com.vital.api.types.UserInfo;
import com.vital.api.types.UserRefreshSuccessResponse;
import com.vital.api.types.UserSignInTokenResponse;
import com.vital.api.types.UserSuccessResponse;
import java.util.List;
import java.util.Map;

public class UserClient {
    protected final ClientOptions clientOptions;

    private final RawUserClient rawClient;

    public UserClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawUserClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawUserClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * GET All users for team.
     */
    public PaginatedUsersResponse getAll() {
        return this.rawClient.getAll().body();
    }

    /**
     * GET All users for team.
     */
    public PaginatedUsersResponse getAll(UserGetAllRequest request) {
        return this.rawClient.getAll(request).body();
    }

    /**
     * GET All users for team.
     */
    public PaginatedUsersResponse getAll(UserGetAllRequest request, RequestOptions requestOptions) {
        return this.rawClient.getAll(request, requestOptions).body();
    }

    /**
     * POST Create a Vital user given a client_user_id and returns the user_id.
     */
    public ClientFacingUserKey create(UserCreateBody request) {
        return this.rawClient.create(request).body();
    }

    /**
     * POST Create a Vital user given a client_user_id and returns the user_id.
     */
    public ClientFacingUserKey create(UserCreateBody request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    /**
     * GET metrics for team.
     */
    public MetricsResult getTeamMetrics() {
        return this.rawClient.getTeamMetrics().body();
    }

    /**
     * GET metrics for team.
     */
    public MetricsResult getTeamMetrics(RequestOptions requestOptions) {
        return this.rawClient.getTeamMetrics(requestOptions).body();
    }

    /**
     * GET Users connected providers
     */
    public Map<String, List<ClientFacingProviderWithStatus>> getConnectedProviders(String userId) {
        return this.rawClient.getConnectedProviders(userId).body();
    }

    /**
     * GET Users connected providers
     */
    public Map<String, List<ClientFacingProviderWithStatus>> getConnectedProviders(
            String userId, RequestOptions requestOptions) {
        return this.rawClient.getConnectedProviders(userId, requestOptions).body();
    }

    public UserInfo getLatestUserInfo(String userId) {
        return this.rawClient.getLatestUserInfo(userId).body();
    }

    public UserInfo getLatestUserInfo(String userId, RequestOptions requestOptions) {
        return this.rawClient.getLatestUserInfo(userId, requestOptions).body();
    }

    public ClientFacingInsurance createInsurance(String userId, CreateInsuranceRequest request) {
        return this.rawClient.createInsurance(userId, request).body();
    }

    public ClientFacingInsurance createInsurance(
            String userId, CreateInsuranceRequest request, RequestOptions requestOptions) {
        return this.rawClient.createInsurance(userId, request, requestOptions).body();
    }

    public ClientFacingInsurance getLatestInsurance(String userId) {
        return this.rawClient.getLatestInsurance(userId).body();
    }

    public ClientFacingInsurance getLatestInsurance(String userId, RequestOptions requestOptions) {
        return this.rawClient.getLatestInsurance(userId, requestOptions).body();
    }

    public UserInfo upsertUserInfo(String userId, UserInfoCreateRequest request) {
        return this.rawClient.upsertUserInfo(userId, request).body();
    }

    public UserInfo upsertUserInfo(String userId, UserInfoCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.upsertUserInfo(userId, request, requestOptions).body();
    }

    /**
     * GET user_id from client_user_id.
     */
    public ClientFacingUser getByClientUserId(String clientUserId) {
        return this.rawClient.getByClientUserId(clientUserId).body();
    }

    /**
     * GET user_id from client_user_id.
     */
    public ClientFacingUser getByClientUserId(String clientUserId, RequestOptions requestOptions) {
        return this.rawClient.getByClientUserId(clientUserId, requestOptions).body();
    }

    public UserSuccessResponse deregisterProvider(String userId, Providers provider) {
        return this.rawClient.deregisterProvider(userId, provider).body();
    }

    public UserSuccessResponse deregisterProvider(String userId, Providers provider, RequestOptions requestOptions) {
        return this.rawClient
                .deregisterProvider(userId, provider, requestOptions)
                .body();
    }

    public ClientFacingUser get(String userId) {
        return this.rawClient.get(userId).body();
    }

    public ClientFacingUser get(String userId, RequestOptions requestOptions) {
        return this.rawClient.get(userId, requestOptions).body();
    }

    public UserSuccessResponse delete(String userId) {
        return this.rawClient.delete(userId).body();
    }

    public UserSuccessResponse delete(String userId, RequestOptions requestOptions) {
        return this.rawClient.delete(userId, requestOptions).body();
    }

    public void patch(String userId) {
        this.rawClient.patch(userId).body();
    }

    public void patch(String userId, UserPatchBody request) {
        this.rawClient.patch(userId, request).body();
    }

    public void patch(String userId, UserPatchBody request, RequestOptions requestOptions) {
        this.rawClient.patch(userId, request, requestOptions).body();
    }

    public UserSuccessResponse undoDelete() {
        return this.rawClient.undoDelete().body();
    }

    public UserSuccessResponse undoDelete(UserUndoDeleteRequest request) {
        return this.rawClient.undoDelete(request).body();
    }

    public UserSuccessResponse undoDelete(UserUndoDeleteRequest request, RequestOptions requestOptions) {
        return this.rawClient.undoDelete(request, requestOptions).body();
    }

    /**
     * Trigger a manual refresh for a specific user
     */
    public UserRefreshSuccessResponse refresh(String userId) {
        return this.rawClient.refresh(userId).body();
    }

    /**
     * Trigger a manual refresh for a specific user
     */
    public UserRefreshSuccessResponse refresh(String userId, UserRefreshRequest request) {
        return this.rawClient.refresh(userId, request).body();
    }

    /**
     * Trigger a manual refresh for a specific user
     */
    public UserRefreshSuccessResponse refresh(
            String userId, UserRefreshRequest request, RequestOptions requestOptions) {
        return this.rawClient.refresh(userId, request, requestOptions).body();
    }

    public List<ClientFacingDevice> getDevices(String userId) {
        return this.rawClient.getDevices(userId).body();
    }

    public List<ClientFacingDevice> getDevices(String userId, RequestOptions requestOptions) {
        return this.rawClient.getDevices(userId, requestOptions).body();
    }

    public ClientFacingDevice getDevice(String userId, String deviceId) {
        return this.rawClient.getDevice(userId, deviceId).body();
    }

    public ClientFacingDevice getDevice(String userId, String deviceId, RequestOptions requestOptions) {
        return this.rawClient.getDevice(userId, deviceId, requestOptions).body();
    }

    public UserSignInTokenResponse getUserSignInToken(String userId) {
        return this.rawClient.getUserSignInToken(userId).body();
    }

    public UserSignInTokenResponse getUserSignInToken(String userId, RequestOptions requestOptions) {
        return this.rawClient.getUserSignInToken(userId, requestOptions).body();
    }

    public CreateUserPortalUrlResponse createPortalUrl(String userId, CreateUserPortalUrlBody request) {
        return this.rawClient.createPortalUrl(userId, request).body();
    }

    public CreateUserPortalUrlResponse createPortalUrl(
            String userId, CreateUserPortalUrlBody request, RequestOptions requestOptions) {
        return this.rawClient.createPortalUrl(userId, request, requestOptions).body();
    }
}
