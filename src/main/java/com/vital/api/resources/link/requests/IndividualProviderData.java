/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.link.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.types.Region;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = IndividualProviderData.Builder.class)
public final class IndividualProviderData {
    private final Optional<String> vitalLinkToken;

    private final String username;

    private final String password;

    private final Optional<Region> region;

    private final Map<String, Object> additionalProperties;

    private IndividualProviderData(
            Optional<String> vitalLinkToken,
            String username,
            String password,
            Optional<Region> region,
            Map<String, Object> additionalProperties) {
        this.vitalLinkToken = vitalLinkToken;
        this.username = username;
        this.password = password;
        this.region = region;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("x-vital-link-token")
    public Optional<String> getVitalLinkToken() {
        return vitalLinkToken;
    }

    /**
     * @return Username for provider
     */
    @JsonProperty("username")
    public String getUsername() {
        return username;
    }

    /**
     * @return Password for provider
     */
    @JsonProperty("password")
    public String getPassword() {
        return password;
    }

    @JsonProperty("region")
    public Optional<Region> getRegion() {
        return region;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IndividualProviderData && equalTo((IndividualProviderData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IndividualProviderData other) {
        return vitalLinkToken.equals(other.vitalLinkToken)
                && username.equals(other.username)
                && password.equals(other.password)
                && region.equals(other.region);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.vitalLinkToken, this.username, this.password, this.region);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UsernameStage builder() {
        return new Builder();
    }

    public interface UsernameStage {
        PasswordStage username(String username);

        Builder from(IndividualProviderData other);
    }

    public interface PasswordStage {
        _FinalStage password(String password);
    }

    public interface _FinalStage {
        IndividualProviderData build();

        _FinalStage vitalLinkToken(Optional<String> vitalLinkToken);

        _FinalStage vitalLinkToken(String vitalLinkToken);

        _FinalStage region(Optional<Region> region);

        _FinalStage region(Region region);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UsernameStage, PasswordStage, _FinalStage {
        private String username;

        private String password;

        private Optional<Region> region = Optional.empty();

        private Optional<String> vitalLinkToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(IndividualProviderData other) {
            vitalLinkToken(other.getVitalLinkToken());
            username(other.getUsername());
            password(other.getPassword());
            region(other.getRegion());
            return this;
        }

        /**
         * <p>Username for provider</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("username")
        public PasswordStage username(String username) {
            this.username = username;
            return this;
        }

        /**
         * <p>Password for provider</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("password")
        public _FinalStage password(String password) {
            this.password = password;
            return this;
        }

        @java.lang.Override
        public _FinalStage region(Region region) {
            this.region = Optional.of(region);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "region", nulls = Nulls.SKIP)
        public _FinalStage region(Optional<Region> region) {
            this.region = region;
            return this;
        }

        @java.lang.Override
        public _FinalStage vitalLinkToken(String vitalLinkToken) {
            this.vitalLinkToken = Optional.of(vitalLinkToken);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "x-vital-link-token", nulls = Nulls.SKIP)
        public _FinalStage vitalLinkToken(Optional<String> vitalLinkToken) {
            this.vitalLinkToken = vitalLinkToken;
            return this;
        }

        @java.lang.Override
        public IndividualProviderData build() {
            return new IndividualProviderData(vitalLinkToken, username, password, region, additionalProperties);
        }
    }
}
