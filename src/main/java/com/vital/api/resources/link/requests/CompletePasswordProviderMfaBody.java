/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.link.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CompletePasswordProviderMfaBody.Builder.class)
public final class CompletePasswordProviderMfaBody {
    private final Optional<String> vitalLinkToken;

    private final String mfaCode;

    private final Map<String, Object> additionalProperties;

    private CompletePasswordProviderMfaBody(
            Optional<String> vitalLinkToken, String mfaCode, Map<String, Object> additionalProperties) {
        this.vitalLinkToken = vitalLinkToken;
        this.mfaCode = mfaCode;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("x-vital-link-token")
    public Optional<String> getVitalLinkToken() {
        return vitalLinkToken;
    }

    @JsonProperty("mfa_code")
    public String getMfaCode() {
        return mfaCode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CompletePasswordProviderMfaBody && equalTo((CompletePasswordProviderMfaBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CompletePasswordProviderMfaBody other) {
        return vitalLinkToken.equals(other.vitalLinkToken) && mfaCode.equals(other.mfaCode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.vitalLinkToken, this.mfaCode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MfaCodeStage builder() {
        return new Builder();
    }

    public interface MfaCodeStage {
        _FinalStage mfaCode(@NotNull String mfaCode);

        Builder from(CompletePasswordProviderMfaBody other);
    }

    public interface _FinalStage {
        CompletePasswordProviderMfaBody build();

        _FinalStage vitalLinkToken(Optional<String> vitalLinkToken);

        _FinalStage vitalLinkToken(String vitalLinkToken);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MfaCodeStage, _FinalStage {
        private String mfaCode;

        private Optional<String> vitalLinkToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CompletePasswordProviderMfaBody other) {
            vitalLinkToken(other.getVitalLinkToken());
            mfaCode(other.getMfaCode());
            return this;
        }

        @java.lang.Override
        @JsonSetter("mfa_code")
        public _FinalStage mfaCode(@NotNull String mfaCode) {
            this.mfaCode = Objects.requireNonNull(mfaCode, "mfaCode must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage vitalLinkToken(String vitalLinkToken) {
            this.vitalLinkToken = Optional.ofNullable(vitalLinkToken);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "x-vital-link-token", nulls = Nulls.SKIP)
        public _FinalStage vitalLinkToken(Optional<String> vitalLinkToken) {
            this.vitalLinkToken = vitalLinkToken;
            return this;
        }

        @java.lang.Override
        public CompletePasswordProviderMfaBody build() {
            return new CompletePasswordProviderMfaBody(vitalLinkToken, mfaCode, additionalProperties);
        }
    }
}
