/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.link.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.resources.link.types.LinkListBulkOpsRequestTeamId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LinkListBulkOpsRequest.Builder.class)
public final class LinkListBulkOpsRequest {
    private final Optional<String> nextCursor;

    private final Optional<Integer> pageSize;

    private final Optional<LinkListBulkOpsRequestTeamId> teamId;

    private final Map<String, Object> additionalProperties;

    private LinkListBulkOpsRequest(
            Optional<String> nextCursor,
            Optional<Integer> pageSize,
            Optional<LinkListBulkOpsRequestTeamId> teamId,
            Map<String, Object> additionalProperties) {
        this.nextCursor = nextCursor;
        this.pageSize = pageSize;
        this.teamId = teamId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("next_cursor")
    public Optional<String> getNextCursor() {
        return nextCursor;
    }

    @JsonProperty("page_size")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    @JsonProperty("team_id")
    public Optional<LinkListBulkOpsRequestTeamId> getTeamId() {
        return teamId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LinkListBulkOpsRequest && equalTo((LinkListBulkOpsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LinkListBulkOpsRequest other) {
        return nextCursor.equals(other.nextCursor) && pageSize.equals(other.pageSize) && teamId.equals(other.teamId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.nextCursor, this.pageSize, this.teamId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> nextCursor = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<LinkListBulkOpsRequestTeamId> teamId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LinkListBulkOpsRequest other) {
            nextCursor(other.getNextCursor());
            pageSize(other.getPageSize());
            teamId(other.getTeamId());
            return this;
        }

        @JsonSetter(value = "next_cursor", nulls = Nulls.SKIP)
        public Builder nextCursor(Optional<String> nextCursor) {
            this.nextCursor = nextCursor;
            return this;
        }

        public Builder nextCursor(String nextCursor) {
            this.nextCursor = Optional.ofNullable(nextCursor);
            return this;
        }

        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        @JsonSetter(value = "team_id", nulls = Nulls.SKIP)
        public Builder teamId(Optional<LinkListBulkOpsRequestTeamId> teamId) {
            this.teamId = teamId;
            return this;
        }

        public Builder teamId(LinkListBulkOpsRequestTeamId teamId) {
            this.teamId = Optional.ofNullable(teamId);
            return this;
        }

        public LinkListBulkOpsRequest build() {
            return new LinkListBulkOpsRequest(nextCursor, pageSize, teamId, additionalProperties);
        }
    }
}
