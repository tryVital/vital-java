/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.link;

import com.vital.api.core.ClientOptions;
import com.vital.api.core.RequestOptions;
import com.vital.api.resources.link.requests.BeginLinkTokenRequest;
import com.vital.api.resources.link.requests.BulkExportConnectionsBody;
import com.vital.api.resources.link.requests.BulkImportConnectionsBody;
import com.vital.api.resources.link.requests.BulkPauseConnectionsBody;
import com.vital.api.resources.link.requests.BulkTriggerHistoricalPullBody;
import com.vital.api.resources.link.requests.CompletePasswordProviderMfaBody;
import com.vital.api.resources.link.requests.DemoConnectionCreationPayload;
import com.vital.api.resources.link.requests.EmailAuthLink;
import com.vital.api.resources.link.requests.EmailProviderAuthLink;
import com.vital.api.resources.link.requests.IndividualProviderData;
import com.vital.api.resources.link.requests.LinkCodeCreateRequest;
import com.vital.api.resources.link.requests.LinkGenerateOauthLinkRequest;
import com.vital.api.resources.link.requests.LinkGetAllProvidersRequest;
import com.vital.api.resources.link.requests.LinkListBulkOpsRequest;
import com.vital.api.resources.link.requests.LinkTokenExchange;
import com.vital.api.resources.link.requests.LinkTokenStateRequest;
import com.vital.api.resources.link.requests.LinkTokenValidationRequest;
import com.vital.api.resources.link.requests.ManualConnectionData;
import com.vital.api.resources.link.requests.PasswordAuthLink;
import com.vital.api.types.BulkExportConnectionsResponse;
import com.vital.api.types.BulkImportConnectionsResponse;
import com.vital.api.types.BulkOpsResponse;
import com.vital.api.types.DemoConnectionStatus;
import com.vital.api.types.LinkTokenExchangeResponse;
import com.vital.api.types.ManualProviders;
import com.vital.api.types.OAuthProviders;
import com.vital.api.types.PasswordProviders;
import com.vital.api.types.ProviderLinkResponse;
import com.vital.api.types.Source;
import com.vital.api.types.SourceLink;
import com.vital.api.types.VitalTokenCreatedResponse;
import java.util.List;
import java.util.Map;

public class LinkClient {
    protected final ClientOptions clientOptions;

    private final RawLinkClient rawClient;

    public LinkClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawLinkClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawLinkClient withRawResponse() {
        return this.rawClient;
    }

    public BulkOpsResponse listBulkOps() {
        return this.rawClient.listBulkOps().body();
    }

    public BulkOpsResponse listBulkOps(LinkListBulkOpsRequest request) {
        return this.rawClient.listBulkOps(request).body();
    }

    public BulkOpsResponse listBulkOps(LinkListBulkOpsRequest request, RequestOptions requestOptions) {
        return this.rawClient.listBulkOps(request, requestOptions).body();
    }

    public BulkImportConnectionsResponse bulkImport(BulkImportConnectionsBody request) {
        return this.rawClient.bulkImport(request).body();
    }

    public BulkImportConnectionsResponse bulkImport(BulkImportConnectionsBody request, RequestOptions requestOptions) {
        return this.rawClient.bulkImport(request, requestOptions).body();
    }

    public Object bulkTriggerHistoricalPull(BulkTriggerHistoricalPullBody request) {
        return this.rawClient.bulkTriggerHistoricalPull(request).body();
    }

    public Object bulkTriggerHistoricalPull(BulkTriggerHistoricalPullBody request, RequestOptions requestOptions) {
        return this.rawClient.bulkTriggerHistoricalPull(request, requestOptions).body();
    }

    public BulkExportConnectionsResponse bulkExport(BulkExportConnectionsBody request) {
        return this.rawClient.bulkExport(request).body();
    }

    public BulkExportConnectionsResponse bulkExport(BulkExportConnectionsBody request, RequestOptions requestOptions) {
        return this.rawClient.bulkExport(request, requestOptions).body();
    }

    public Object bulkPause(BulkPauseConnectionsBody request) {
        return this.rawClient.bulkPause(request).body();
    }

    public Object bulkPause(BulkPauseConnectionsBody request, RequestOptions requestOptions) {
        return this.rawClient.bulkPause(request, requestOptions).body();
    }

    /**
     * Endpoint to generate a user link token, to be used throughout the vital
     * link process. The vital link token is a one time use token, that
     * expires after 10 minutes. If you would like vital-link widget to launch
     * with a specific provider, pass in a provider in the body. If you would
     * like to redirect to a custom url after successful or error connection,
     * pass in your own custom redirect_url parameter.
     */
    public LinkTokenExchangeResponse token(LinkTokenExchange request) {
        return this.rawClient.token(request).body();
    }

    /**
     * Endpoint to generate a user link token, to be used throughout the vital
     * link process. The vital link token is a one time use token, that
     * expires after 10 minutes. If you would like vital-link widget to launch
     * with a specific provider, pass in a provider in the body. If you would
     * like to redirect to a custom url after successful or error connection,
     * pass in your own custom redirect_url parameter.
     */
    public LinkTokenExchangeResponse token(LinkTokenExchange request, RequestOptions requestOptions) {
        return this.rawClient.token(request, requestOptions).body();
    }

    public Map<String, Object> isTokenValid(LinkTokenValidationRequest request) {
        return this.rawClient.isTokenValid(request).body();
    }

    public Map<String, Object> isTokenValid(LinkTokenValidationRequest request, RequestOptions requestOptions) {
        return this.rawClient.isTokenValid(request, requestOptions).body();
    }

    /**
     * Generate a token to invite a user of Vital mobile app to your team
     */
    public VitalTokenCreatedResponse codeCreate(LinkCodeCreateRequest request) {
        return this.rawClient.codeCreate(request).body();
    }

    /**
     * Generate a token to invite a user of Vital mobile app to your team
     */
    public VitalTokenCreatedResponse codeCreate(LinkCodeCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.codeCreate(request, requestOptions).body();
    }

    /**
     * REQUEST_SOURCE: VITAL-LINK
     * Start link token process
     */
    public Map<String, Object> startConnect(BeginLinkTokenRequest request) {
        return this.rawClient.startConnect(request).body();
    }

    /**
     * REQUEST_SOURCE: VITAL-LINK
     * Start link token process
     */
    public Map<String, Object> startConnect(BeginLinkTokenRequest request, RequestOptions requestOptions) {
        return this.rawClient.startConnect(request, requestOptions).body();
    }

    /**
     * REQUEST_SOURCE: VITAL-LINK
     * Check link token state - can be hit continuously used as heartbeat
     */
    public Map<String, Object> tokenState() {
        return this.rawClient.tokenState().body();
    }

    /**
     * REQUEST_SOURCE: VITAL-LINK
     * Check link token state - can be hit continuously used as heartbeat
     */
    public Map<String, Object> tokenState(LinkTokenStateRequest request) {
        return this.rawClient.tokenState(request).body();
    }

    /**
     * REQUEST_SOURCE: VITAL-LINK
     * Check link token state - can be hit continuously used as heartbeat
     */
    public Map<String, Object> tokenState(LinkTokenStateRequest request, RequestOptions requestOptions) {
        return this.rawClient.tokenState(request, requestOptions).body();
    }

    /**
     * Deprecated. Use <code>POST /v2/link/provider/email/{provider}</code> instead.
     */
    public Object emailAuth(EmailAuthLink request) {
        return this.rawClient.emailAuth(request).body();
    }

    /**
     * Deprecated. Use <code>POST /v2/link/provider/email/{provider}</code> instead.
     */
    public Object emailAuth(EmailAuthLink request, RequestOptions requestOptions) {
        return this.rawClient.emailAuth(request, requestOptions).body();
    }

    /**
     * Deprecated. Use <code>POST /v2/link/provider/password/{provider}</code> instead.
     */
    public Object passwordAuth(PasswordAuthLink request) {
        return this.rawClient.passwordAuth(request).body();
    }

    /**
     * Deprecated. Use <code>POST /v2/link/provider/password/{provider}</code> instead.
     */
    public Object passwordAuth(PasswordAuthLink request, RequestOptions requestOptions) {
        return this.rawClient.passwordAuth(request, requestOptions).body();
    }

    /**
     * This endpoint generates an OAuth link for oauth provider
     */
    public Source generateOauthLink(OAuthProviders oauthProvider) {
        return this.rawClient.generateOauthLink(oauthProvider).body();
    }

    /**
     * This endpoint generates an OAuth link for oauth provider
     */
    public Source generateOauthLink(OAuthProviders oauthProvider, LinkGenerateOauthLinkRequest request) {
        return this.rawClient.generateOauthLink(oauthProvider, request).body();
    }

    /**
     * This endpoint generates an OAuth link for oauth provider
     */
    public Source generateOauthLink(
            OAuthProviders oauthProvider, LinkGenerateOauthLinkRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .generateOauthLink(oauthProvider, request, requestOptions)
                .body();
    }

    /**
     * This connects auth providers that are password based.
     */
    public ProviderLinkResponse connectPasswordProvider(PasswordProviders provider, IndividualProviderData request) {
        return this.rawClient.connectPasswordProvider(provider, request).body();
    }

    /**
     * This connects auth providers that are password based.
     */
    public ProviderLinkResponse connectPasswordProvider(
            PasswordProviders provider, IndividualProviderData request, RequestOptions requestOptions) {
        return this.rawClient
                .connectPasswordProvider(provider, request, requestOptions)
                .body();
    }

    /**
     * This connects auth providers that are password based.
     */
    public ProviderLinkResponse completePasswordProviderMfa(
            PasswordProviders provider, CompletePasswordProviderMfaBody request) {
        return this.rawClient.completePasswordProviderMfa(provider, request).body();
    }

    /**
     * This connects auth providers that are password based.
     */
    public ProviderLinkResponse completePasswordProviderMfa(
            PasswordProviders provider, CompletePasswordProviderMfaBody request, RequestOptions requestOptions) {
        return this.rawClient
                .completePasswordProviderMfa(provider, request, requestOptions)
                .body();
    }

    /**
     * This connects auth providers that are email based.
     */
    public Object connectEmailAuthProvider(String provider, EmailProviderAuthLink request) {
        return this.rawClient.connectEmailAuthProvider(provider, request).body();
    }

    /**
     * This connects auth providers that are email based.
     */
    public Object connectEmailAuthProvider(
            String provider, EmailProviderAuthLink request, RequestOptions requestOptions) {
        return this.rawClient
                .connectEmailAuthProvider(provider, request, requestOptions)
                .body();
    }

    /**
     * GET List of all available providers given the generated link token.
     */
    public List<SourceLink> getAllProviders() {
        return this.rawClient.getAllProviders().body();
    }

    /**
     * GET List of all available providers given the generated link token.
     */
    public List<SourceLink> getAllProviders(LinkGetAllProvidersRequest request) {
        return this.rawClient.getAllProviders(request).body();
    }

    /**
     * GET List of all available providers given the generated link token.
     */
    public List<SourceLink> getAllProviders(LinkGetAllProvidersRequest request, RequestOptions requestOptions) {
        return this.rawClient.getAllProviders(request, requestOptions).body();
    }

    public Map<String, Boolean> connectManualProvider(ManualProviders provider, ManualConnectionData request) {
        return this.rawClient.connectManualProvider(provider, request).body();
    }

    public Map<String, Boolean> connectManualProvider(
            ManualProviders provider, ManualConnectionData request, RequestOptions requestOptions) {
        return this.rawClient
                .connectManualProvider(provider, request, requestOptions)
                .body();
    }

    /**
     * POST Connect the given Vital user to a demo provider.
     */
    public DemoConnectionStatus connectDemoProvider(DemoConnectionCreationPayload request) {
        return this.rawClient.connectDemoProvider(request).body();
    }

    /**
     * POST Connect the given Vital user to a demo provider.
     */
    public DemoConnectionStatus connectDemoProvider(
            DemoConnectionCreationPayload request, RequestOptions requestOptions) {
        return this.rawClient.connectDemoProvider(request, requestOptions).body();
    }
}
