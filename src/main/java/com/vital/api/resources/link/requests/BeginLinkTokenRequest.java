/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vital.api.resources.link.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vital.api.core.ObjectMappers;
import com.vital.api.types.Providers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BeginLinkTokenRequest.Builder.class)
public final class BeginLinkTokenRequest {
    private final String linkToken;

    private final Providers provider;

    private final Map<String, Object> additionalProperties;

    private BeginLinkTokenRequest(String linkToken, Providers provider, Map<String, Object> additionalProperties) {
        this.linkToken = linkToken;
        this.provider = provider;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("link_token")
    public String getLinkToken() {
        return linkToken;
    }

    @JsonProperty("provider")
    public Providers getProvider() {
        return provider;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BeginLinkTokenRequest && equalTo((BeginLinkTokenRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BeginLinkTokenRequest other) {
        return linkToken.equals(other.linkToken) && provider.equals(other.provider);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.linkToken, this.provider);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LinkTokenStage builder() {
        return new Builder();
    }

    public interface LinkTokenStage {
        ProviderStage linkToken(@NotNull String linkToken);

        Builder from(BeginLinkTokenRequest other);
    }

    public interface ProviderStage {
        _FinalStage provider(@NotNull Providers provider);
    }

    public interface _FinalStage {
        BeginLinkTokenRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LinkTokenStage, ProviderStage, _FinalStage {
        private String linkToken;

        private Providers provider;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BeginLinkTokenRequest other) {
            linkToken(other.getLinkToken());
            provider(other.getProvider());
            return this;
        }

        @java.lang.Override
        @JsonSetter("link_token")
        public ProviderStage linkToken(@NotNull String linkToken) {
            this.linkToken = Objects.requireNonNull(linkToken, "linkToken must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("provider")
        public _FinalStage provider(@NotNull Providers provider) {
            this.provider = Objects.requireNonNull(provider, "provider must not be null");
            return this;
        }

        @java.lang.Override
        public BeginLinkTokenRequest build() {
            return new BeginLinkTokenRequest(linkToken, provider, additionalProperties);
        }
    }
}
